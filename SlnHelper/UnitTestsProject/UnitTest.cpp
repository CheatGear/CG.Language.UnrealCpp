#include "pch.h"
#include "Defs.h"
#include "CppUnitTest.h"
#include "../{{CG_GAME_NAME}}/SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// WidgetBlueprintGeneratedClass BP_InGame_TournamentBust.BP_InGame_TournamentBust_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_TournamentBust__BP_InGame_TournamentBust_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, Busted_OUT, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, Busted_IN, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BackBar, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BG_White, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BP_ButtonCallout_C_560, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BP_ButtonCallout_C_563, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BTN_DoNotRailbird, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, BTN_Railbird, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, DirtBrush01, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, DirtBrush02, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, DirtBrush03, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, DirtBrush04, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, DirtFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, HeaderBar, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, NoRailbirdText, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, StartingColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, RailbirdTimeLimit, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, TimeToHalfway, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, HalfwayColor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, TimeToCriticalAfterHalfway, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, CriticalColor, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_TournamentBust_C, TimeToTimeoutAfterCritical, 0x044C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_TournamentBust_C, 0x0450);
		}

		// WidgetBlueprintGeneratedClass BP_RankedLobby.BP_RankedLobby_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankedLobby__BP_RankedLobby_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Venue_IN, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, VenuePrev, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, VenueNext, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowFade, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowLoop, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, SwitchTableL, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Search_IN, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, HeadToHead_Searching, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Tournament_Searching, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, HeadToHead_Selected, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Tournament_Selected, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RankedLobbyType_OUT, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RankedLobbyType_IN, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BackBar, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BackButton, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BP_ButtonCallout_C_1, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BP_ButtonCallout_C_2, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BP_ButtonCallout_C_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BP_ButtonCallout_C_32, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BP_SelectButton, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BPBackButton, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BTN_Claim, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BTN_INFO_REWARDS, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BTN_VenueNext, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BTN_VenuePrev, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BuyInH, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, BuyInT, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, CountdownLabel, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, CurrentRatingInfo, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, EntryFeeH, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, EntryFeeT, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Fees, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, From_Background, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, HeaderHSB, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, HeaderTSB, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, HeadToHead_BTN, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Image_1, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Image_6, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, ProvisionalTipH, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, ProvisionalTipT, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardBorderH, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardBorderT, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardGlowH, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardGlowT, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardsInfoH, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardsInfoT, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, SearchBorder, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, SelectButton, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, StatusText, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Subtitle, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowBorder, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowNext, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowNextDisabled, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowPrev, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowPrevDisabled, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableCInfo, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableHInfo, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableL1Info, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableL2Info, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableLeftBtn, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableR1Info, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableR2Info, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableRightBtn, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableTInfo, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableXInfo, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TextBlock_4, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TITLE_RANKED_GAMES, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, To_Background, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Tounament_BTN, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, IsHeadToHeadHovered, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, IsTournamentHovered, 0x0879);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, ResetOnAnimationFinished, 0x087A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, Resetting, 0x087B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TablesShown, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, TableArrowLoopActive, 0x087D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, UnknownData_39DD, 0x087E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobby_C, RewardsGlowYOffsetWhenRibbonEmpty, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankedLobby_C, 0x0884);
		}

		// Class PhysXVehicles.WheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_AQL5, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_IZFX, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_NES5, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_77J9, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_GLJX, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_QPNM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CDAF, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_L0HA, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// Class PhysXVehicles.SimpleWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// Class PhysXVehicles.TireConfig
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_HKA9, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_EC8Z, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// Class PhysXVehicles.VehicleAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_IS4O, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_UKC8, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0A50);
		}

		// Class PhysXVehicles.VehicleWheel
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ZCNF, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_SS6E, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_CUPH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_Q17Q, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_3L9G, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_QVEW, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// Class PhysXVehicles.WheeledVehicle
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// Class PhysXVehicles.WheeledVehicleMovementComponent4W
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// Class CinematicCamera.CameraRig_Crane
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_HQNI, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// Class CinematicCamera.CameraRig_Rail
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_BQBS, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// Class CinematicCamera.CineCameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_TJW8, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// Class CinematicCamera.CineCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_L6MK, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_47ZI, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// BlueprintGeneratedClass HairHighlightsVector.HairHighlightsVector_C
		TEST_METHOD(BlueprintGeneratedClass__HairHighlightsVector__HairHighlightsVector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow4, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHairHighlightsVector_C, Arrow, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHairHighlightsVector_C, 0x0250);
		}

		// WidgetBlueprintGeneratedClass BP_NicknameOption.BP_NicknameOption_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_NicknameOption__BP_NicknameOption_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, CanvasPanel_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, CfButton_29, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, LockedImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, TextBlock_98, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, Nickname, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, ParentPage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, Rarity, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, unlocked, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, UnknownData_SGCN, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, UnlockLevel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, Index, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, UnlockType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NicknameOption_C, IsValid, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NicknameOption_C, 0x02BA);
		}

		// WidgetBlueprintGeneratedClass BP_MouseHelper.BP_MouseHelper_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MouseHelper__BP_MouseHelper_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MouseHelper_C, Owner, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MouseHelper_C, 0x0268);
		}

		// BlueprintGeneratedClass BP_3D_ChatIndicator.BP_3D_ChatIndicator_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_ChatIndicator__BP_3D_ChatIndicator_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ChatIndicator_C, ChatIndicator, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ChatIndicator_C, DynamicMaterial, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_ChatIndicator_C, 0x0230);
		}

		// BlueprintGeneratedClass LootCase_Open_PlayRaritySpecificParticles.LootCase_Open_PlayRaritySpecificParticles_C
		TEST_METHOD(BlueprintGeneratedClass__LootCase_Open_PlayRaritySpecificParticles__LootCase_Open_PlayRaritySpecificParticles_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootCase_Open_PlayRaritySpecificParticles_C, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_OverviewPanel.BP_OverviewPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OverviewPanel__BP_OverviewPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Overview_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Overview_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BackBar, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_BackButton_C_47, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_ButtonCallout_C_5, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_ButtonCallout_C_7, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_ChallengeProgressPanel0, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_ChallengeProgressPanel1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_ChallengeProgressPanel2, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_RecentUnlockSlot, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_RecentUnlockSlot_C_2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BP_RecentUnlockSlot_C_3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BTN_LB, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, BTN_RB, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Head2Head_ICON, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Image_6665, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Image_6666, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Image_6936, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Image_7310, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Safeframe, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, TB_Ranked_Head2Head_Rating, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, TB_Ranked_Head2Head_Tier, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, TB_Ranked_Tournament_Rating, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, TB_Ranked_Tournament_Tier, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, Tournament_ICON, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, ChallengeData, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OverviewPanel_C, parentScreen, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OverviewPanel_C, 0x0470);
		}

		// Class ImgMedia.ImgMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// BlueprintGeneratedClass BP_LobbyTypeViewModel.BP_LobbyTypeViewModel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LobbyTypeViewModel__BP_LobbyTypeViewModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyTypeViewModel_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyTypeViewModel_C, LobbyBaseReference, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LobbyTypeViewModel_C, 0x0058);
		}

		// WidgetBlueprintGeneratedClass BP_AnimatingScroller.BP_AnimatingScroller_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AnimatingScroller__BP_AnimatingScroller_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, ScrollRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward0, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward3, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward4, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward5, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward6, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, Reward7, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatingScroller_C, RootPanel, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AnimatingScroller_C, 0x02F0);
		}

		// BlueprintGeneratedClass BP_TransitionCam.BP_TransitionCam_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TransitionCam__BP_TransitionCam_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TransitionCam_C, Camera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TransitionCam_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TransitionCam_C, 0x0290);
		}

		// Class GameplayTasks.GameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_77YF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_ZSCE, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_99HN, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// Class GameplayTasks.GameplayTask_ClaimResource
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// Class GameplayTasks.GameplayTask_SpawnActor
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_1Q8D, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// Class GameplayTasks.GameplayTask_TimeLimitedExecution
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_08I9, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// Class GameplayTasks.GameplayTask_WaitDelay
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_TMHX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// Class GameplayTasks.GameplayTaskOwnerInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// Class GameplayTasks.GameplayTaskResource
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_A4IG, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_216B, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// Class GameplayTasks.GameplayTasksComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_PG76, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_F6RY, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_MZ6O, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// BlueprintGeneratedClass BP_ButtonBehavior.BP_ButtonBehavior_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ButtonBehavior__BP_ButtonBehavior_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ButtonBehavior_C, 0x0028);
		}

		// BlueprintGeneratedClass BP_WebClient.BP_WebClient_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WebClient__BP_WebClient_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WebClient_C, DefaultSceneRoot, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WebClient_C, 0x0728);
		}

		// WidgetBlueprintGeneratedClass BP_BackButton.BP_BackButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BackButton__BP_BackButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackButton_C, BackButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackButton_C, BP_ButtonCallout_C_313, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BackButton_C, 0x0278);
		}

		// BlueprintGeneratedClass Slaughterhouse.Slaughterhouse_C
		TEST_METHOD(BlueprintGeneratedClass__Slaughterhouse__Slaughterhouse_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, cam, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Nameplate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, SelectSeat, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, UnknownData_2JCP, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Freeze_Frame_Text, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, F_Matinee_Avatars, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, M_Matinee_Avatars, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, TimeDilation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, UnknownData_8KPE, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Background, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, ResetDelay, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, FreezeDelay, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, FreezeDelay_Matinee, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, UnknownData_HJ5L, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar0_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar1_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar2_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar3_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar4_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar5_F_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar0_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar1_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar2_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar3_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar4_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeAvatar5_M_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, CloseupCam_S0_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, MatineeCamera_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, GatherCardsSound_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, GatherBetsSound_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, _3D_Background_14_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, BP_TransitionCam_594_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_SP_0_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, TItem_MeatCleaver01_2_ExecuteUbergraph_Slaughterhouse_RefProperty, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, OrbitCam_T1_EdGraph_0_RefProperty, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, OrbitCam_T0_EdGraph_0_RefProperty, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_H2H0_EdGraph_4_RefProperty, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_H2H1_EdGraph_4_RefProperty, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP0_EdGraph_5_RefProperty, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP1_EdGraph_5_RefProperty, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP2_EdGraph_5_RefProperty, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP3_EdGraph_5_RefProperty, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP4_EdGraph_5_RefProperty, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlaughterhouse_C, Matinee_Intro_MP5_EdGraph_5_RefProperty, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlaughterhouse_C, 0x0388);
		}

		// Class EngineSettings.ConsoleSettings
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_LR3A, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_JYWZ, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_H4NV, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// Class EngineSettings.GameMapsSettings
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_WRBJ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// Class EngineSettings.GameNetworkManagerSettings
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_L6U1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_HTUT, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// Class EngineSettings.GameSessionSettings
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_GSEJ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// Class EngineSettings.GeneralEngineSettings
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// Class EngineSettings.GeneralProjectSettings
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_INQE, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// Class EngineSettings.HudSettings
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_CSI2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// WidgetBlueprintGeneratedClass BP_EventCalender.BP_EventCalender_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EventCalender__BP_EventCalender_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, EventDetail_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, EventDetail_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Calender_OUT, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Calender_IN, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BG_White, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_ButtonCallout_C_2, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_ButtonCallout_C_563, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay0, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay1, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay10, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay11, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay12, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay13, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay2, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay3, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay4, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay5, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay6, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay7, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay8, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BP_CalendarDay9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BTN_BACK, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, BTN_SELECT_DAY, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, cover, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DayEventsPanel, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DirtBrush01, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DirtBrush02, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DirtBrush03, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DirtBrush04, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, DirtFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Icon, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_5168, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_5169, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_5234, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_5258, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_6763, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_10308, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Image_13843, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, Days, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventCalender_C, SelectedDay, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EventCalender_C, 0x0568);
		}

		// Class NavigationSystem.NavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_92ZJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_UL8U, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_AWUW, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_IWUB, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_V4Y2, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0428);
		}

		// Class NavigationSystem.AbstractNavData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0428);
		}

		// Class NavigationSystem.CrowdManagerBase
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// Class NavigationSystem.NavArea
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_BR6J, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// Class NavigationSystem.NavArea_Default
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// Class NavigationSystem.NavArea_LowHeight
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// Class NavigationSystem.NavArea_Null
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// Class NavigationSystem.NavArea_Obstacle
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// Class NavigationSystem.NavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// Class NavigationSystem.NavAreaMeta_SwitchByAgent
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// Class NavigationSystem.NavCollision
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_HEV4, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_ODY3, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// Class NavigationSystem.NavigationGraph
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0428);
		}

		// Class NavigationSystem.NavigationGraphNode
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// Class NavigationSystem.NavigationGraphNodeComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// Class NavigationSystem.NavigationInvokerComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// Class NavigationSystem.NavigationPath
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_42TV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// Class NavigationSystem.NavigationPathGenerator
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// Class NavigationSystem.NavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_80ST, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// Class NavigationSystem.NavigationSystemV1
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_2DPC, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_EUSL, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreaWarningSizeThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_Y1H6, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_BOK9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_I7D3, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_Q6LT, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_1NB1, 0x15C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x15E0);
		}

		// Class NavigationSystem.NavigationSystemModuleConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_BRUZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// Class NavigationSystem.NavigationTestingActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_IE5L, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_I6J6, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_J5VW, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_OZXN, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_9LF0, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_XMA7, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_XAQE, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_8VY7, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// Class NavigationSystem.NavLinkComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_S6R7, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_19H4, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0460);
		}

		// Class NavigationSystem.NavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_9N0V, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_ZRSJ, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// Class NavigationSystem.NavLinkCustomComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_I4TO, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_6RYT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_MMP2, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_C1SL, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_S6S1, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_WYHU, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// Class NavigationSystem.NavLinkCustomInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// Class NavigationSystem.NavLinkHostInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// Class NavigationSystem.NavLinkRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0440);
		}

		// Class NavigationSystem.NavLinkTrivial
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// Class NavigationSystem.NavMeshBoundsVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_HYN3, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// Class NavigationSystem.NavMeshRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_239M, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0450);
		}

		// Class NavigationSystem.NavModifierComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_0IVP, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// Class NavigationSystem.NavModifierVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_CAFZ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, bMaskFillCollisionUnderneathForNavmesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_2I69, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// Class NavigationSystem.NavNodeInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// Class NavigationSystem.NavSystemConfigOverride
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_4YJ8, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// Class NavigationSystem.NavTestRenderingComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0440);
		}

		// Class NavigationSystem.RecastFilter_UseDefaultArea
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// Class NavigationSystem.RecastNavMesh
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_DWI2, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_ZTLD, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Z926, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_3G87, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_LSBE, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04D8);
		}

		// Class NavigationSystem.RecastNavMeshDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_61NI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// WidgetBlueprintGeneratedClass BP_AvatarInfo.BP_AvatarInfo_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AvatarInfo__BP_AvatarInfo_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, ShiftRight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, ShiftLeft, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Avatar_OUT, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Avatar_IN, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, AffiliationSM, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, BankrollText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, EventIcons, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, EventsBox, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Image_5320, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Image_12407, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, LevelMeter, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Rank, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, RankBacksplash, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, RankLabelText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, RankValueText, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, Safeframe, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, TextBlock_2036, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, PlayerBankRoll, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarInfo_C, CanSetProgress, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AvatarInfo_C, 0x0401);
		}

		// Class StaticMeshDescription.StaticMeshDescription
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_GameReferenceContent.BP_GameReferenceContent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameReferenceContent__BP_GameReferenceContent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, AffiliationsContent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, ChallengesContent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, EventsContent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, GameTypesContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, HandRankingsContent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, Image_1948, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, TableActionsContent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, TexasHoldemContent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReferenceContent_C, CurrentContent, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameReferenceContent_C, 0x02A8);
		}

		// WidgetBlueprintGeneratedClass BP_FormattedText.BP_FormattedText_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FormattedText__BP_FormattedText_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FormattedText_C, UberGraphFrame, 0x1140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FormattedText_C, 0x1148);
		}

		// WidgetBlueprintGeneratedClass BP_LeaderboardSlot.BP_LeaderboardSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LeaderboardSlot__BP_LeaderboardSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, UberGraphFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, ButtonSelected, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, ButtonHighlighted, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Button_Loop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Background, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Image_155, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, LobbySlot_Button, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Overlay_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Position, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, UserName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Value, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, Selected, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardSlot_C, IsSelected, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeaderboardSlot_C, 0x0341);
		}

		// WidgetBlueprintGeneratedClass BP_EmoteMenu.BP_EmoteMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EmoteMenu__BP_EmoteMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Text_In, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, cancel_glow, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, EmotesMenu_OUT, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, EmotesMenu_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, BP_ButtonCallout_C_397, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Cancel_Glow, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Center, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, D0, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, D1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, D2, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, EmoteBack, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, EmoteGrid, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_157, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_158, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_159, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_160, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_2241, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_2242, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_3123, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Image_3241, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, L0, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, L1, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, L2, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, R0, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, R1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, R2, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, RadialMenuBack, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, Safeframe, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, TB_EmoteName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, TextBacker, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, U0, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, U1, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, U2, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenu_C, AllEmoteOptions, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EmoteMenu_C, 0x0530);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_SP_NP01.BP_Laundromat_SP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_SP_NP01__BP_Laundromat_SP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_SP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_SP_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_LevelSelectTextRow.BP_LevelSelectTextRow_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LevelSelectTextRow__BP_LevelSelectTextRow_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, idle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, Complete_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, Unlocked_IN, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, Locked_IN, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, Check, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, CheckBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, Image_80, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, LockImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, TB_Checkpoint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, TB_ChipReward, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, TB_RepReward, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectTextRow_C, CheckpointText, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LevelSelectTextRow_C, 0x02D8);
		}

		// Class PacketHandler.HandlerComponentFactory
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// Class PacketHandler.PacketHandlerProfileConfig
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// Class FacialAnimation.AudioCurveSourceComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_5MKM, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_DYIM, 0x0874);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x08A0);
		}

		// Class EditableMesh.EditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// Class EditableMesh.EditableGeometryCollectionAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_KBOE, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// Class EditableMesh.EditableMesh
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_VBW2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_A0SU, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_DLXU, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_J777, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// Class EditableMesh.EditableMeshFactory
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// Class EditableMesh.EditableStaticMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_MSAG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// Class ChaosNiagara.NiagaraDataInterfaceChaosDestruction
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_J9P4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_DCKV, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_6A8O, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_31RM, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_7YHA, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_IAGC, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_KMZS, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TCQI, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_R94R, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_7KP5, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_JC63, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_M5BR, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// Class ChaosNiagara.NiagaraDataInterfaceFieldSystem
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceFieldSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, BlueprintSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, FieldDimensions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MinBounds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MaxBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, UnknownData_3PQO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceFieldSystem, 0x0090);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_Shop_Items.BP_InGame_Shop_Items_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_Shop_Items__BP_InGame_Shop_Items_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, UberGraphFrame, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Shop_MIN_OUT, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Shop_MAX, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Shop_MIN, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Shop_OUT, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Shop_IN, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Back1, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Back2, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BackBar, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_BackButton, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_1, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_5, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_7, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_17, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_18, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_89, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_ButtonCallout_C_90, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_GenericLoading2, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BP_StoreItemContainer, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_Buy, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_Confirm, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_Decline, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_Gift, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_NextCategory, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_PrevCategory, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Btn_Refill, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Buy_Group, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, BuyPrice, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, CategoryTitle, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Chip, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Chip_Icon, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, ChipStackValue, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Downloading_Group, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, EmptyMessage, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, HandsRemaining, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, HorizontalBox_55, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, HorizontalBox_56, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, HorizontalBox_57, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_2, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_3, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_169, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_170, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_676, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_902, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_1718, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_6033, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_6150, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Image_6210, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, ItemDescriptionTitle, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, LBL_BUY, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, MouseBlocker, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Nav_Buttons, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Overlay_1207, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Overlay_1369, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, PageNumber, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, PriceLabel, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Purchase, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, PurchaseConfirmation, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, ReFill_Group, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, RefillLabel, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, RefillPrice, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, SAFE_FRAME, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Slash_Line_Buy, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Slash_Line_Refill, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Slash_Tag_Buy, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, Slash_Tag_Refill, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, SlashBuy, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, SlashRefill, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TextBlock_960, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TextBlock_2863, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TextBlock_2879, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TextBlock_2880, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TitleBox, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TXT_BaseChipsAmount, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TXT_BonusChipsAmount, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Shop_Items_C, TXT_ChipBundleAmount, 0x0CF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_Shop_Items_C, 0x0CF8);
		}

		// Class BuildPatchServices.BuildPatchManifest
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_CQ9S, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// WidgetBlueprintGeneratedClass BP_Shop.BP_Shop_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Shop__BP_Shop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Arrows_Loops, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_Tattoos, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_Accessories, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_Headwear, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_Outfits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_Boosts, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_TableItems, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Nav_ChipBundles, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, FUE_LOOP, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BtnSelect_LOOP, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Shop_OUT, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Shop_IN, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Arrow_DN, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Arrpw_UP, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BackBar, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BackPanel, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BG_White, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BP_BackButton, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BP_BackButton_C_18, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BP_ButtonCallout_C_1, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BP_SelectButton_C_27, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, BP_StoreItemContainer_141, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Accessories, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Boosts, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_ChipBundles, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Goto, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Headwear, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Outfits, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_TableItems, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Btn_Tattoos, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Button01, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Button02, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Button03, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, DirtBrush01, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, DirtBrush02, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, DirtBrush03, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, DirtBrush04, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, DirtFrame, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Featured, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, FeaturedTitle, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, FUE_GLOW, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, HorizontalBox_2, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Logo, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Safeframe, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, ShopList, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, Splatter, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, SplatterDirectioinal, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_C, WhiteMenu_BACK, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shop_C, 0x05D0);
		}

		// BlueprintGeneratedClass BP_BountyCameraPawnSlaughterhouse.BP_BountyCameraPawnSlaughterhouse_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BountyCameraPawnSlaughterhouse__BP_BountyCameraPawnSlaughterhouse_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BountyCameraPawnSlaughterhouse_C, CamOrigin, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BountyCameraPawnSlaughterhouse_C, Camera, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BountyCameraPawnSlaughterhouse_C, VisibleOrigin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BountyCameraPawnSlaughterhouse_C, LocalOrigin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BountyCameraPawnSlaughterhouse_C, Target, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BountyCameraPawnSlaughterhouse_C, 0x02E8);
		}

		// WidgetBlueprintGeneratedClass BP_BlackBars.BP_BlackBars_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BlackBars__BP_BlackBars_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_175, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_176, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_177, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_178, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BlackBars_C, Image_179, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlackBars_C, 0x02C0);
		}

		// WidgetBlueprintGeneratedClass BP_Credits.BP_Credits_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Credits__BP_Credits_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, ImagesLoop, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Credit_Loop, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Credits_OUT, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Credit_IN, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BackBar, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BG_White, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BlackGradient, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, BP_BackButton_C_47, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Clubs, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Credits_Group, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, CreditsList, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Diamonds, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Hearts, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_920, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_925, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_930, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_1028, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_6822, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_8707, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Image_8806, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Logo_OregonMade, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Safeframe, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Spades, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Text_Credits, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, TextBlock_25, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Credits_C, Tourist, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Credits_C, 0x04F8);
		}

		// BlueprintGeneratedClass BP_UiManager.BP_UiManager_C
		TEST_METHOD(BlueprintGeneratedClass__BP_UiManager__BP_UiManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, DefaultSceneRoot, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, componentTypes, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, InitialScreen, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, ReturnToShellScreen, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, InitialScreenComp, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UiManager_C, TitleScreen, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_UiManager_C, 0x06B8);
		}

		// Class GeometryCache.GeometryCache
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_CY39, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_VV30, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// Class GeometryCache.GeometryCacheActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// Class GeometryCache.GeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// Class GeometryCache.GeometryCacheCodecRaw
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_KMI5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// Class GeometryCache.GeometryCacheCodecV1
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_S1WY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// Class GeometryCache.GeometryCacheComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_B4WP, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_MX1Y, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_ORGR, 0x04B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04C0);
		}

		// Class GeometryCache.GeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_NVRM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// Class GeometryCache.GeometryCacheTrack_FlipbookAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_84JI, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// Class GeometryCache.GeometryCacheTrackStreamable
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_31V2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_NP2A, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// Class GeometryCache.GeometryCacheTrack_TransformAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_FAZ6, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// Class GeometryCache.GeometryCacheTrack_TransformGroupAnimation
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_RSO8, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// WidgetBlueprintGeneratedClass BP_SittingOut.BP_SittingOut_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SittingOut__BP_SittingOut_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, SitOut_TimeExpired, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, SitOut_OUT, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, SitOut_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, BackBar, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, BG_White, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, BP_ButtonCallout_C_1, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, BTN_BACK, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Btn_Continue, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Button, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, DirtBrush01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, DirtBrush02, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, DirtBrush03, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, DirtBrush04, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, DirtFrame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Image_1, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Image_1152, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, TB_SitOut_Timer, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Text_Booted, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Text_SitOutDescription, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SittingOut_C, Text_TimeRemaining, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SittingOut_C, 0x04C0);
		}

		// WidgetBlueprintGeneratedClass BP_Loot_Rewards.BP_Loot_Rewards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Loot_Rewards__BP_Loot_Rewards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootRewards_UPGRADE_TEMPLATE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootRewards_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootRewards_OUT, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, DebugAllIn, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootRewards_UPGRADE, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootRewards, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Bar, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Earned, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Glow, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Loot_Upgrade, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootCase, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Safeframe, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, Splatter, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, ActionIcons, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, LootcaseData, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Loot_Rewards_C, EarnedText, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Loot_Rewards_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass BP_LobbyParticipants.BP_LobbyParticipants_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LobbyParticipants__BP_LobbyParticipants_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, UberGraphFrame, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, LobbyParticipants_OUT, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, LobbyParticipants_IN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, BP_ButtonCallout_130, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, BP_ButtonCallout_C_302, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, BP_ButtonCallout_C_562, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, BPVerticalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, MuteCallout, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayersBackPanel, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot1, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot4, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot5, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, PlayerSlot6, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, TB_ViewProfilertext, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, TextBlock_1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, TextBlock_2736, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, ViewProfileCallout, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, numPlayers, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyParticipants_C, MaxPlayers, 0x04F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LobbyParticipants_C, 0x04F8);
		}

		// WidgetBlueprintGeneratedClass BP_AffiliationSelection.BP_AffiliationSelection_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AffiliationSelection__BP_AffiliationSelection_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs_IN_LOCKED, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades_IN_LOCKED, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds_IN_LOCKED, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts_IN_LOCKED, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, AffiliationSelect_OUT, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades_IN, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds_IN, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs_IN, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts_IN, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, AffiliationSelect_IN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, BackBar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, BP_BackButton_C_18, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, BP_SelectButton_C_27, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Btn_Clubs, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Btn_Diamonds, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Btn_Hearts, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Btn_Spades, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs_BW, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs_Color, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Clubs_Locked, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, ClubsGlow, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, ClubsSelect, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds_BW, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds_Color, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Diamonds_Locked, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, DiamondsGlow, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, DiamondsSelect, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, HeartGlow, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts_BW, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts_Color, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Hearts_Locked, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, HeartSelect, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_1, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_4, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_6, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_7, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_8, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_9, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_10, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_11, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_3873, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5186, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5187, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5190, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5191, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5531, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5532, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5545, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Image_5546, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, LoadingCanvas, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Safeframe, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades_BW, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades_Color, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Spades_Locked, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, SpadesGlow, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, SpadesSelect, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TB_ClubsLocked, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TB_DiamondsLocked, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TB_HeartsLocked2, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TB_SpadesLocked, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TextBlock_2110, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TextBlock_2111, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TextBlock_2112, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, TextBlock_2115, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, Throbber_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationSelection_C, newAffiliation, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AffiliationSelection_C, 0x0651);
		}

		// WidgetBlueprintGeneratedClass BP_ProfileButton.BP_ProfileButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ProfileButton__BP_ProfileButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, Glow_OUT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, Glow_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, BP_ButtonCallout_C_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, Image_389, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, RestoreDefaultsButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ProfileButton_C, Color, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ProfileButton_C, 0x02A8);
		}

		// WidgetBlueprintGeneratedClass BP_ControllerFocusScrollBox.BP_ControllerFocusScrollBox_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ControllerFocusScrollBox__BP_ControllerFocusScrollBox_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ControllerFocusScrollBox_C, 0x0280);
		}

		// BlueprintGeneratedClass SK_LootCase_Base_Blueprint.SK_LootCase_Base_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__SK_LootCase_Base_Blueprint__SK_LootCase_Base_Blueprint_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, LootCaseMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, IsPlayingAnimation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, UnknownData_QX95, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, AnimationPlaying, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, AnimationComplete, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASK_LootCase_Base_Blueprint_C, IsPrimary, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASK_LootCase_Base_Blueprint_C, 0x02D9);
		}

		// WidgetBlueprintGeneratedClass BP_SeatSelector.BP_SeatSelector_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SeatSelector__BP_SeatSelector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, UberGraphFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, SeatSelector_OUT, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, SeatSelector_IN, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BackCover, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BackGradient, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BP_ButtonCallout_C_1, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BP_ButtonCallout_C_32, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BTN_Close, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, BTN_SELECT, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, Image_1352, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, Image_3998, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, SafeFrame_Template, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, Text_Title, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatSelector_C, TopGradient, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SeatSelector_C, 0x0738);
		}

		// WidgetBlueprintGeneratedClass BP_FeatureItemDisplay.BP_FeatureItemDisplay_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FeatureItemDisplay__BP_FeatureItemDisplay_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, UberGraphFrame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, SelectionIn, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Background, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Border, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Equipped, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Featured, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, InnerRarityGlow, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Item, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, OuterRarityGlow, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Overlay_1369, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Owned, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Slash_Line, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, Slash_Tag, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, SlashBuy, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, TextBlock_149, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeatureItemDisplay_C, TextBlock_1891, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeatureItemDisplay_C, 0x0508);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_Menu.BP_InGame_Menu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_Menu__BP_InGame_Menu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_Exit, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_HelpOptions, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_RapSheet, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_Rebuy, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_SitOut, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_Shop, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Nav_BackToGame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, BtnSelect_LOOP, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, PauseMenu_OUT, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, PauseMenu_IN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, BackBar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, BP_BackButton_C_18, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, BP_SelectButton_C_27, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_BackToGame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_Exit, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_HelpOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_RapSheet, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_ReBuy, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_Shop, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Btn_SitOut, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtBrush01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtBrush02, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtBrush03, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtBrush04, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtFrame, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, DirtFrame2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, Image_2, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, InGameMenuList, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, RebuyText, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, WhiteMenu_BACK, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, ExitingGame, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableBackToGame, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableShop, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableSitOut, 0x0513);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableRebuy, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableRapSheet, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, EnableHelpAndOptions, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Menu_C, GoingBack, 0x0517);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_Menu_C, 0x0518);
		}

		// WidgetBlueprintGeneratedClass BP_EditHair.BP_EditHair_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EditHair__BP_EditHair_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, UberGraphFrame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, EditHead_OUT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, EditHead_IN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BackBar, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BP_ButtonCallout_C_32, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BP_ButtonCallout_C_39, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BP_ButtonCallout_C_58, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Btn_Accept, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BTN_Cancel, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, BTN_RANDOMIZE, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, EyebrowsCol, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, FaceStubbleCol, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Gradient, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, HairCol, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, HairColorCol, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, HeadStubbleCol, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, HorizontalSelect_Female, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, HorizontalSelect_Male, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, MakeupFacialHairCol, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Safeframe, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Subcategory, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Subcategory_Type, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, Columns_1, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHair_C, AssetSelectionModelContainer, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EditHair_C, 0x0530);
		}

		// Class AndroidPermission.AndroidPermissionCallbackProxy
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_M9B3, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// Class AndroidPermission.AndroidPermissionFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// Class DeveloperSettings.DeveloperSettings
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_GAZE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_MP_NP01.BP_BikerBar_MP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_MP_NP01__BP_BikerBar_MP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_MP_NP01_C, 0x0390);
		}

		// Class JsonUtilities.JsonUtilitiesDummyObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// AnimBlueprintGeneratedClass BP_RndAnim_F.BP_RndAnim_F_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_RndAnim_F__BP_RndAnim_F_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_F_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_F_C, AnimGraphNode_Root, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_F_C, AnimGraphNode_Slot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_F_C, AnimGraphNode_LocalRefPose, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RndAnim_F_C, 0x03A8);
		}

		// BlueprintGeneratedClass BP_TableItemAssets.BP_TableItemAssets_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TableItemAssets__BP_TableItemAssets_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TableItemAssets_C, DefaultSceneRoot, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TableItemAssets_C, 0x04E8);
		}

		// Class ChaosCloth.ChaosClothConfig
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_ZJ4M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_0VWU, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TetherMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_GIAK, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_0MYA, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, SelfCollisionThickness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseLegacyBackstop, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_E3P0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUsePointBasedWindModel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_0AM7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LiftCoefficient, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGravityOverride, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_II7O, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, GravityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Gravity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_ZRPU, 0x00AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x00B0);
		}

		// Class ChaosCloth.ChaosClothSharedSimConfig
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_2SN3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_SXYG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_IIHI, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// Class ChaosCloth.ChaosClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// Class ChaosCloth.ChaosClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_SQWW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0058);
		}

		// Class AudioCapture.AudioCapture
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_10TS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// Class AudioCapture.AudioCaptureFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// Class AudioCapture.AudioCaptureComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_4FI1, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0780);
		}

		// WidgetBlueprintGeneratedClass BP_PrestigeShop.BP_PrestigeShop_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PrestigeShop__BP_PrestigeShop_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, RankUpAvailable, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, PrestigeShop_OUT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, PrestigeShop_IN, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Affiliation_01_Logo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Affiliation_02_Logo, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Affiliation_03_Logo, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Affiliation_04_Logo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, AffiliationMenuList, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BackBar, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BG_White, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_2, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_3, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_4, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_5, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_6, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_7, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_8, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_9, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_AffiliationReward_C_10, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_BackButton_C_140, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_ButtonCallout_C_560, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BP_ButtonCallout_C_562, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BTN_CHANGE_AFFILIATION, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, BTN_RANK_UP, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CanvasPanel_5661, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CanvasPanel_6179, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CanvasPanel_6182, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CanvasPanel_6183, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Channel_Inner, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Channel_Outer, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, ClubsBorder, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, ClubsClosed, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, ClubsRankMeter, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CurrentAffiliationLogo, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, DiamondsBorder, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, DiamondsClosed, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, DiamondsRankMeter, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, HeartsBorder, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, HeartsClosed, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, HeartsRankMeter, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_1, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_2, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_3, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_4, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_5818, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6591, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6975, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6976, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6977, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_6978, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_8684, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_9740, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_9743, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Image_9744, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, InnerMeter, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Meter_Bar, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Meter_frame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Meter_Solid, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, OuterMeter, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Rank_Group, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Safeframe, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, ScreenTitle, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, SpadesBorder, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, SpadesClosed, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, SpadesRankMeter, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, TB_CurrentAffiliation, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Tb_Level, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, TB_Rank, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, CurrentItemIndex, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, desiredBarSize, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, AnimationTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, AnimationEaseType, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, UnknownData_9S1F, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PrestigeShop_C, Rewards, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PrestigeShop_C, 0x0690);
		}

		// WidgetBlueprintGeneratedClass BP_All_In.BP_All_In_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_All_In__BP_All_In_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, AllIn_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, AllIn_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, Amount, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, Image_1152, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, Image_1702, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, Safeframe, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, Vingette, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, BackToOrbitDuration, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_All_In_C, ScreenShowDuration, 0x03CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_All_In_C, 0x03D0);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_MP_NP01.BP_Casino_MP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_MP_NP01__BP_Casino_MP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_MP_NP01_C, 0x0390);
		}

		// Class ImageWriteQueue.ImageWriteBlueprintLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// BlueprintGeneratedClass Main.Main_C
		TEST_METHOD(BlueprintGeneratedClass__Main__Main_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, ForceLoadPlatformSTXB1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, ForceLoadPlatformSTPS4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, BountyShellCamMover_1_ExecuteUbergraph_Main_RefProperty, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, BountyGameCamMover_1_ExecuteUbergraph_Main_RefProperty, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMain_C, BP_CameraManager_82_ExecuteUbergraph_Main_RefProperty, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMain_C, 0x0278);
		}

		// WidgetBlueprintGeneratedClass BP_ChipStack.BP_ChipStack_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChipStack__BP_ChipStack_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChipStack_C, PlayerChipsDisplay, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChipStack_C, 0x0350);
		}

		// WidgetBlueprintGeneratedClass BP_DailyCut.BP_DailyCut_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DailyCut__BP_DailyCut_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BoostPrompt_LOOP, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DailyCut_To_MainMenu, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NextCut_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DailyValues, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Ring_LOOP, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DailyCut_OUT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DailyCut_IN, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, ContinueButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BackBar, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Bars, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BG_White, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BlueSplatter, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BoostMultiplier, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BoostPrompt, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BP_ButtonCallout_C_2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BP_ButtonCallout_C_563, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BP_Slots_C_13, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, BTN_BUYBOOST, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Btn_Continue, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, CanvasPanel_43, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, CutOutFaded, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, CutValues, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DailyCut_Text, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtBrush01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtBrush02, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtBrush03, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtBrush04, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, DirtFrame2, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_2, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_91, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_918, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_1963, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_1980, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_5721, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_6418, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_8806, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_11053, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_11101, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12449, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12450, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12451, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12472, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12474, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12476, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12478, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12480, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12481, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12482, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12483, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12484, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12485, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12486, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12487, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12488, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12489, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12490, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12491, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12492, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12493, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12494, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12495, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12496, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12497, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12498, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12499, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12500, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12501, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12502, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12503, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12504, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12505, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12506, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12507, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12508, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12509, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12510, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12511, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12512, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12513, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12514, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12515, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Image_12516, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NextCutIncreaseText, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NextCutTimer, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NextDailyCutTimer, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NumberBaseCut, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NumberBoostBonus, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NumberLevelBonus, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Numbers, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, NumberStreakBonus, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Panel_Group, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, PanelMenuRotate, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Ring, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Ring_Back, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Ring_Outer, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, StreakMultiplier, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, Text_NextDailyCutIn, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, TextBlock_1764, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, TimerCanvas, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, IsSpinning, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, GoToBoosts, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, UnknownData_X6NJ, 0x0742);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DailyCut_C, SfxDailyValues, 0x0744);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DailyCut_C, 0x0748);
		}

		// WidgetBlueprintGeneratedClass BP_BlankScreen.BP_BlankScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BlankScreen__BP_BlankScreen_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BlankScreen_C, 0x0348);
		}

		// Class LightPropagationVolumeRuntime.LightPropagationVolumeBlendable
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_J7P6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_SQE5, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// WidgetBlueprintGeneratedClass BP_FeaturedItemWidget.BP_FeaturedItemWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FeaturedItemWidget__BP_FeaturedItemWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, UberGraphFrame, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, Border, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, Equipped, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, Featured, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, InnerRarityGlow, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, Item, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, ItemButton, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, OuterRarityGlow, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, Owned, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, TextBlock_4, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemWidget_C, TextBlock_4786, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeaturedItemWidget_C, 0x04E8);
		}

		// Class Synthesis.ModularSynthPresetBank
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// Class Synthesis.ModularSynthLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// Class Synthesis.ModularSynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_OBHI, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D80);
		}

		// Class Synthesis.SourceEffectBitCrusherPreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_G3HD, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x00F0);
		}

		// Class Synthesis.SourceEffectChorusPreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_N5VW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0180);
		}

		// Class Synthesis.SourceEffectDynamicsProcessorPreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_RUP4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00E0);
		}

		// Class Synthesis.EnvelopeFollowerListener
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_1L7U, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// Class Synthesis.SourceEffectEnvelopeFollowerPreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_XFA0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x00A8);
		}

		// Class Synthesis.SourceEffectEQPreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_EHAY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x00B0);
		}

		// Class Synthesis.SourceEffectFilterPreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_66JN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x00D0);
		}

		// Class Synthesis.SourceEffectFoldbackDistortionPreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_MCN5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x00A8);
		}

		// Class Synthesis.SourceEffectMidSideSpreaderPreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_96US, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x00A0);
		}

		// Class Synthesis.SourceEffectPannerPreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_BN37, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x00A0);
		}

		// Class Synthesis.SourceEffectPhaserPreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_ZAGU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x00B0);
		}

		// Class Synthesis.SourceEffectRingModulationPreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_J9EA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x00D0);
		}

		// Class Synthesis.SourceEffectSimpleDelayPreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_L8JH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00C0);
		}

		// Class Synthesis.SourceEffectStereoDelayPreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_W7C5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x00D8);
		}

		// Class Synthesis.SourceEffectWaveShaperPreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_PYMQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x00A0);
		}

		// Class Synthesis.AudioImpulseResponse
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, bTrueStereo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_TZE0, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// Class Synthesis.SubmixEffectConvolutionReverbPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_DX86, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00F0);
		}

		// Class Synthesis.SubmixEffectDelayPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_YR7E, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_NRAI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x00B8);
		}

		// Class Synthesis.SubmixEffectFilterPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_K6JO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x00A8);
		}

		// Class Synthesis.SubmixEffectFlexiverbPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_8IJH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x00B0);
		}

		// Class Synthesis.SubmixEffectMultibandCompressorPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectMultibandCompressorPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, UnknownData_PGHU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectMultibandCompressorPreset, 0x00D0);
		}

		// Class Synthesis.SubmixEffectStereoDelayPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectStereoDelayPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, UnknownData_3SHG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectStereoDelayPreset, 0x00D8);
		}

		// Class Synthesis.SubmixEffectTapDelayPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_D4WG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_81MQ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00D8);
		}

		// Class Synthesis.Synth2DSlider
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_MOGJ, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_Z9GS, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_9Q5U, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// Class Synthesis.GranularSynth
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_LBMU, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A80);
		}

		// Class Synthesis.MonoWaveTableSynthPreset
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_15IB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_T386, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_TZ3T, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// Class Synthesis.SynthComponentMonoWaveTable
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_P909, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E00);
		}

		// Class Synthesis.SynthComponentToneGenerator
		TEST_METHOD(Class__Synthesis__SynthComponentToneGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Frequency, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Volume, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, UnknownData_WLPU, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentToneGenerator, 0x06E0);
		}

		// Class Synthesis.SynthSamplePlayer
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_L89Z, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x07F0);
		}

		// Class Synthesis.SynthesisUtilitiesBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__SynthesisUtilitiesBlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthesisUtilitiesBlueprintFunctionLibrary, 0x0028);
		}

		// Class Synthesis.SynthKnob
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_OGHH, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_4F2D, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_41W3, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// Class MeshDescription.MeshDescription
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// Class MeshDescription.MeshDescriptionBase
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_134R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// Class GeometryCollectionEngine.ChaosDestructionListener
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_SI1A, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_AGDQ, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// Class GeometryCollectionEngine.GeometryCollectionActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// Class GeometryCollectionEngine.GeometryCollectionCache
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// Class GeometryCollectionEngine.GeometryCollectionComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_S4JA, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_0N2B, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_AXJE, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_6IWF, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_MDI5, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SQ7T, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_49BX, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_QE51, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_LP0W, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_9L8K, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_NLSP, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_X2F2, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08F0);
		}

		// Class GeometryCollectionEngine.GeometryCollectionDebugDrawActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_2FGU, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_HQ0O, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_Y44G, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_10WC, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// Class GeometryCollectionEngine.GeometryCollectionDebugDrawComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_NV4W, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// Class GeometryCollectionEngine.GeometryCollection
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_HLS2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_UJL6, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_Q0UX, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_ZTKG, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_T0S9, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_D4FG, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// Class GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_XJ3K, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// Class GeometryCollectionEngine.SkeletalMeshSimulationComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_VMEI, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_JA0U, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_YL4P, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_YJRT, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_26QM, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// Class GeometryCollectionEngine.StaticMeshSimulationComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_RL2E, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_SW5S, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_SSSY, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_X8BJ, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_K3VB, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_2M3M, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_IZPB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// Class MediaCompositing.MovieSceneMediaPlayerPropertySection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_9CCG, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// Class MediaCompositing.MovieSceneMediaPlayerPropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertyTrack, UnknownData_WKPZ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x00B0);
		}

		// Class MediaCompositing.MovieSceneMediaSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_5DMH, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_OXVG, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// Class MediaCompositing.MovieSceneMediaTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, UnknownData_98G3, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0090);
		}

		// WidgetBlueprintGeneratedClass BP_Notification.BP_Notification_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Notification__BP_Notification_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, UberGraphFrame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, VoiceChat_OUT, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, VoiceChat_IN, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, LootCase_InGame_OUT, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, LootCase_InGame_IN, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Lootcase_Shell_Upgrade_OUT, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Lootcase_Shell_Upgrade_IN, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Lootcase_Shell_OUT, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Lootcase_Shell_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Notification_LG_OUT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Notification_LG_IN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, FUE_OUT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, FUE_IN, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Notification_OUT, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Notification_IN, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Back, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Back_Shadow, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BackBar, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_ButtonCallout_C_14, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_ButtonCallout_C_560, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_FormattedText_60, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_FormattedText_C_1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_FormattedText_VoiceChat, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_Loot_Rewards_783, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, BP_SelectButton, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Btn_Exit, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Btn_Profile, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Directional, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Directional_Shadow, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_2, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_3, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_4, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_5, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_6, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Image_8, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, LootcaseImage, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, LootCaseName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, LootSplatter, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Safeframe, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, Splatter, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, TextBlock_51, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, TextBlock_162, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, TextBlock_359, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, TextBlock_411, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, TextBlock_412, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, UpgradeFromLootcaseImage, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, UpgradeFromLootcaseName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, UpgradeGlow, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Notification_C, VoiceChat_Background, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Notification_C, 0x0580);
		}

		// BlueprintGeneratedClass BP_BuyInViewModel.BP_BuyInViewModel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BuyInViewModel__BP_BuyInViewModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuyInViewModel_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BuyInViewModel_C, LobbyBaseReference, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BuyInViewModel_C, 0x0058);
		}

		// BlueprintGeneratedClass MouseHelpable.MouseHelpable_C
		TEST_METHOD(BlueprintGeneratedClass__MouseHelpable__MouseHelpable_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHelpable_C, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_MP_NP02.BP_Laundromat_MP_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_MP_NP02__BP_Laundromat_MP_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_MP_NP02_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_GenericLoading2.BP_GenericLoading2_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GenericLoading2__BP_GenericLoading2_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, ChipLoop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, CardLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, _01_Ace_Spades, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, _02_King_Spades, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, _03_Queen_Spades, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, _04_Jack_Spades, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, _05_10_Spades, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, Image_57, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading2_C, Image_217, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GenericLoading2_C, 0x02B0);
		}

		// WidgetBlueprintGeneratedClass BP_EmoteMenuOption.BP_EmoteMenuOption_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EmoteMenuOption__BP_EmoteMenuOption_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, EmoteHovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, FUE_GLOW, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, CfButton_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, FUEGlow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, Image_327, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, Data, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, HighlightStyle, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, DefaultStyle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, PressedStyle, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EmoteMenuOption_C, Hovered, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EmoteMenuOption_C, 0x0478);
		}

		// WidgetBlueprintGeneratedClass BP_ArrowButton.BP_ArrowButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ArrowButton__BP_ArrowButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, ArrowImageLoopStop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, ArrowImageLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, ArrowButton, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, ArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, ClickDispatcher, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, HoverDispatcher, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, TintNormal, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, TintHovered, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, TintClicked, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ArrowButton_C, TintDisabled, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ArrowButton_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_Win.BP_InGame_Win_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_Win__BP_InGame_Win_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Win_OUT, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardSlot4_UP, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardSlot3_UP, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardSlot2_UP, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardSlot1_UP, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardSlot0_UP, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, HoleLeft_UP, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, HoleRight_UP, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Win_IN, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CommCard0, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CommCard1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CommCard2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CommCard3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CommCard4, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, GamerTag, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Image_476, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Image_1152, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Left_Card, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, MainPotAmountWon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, PotsWonText, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Right_Card, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Safeframe, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Text_Header, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, Text_HeaderFaded, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, winnerSeat, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, ScreenShowDuration, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, WinningHandType, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, DelayInPlaceOfFreezeFrame, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, UnknownData_76ZT, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Win_C, CardUsage, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_Win_C, 0x0498);
		}

		// WidgetBlueprintGeneratedClass BP_FeaturedItemPanel.BP_FeaturedItemPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FeaturedItemPanel__BP_FeaturedItemPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, Description, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, EndDate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, IconFemale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, IconMale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, Image_216, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, Image_5179, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, Logo, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, StartDate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, Title, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemPanel_C, itemData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeaturedItemPanel_C, 0x0330);
		}

		// Class DatasmithContent.DatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_SO0M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// Class DatasmithContent.DatasmithActorTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// Class DatasmithContent.DatasmithAdditionalData
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// Class DatasmithContent.DatasmithAreaLightActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_WBF5, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_AEN6, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_O2AV, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// Class DatasmithContent.DatasmithAreaLightActorTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_YSRO, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_4DRG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_W71N, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// Class DatasmithContent.DatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithStaticMeshCADImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithTranslatedSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithCADImportSceneData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// Class DatasmithContent.DatasmithMDLSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithGLTFSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_Z4Z7, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// Class DatasmithContent.DatasmithStaticMeshGLTFImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// Class DatasmithContent.DatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_LF8B, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_BRBE, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// Class DatasmithContent.DatasmithDeltaGenAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithDeltaGenSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_K87G, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_PAHL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_IL9Q, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// Class DatasmithContent.DatasmithVREDAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithVREDSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_WRE4, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_QBWP, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_2GRM, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_KM07, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// Class DatasmithContent.DatasmithIFCSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// Class DatasmithContent.DatasmithStaticMeshIFCImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// Class DatasmithContent.DatasmithAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// Class DatasmithContent.DatasmithCineCameraActorTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// Class DatasmithContent.DatasmithCineCameraComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_PDMP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// Class DatasmithContent.DatasmithContentBlueprintLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// Class DatasmithContent.DatasmithCustomActionBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_B4EF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// Class DatasmithContent.DatasmithDecalComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithDecalComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, SortOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, DecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, Material, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDecalComponentTemplate, 0x0048);
		}

		// Class DatasmithContent.DatasmithImportedSequencesActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// Class DatasmithContent.DatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// Class DatasmithContent.DatasmithCommonTessellationOptions
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// Class DatasmithContent.DatasmithImportOptions
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_OKX5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_G104, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_NLWX, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// Class DatasmithContent.DatasmithLandscapeTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_G4EG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// Class DatasmithContent.DatasmithLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_40BH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_RQES, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_OSLT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// Class DatasmithContent.DatasmithMaterialInstanceTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// Class DatasmithContent.DatasmithPointLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_JHJA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// Class DatasmithContent.DatasmithPostProcessVolumeTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_VPB5, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// Class DatasmithContent.DatasmithScene
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_ELVL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// Class DatasmithContent.DatasmithSceneActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// Class DatasmithContent.DatasmithSceneComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_V4GV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, bVisible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_06M5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_21WW, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// Class DatasmithContent.DatasmithSkyLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_J4T1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// Class DatasmithContent.DatasmithSpotLightComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// Class DatasmithContent.DatasmithStaticMeshComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// Class DatasmithContent.DatasmithStaticMeshTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// Class TemplateSequence.TemplateSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0108);
		}

		// Class TemplateSequence.CameraAnimationSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0108);
		}

		// Class TemplateSequence.SequenceCameraShakeCameraStandIn
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeCameraStandIn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_HW6D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, FieldOfView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_5M4R, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeCameraStandIn, 0x0070);
		}

		// Class TemplateSequence.SequenceCameraShake
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Sequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, PlayRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Scale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendInTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendOutTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, RandomSegmentDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, bRandomSegment, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_KA4N, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Player, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, CameraStandIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_QNWP, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShake, 0x00D0);
		}

		// Class TemplateSequence.SequenceCameraShakeSequencePlayer
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_T2RO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, BoundObjectOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, Sequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, RootTemplateInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_OVCH, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeSequencePlayer, 0x05D8);
		}

		// Class TemplateSequence.TemplateSequenceActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_OELF, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_MG1A, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_JICI, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// Class TemplateSequence.TemplateSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_KCBB, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0688);
		}

		// Class TemplateSequence.TemplateSequenceSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSection, UnknownData_UPX5, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0168);
		}

		// Class TemplateSequence.TemplateSequenceSystem
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSystem, UnknownData_SP5B, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSystem, 0x00B0);
		}

		// Class TemplateSequence.TemplateSequenceTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0088);
		}

		// Class AudioSynesthesia.AudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRTSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRTSettings, 0x0028);
		}

		// Class AudioSynesthesia.AudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRT)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRT, 0x0078);
		}

		// Class AudioSynesthesia.ConstantQNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRTSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, StartingFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBands, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBandsPerOctave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, AnalysisPeriod, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, bDownmixToMono, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, FFTSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, WindowType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, SpectrumType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, BandWidthStretch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, CQTNormalization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, UnknownData_7ELT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRTSettings, 0x0048);
		}

		// Class AudioSynesthesia.ConstantQNRT
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRT)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRT, 0x0080);
		}

		// Class AudioSynesthesia.LoudnessNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRTSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, AnalysisPeriod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MinimumFrequency, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MaximumFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, CurveType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_HIVJ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, NoiseFloorDb, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_J565, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRTSettings, 0x0040);
		}

		// Class AudioSynesthesia.LoudnessNRT
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRT)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRT, 0x0080);
		}

		// Class AudioSynesthesia.OnsetNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRTSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, bDownmixToMono, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_342N, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, GranularityInSeconds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, Sensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MinimumFrequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MaximumFrequency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_DYQS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRTSettings, 0x0040);
		}

		// Class AudioSynesthesia.OnsetNRT
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRT)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRT, 0x0080);
		}

		// Class MovieScene.MovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_LNYB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// Class MovieScene.MovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_4E3F, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_R2F0, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, startTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_ZXMA, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_FUWD, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// Class MovieScene.MovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_RPMQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_BL01, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// Class MovieScene.MovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// Class MovieScene.MovieSceneSequence
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_MNRQ, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// Class MovieScene.MovieSceneSequencePlayer
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_XBWF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Z15K, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_8NSR, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, startTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_WGIL, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_0CEP, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_3E8F, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// Class MovieScene.MovieSceneSubSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_1X6X, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// Class MovieScene.MovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_01H1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// Class MovieScene.MovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// Class MovieScene.MovieSceneCustomClockSource
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// Class MovieScene.MovieSceneEntityProvider
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// Class MovieScene.MovieScenePlaybackClient
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// Class MovieScene.MovieSceneTrackTemplateProducer
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// Class MovieScene.NodeAndChannelMappings
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// Class MovieScene.MovieSceneNodeGroup
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// Class MovieScene.MovieSceneNodeGroupCollection
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// Class MovieScene.MovieScene
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_EOTL, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// Class MovieScene.MovieSceneBindingOverrides
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_ZOQC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// Class MovieScene.MovieSceneBindingOwnerInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// Class MovieScene.MovieSceneBlenderSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_4Q9O, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// Class MovieScene.MovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_ZW6M, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// Class MovieScene.MovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// Class MovieScene.MovieSceneGenericBoundObjectInstantiator
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// Class MovieScene.MovieSceneBoundSceneComponentInstantiator
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// Class MovieScene.MovieSceneSceneComponentImpersonator
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// Class MovieScene.MovieSceneCompiledData
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_GYBX, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// Class MovieScene.MovieSceneCompiledDataManager
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_BRST, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_CO4N, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// Class MovieScene.MovieSceneFloatDecomposer
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// Class MovieScene.MovieSceneBuiltInEasingFunction
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_27JH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_8SEO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// Class MovieScene.MovieSceneEasingExternalCurve
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_ADS9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// Class MovieScene.MovieSceneEasingFunction
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// Class MovieScene.MovieSceneEntitySystemLinker
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_D293, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_1PL9, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// Class MovieScene.MovieSceneEvalTimeSystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_LMK8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// Class MovieScene.MovieSceneFolder
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_O5QR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// Class MovieScene.MovieSceneKeyProxy
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// Class MovieScene.MovieSceneMasterInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// Class MovieScene.MovieScenePreAnimatedStateSystemInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// Class MovieScene.MovieSceneCachePreAnimatedStateSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// Class MovieScene.MovieSceneRestorePreAnimatedStateSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// Class MovieScene.MovieSceneSequenceTickManager
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_DGNO, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// Class MovieScene.MovieSceneSpawnablesSystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// Class MovieScene.MovieSceneSpawnSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_RYP4, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// Class MovieScene.MovieSceneSpawnTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// Class MovieScene.TestMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_9EF6, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_89FP, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// Class MovieScene.TestMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// Class MovieScene.TestMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// Class MovieScene.TestMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// Class MovieScene.TestMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// Class MovieScene.MovieSceneTrackInstance
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_O77A, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// Class MovieScene.MovieSceneTrackInstanceInstantiator
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_I886, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// Class MovieScene.MovieSceneTrackInstanceSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// WidgetBlueprintGeneratedClass BP_BoostSelector.BP_BoostSelector_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BoostSelector__BP_BoostSelector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, InGameBoost_OUT, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, InGameBoost_IN, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, ShellBoost_OUT, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, ShellBoost_IN, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, BP_ButtonCallout_C_1, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, BP_StoreItemContainer, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Btn_Buy, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, BTN_Close, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Button_CLOSE, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Image_93, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Shadow, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Splash_LoLeft, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Splash_LoRight, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Splash_Mid, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Splash_UpLeft, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BoostSelector_C, Splash_UpRight, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BoostSelector_C, 0x0440);
		}

		// WidgetBlueprintGeneratedClass BP_EULA.BP_EULA_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EULA__BP_EULA_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, EULA_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, EULA_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, BlueSplatter, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, BP_ButtonCallout_C_560, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, BP_ScrollingTextBox_C_221, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Btn_Accept, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Btn_Decline, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Button_RestoreDefaults, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtBrush01, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtBrush02, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtBrush03, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtBrush04, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtFrame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, DirtFrame2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, GameLogo, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_2, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_138, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_918, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_5721, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_6418, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_8806, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_11053, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_11101, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12449, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12450, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12451, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12472, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12474, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12476, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12478, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12480, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12481, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12482, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12483, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12484, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12485, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12486, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12487, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12488, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12489, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12490, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12491, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12492, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12493, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12494, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12495, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12496, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12497, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12498, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12499, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12500, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12501, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12502, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12503, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12504, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12505, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12506, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12507, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12508, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12509, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12510, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12511, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12512, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12513, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12514, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12515, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Image_12516, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Panel_Group, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, PanelMenuRotate, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Ring_Back, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Ring_Outer, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, Safeframe, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EULA_C, EulaAcceptDispatcher, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EULA_C, 0x05E0);
		}

		// WidgetBlueprintGeneratedClass BP_AvatarOption.BP_AvatarOption_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AvatarOption__BP_AvatarOption_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Deselect, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Select, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Image, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Overlay, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Container, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, Index, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, UnknownData_39FT, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, NoAssetStyle, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, IsSelectionOption, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, UnknownData_8766, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarOption_C, DisplayName, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AvatarOption_C, 0x02C8);
		}

		// WidgetBlueprintGeneratedClass BP_RankedLobbyInformational.BP_RankedLobbyInformational_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankedLobbyInformational__BP_RankedLobbyInformational_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, UberGraphFrame, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, LobbyInfo_OUT, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, LobbyInfo_IN, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, BTN_Close, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, RankedInfo1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, RankedInfo2, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, RankedInfo3, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, RankedInfo4, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, RankedInfo5, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedLobbyInformational_C, UpperInfo, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankedLobbyInformational_C, 0x03F8);
		}

		// WidgetBlueprintGeneratedClass BP_RecentUnlockSlot.BP_RecentUnlockSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RecentUnlockSlot__BP_RecentUnlockSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, Background, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, Item01, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, TextBlock_2301, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, TextBlock_2342, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RecentUnlockSlot_C, Data, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RecentUnlockSlot_C, 0x02F8);
		}

		// WidgetBlueprintGeneratedClass BP_RankedInfo.BP_RankedInfo_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankedInfo__BP_RankedInfo_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PlayersIn, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, IconMode_BuyinToRating, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, IconMode_RatingToBuyin, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, HoverIn, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RibbonIn, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BP_LeaderboardReward_01, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BP_LeaderboardReward_02, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BP_LeaderboardReward_03, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BP_LeaderboardReward_04, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BuyInBorder, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BuyInPanel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, BuyInT, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, FeeT, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Glow, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Logo, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutBorder2nd, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutBorder3rd, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutPanel, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutT1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutT2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PayoutT3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player0, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player4, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Player5, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, PlayerBorder, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, ProvisionalStatus, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingBorder, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingChangeBorder, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingChangeT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingDotTournament1, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingDotTournament2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingDotTournament3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingPanel, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingT, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RatingTextTournament1, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RewardsBox, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Ribbon, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RibbonTitle, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, RibbonTitleBG, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, TierLabelSB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, TierT, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, Hovered, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, UnknownData_OECD, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, YOffsetWhenRibbonEmpty, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedInfo_C, IsHeadToHead, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankedInfo_C, 0x04E1);
		}

		// WidgetBlueprintGeneratedClass BP_LeaderboardRewardSlot.BP_LeaderboardRewardSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LeaderboardRewardSlot__BP_LeaderboardRewardSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardRewardSlot_C, Background, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardRewardSlot_C, Icon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardRewardSlot_C, Name_Bot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardRewardSlot_C, Name_Mid, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardRewardSlot_C, Name_Top, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeaderboardRewardSlot_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass BP_VideoSettingsScreen.BP_VideoSettingsScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_VideoSettingsScreen__BP_VideoSettingsScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, UberGraphFrame, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, VideoSettings_OUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, VideoSettings_IN, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, ApplyButton, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, BackBar, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, BP_BackButton, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, BP_ButtonCallout_C_50, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, BP_ButtonCallout_C_51, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, ChangesSaved_Group, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, DisplayMode_Group, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, DisplayModeSpinner, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, FullscreenResolution_Group, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, FullscreenResolutionSpinner, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, QualitySpinner, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, RestoreDefaultsButton, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, Safeframe, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, SteamOptions, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, Text_VideoOptions, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VideoSettingsScreen_C, Video_SettingsList, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VideoSettingsScreen_C, 0x0508);
		}

		// WidgetBlueprintGeneratedClass BP_DayEventsPanel.BP_DayEventsPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_DayEventsPanel__BP_DayEventsPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, Button_864, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, Button_1109, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, DayText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, EventTitleText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, Image_179, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, date, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, Events, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DayEventsPanel_C, currentEvent, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DayEventsPanel_C, 0x02E8);
		}

		// Class NiagaraShader.NiagaraScriptBase
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// BlueprintGeneratedClass LootCase_Upgrade_SwapToNewMesh.LootCase_Upgrade_SwapToNewMesh_C
		TEST_METHOD(BlueprintGeneratedClass__LootCase_Upgrade_SwapToNewMesh__LootCase_Upgrade_SwapToNewMesh_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootCase_Upgrade_SwapToNewMesh_C, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_StoreItemContainer.BP_StoreItemContainer_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StoreItemContainer__BP_StoreItemContainer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemContainer_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemContainer_C, ScrollBox, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemContainer_C, UniformGridPanel, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StoreItemContainer_C, 0x0348);
		}

		// Class InteractiveToolsFramework.InputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_HLXQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// Class InteractiveToolsFramework.AnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_L1OY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// Class InteractiveToolsFramework.InteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.AxisAngleGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.InteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_ZRX4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// Class InteractiveToolsFramework.AxisAngleGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_GZI8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_9JWH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_SL2C, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// Class InteractiveToolsFramework.AxisPositionGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.AxisPositionGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_GVLA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_3GRF, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_WNG0, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// Class InteractiveToolsFramework.GizmoConstantAxisSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_8ZNN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// Class InteractiveToolsFramework.GizmoConstantFrameAxisSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_VWDI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// Class InteractiveToolsFramework.GizmoWorldAxisSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_FIRZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// Class InteractiveToolsFramework.GizmoComponentAxisSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_0HRQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_MDL4, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// Class InteractiveToolsFramework.InteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_LH1B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_VPNX, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// Class InteractiveToolsFramework.BrushBaseProperties
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_4Z4T, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_J8IQ, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// Class InteractiveToolsFramework.InteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_2GM8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_YWHI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// Class InteractiveToolsFramework.SingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_WZCC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// Class InteractiveToolsFramework.MeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_FUJJ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// Class InteractiveToolsFramework.BaseBrushTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_136R, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_1VCK, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// Class InteractiveToolsFramework.BrushStampIndicatorBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.BrushStampIndicator
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_FKFQ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_G0MS, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_E70G, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_FYQ8, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// Class InteractiveToolsFramework.ClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_PUJF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_LD6X, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// Class InteractiveToolsFramework.LocalClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_32DE, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// Class InteractiveToolsFramework.InteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.ClickDragToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.ClickDragTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_LOYT, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// Class InteractiveToolsFramework.InternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// Class InteractiveToolsFramework.GizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// Class InteractiveToolsFramework.GizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_9OTN, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0460);
		}

		// Class InteractiveToolsFramework.GizmoArrowComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_LDQ5, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0480);
		}

		// Class InteractiveToolsFramework.GizmoBoxComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_5O47, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_0IFX, 0x0492);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04A0);
		}

		// Class InteractiveToolsFramework.GizmoCircleComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_Q06H, 0x047A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0480);
		}

		// Class InteractiveToolsFramework.GizmoTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoAxisSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoClickTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoStateTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// Class InteractiveToolsFramework.GizmoLineHandleComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_TPR7, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// Class InteractiveToolsFramework.GizmoRectangleComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_8R7A, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0490);
		}

		// Class InteractiveToolsFramework.GizmoLambdaHitTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_IFM1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// Class InteractiveToolsFramework.GizmoComponentHitTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_LXSZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_FDDB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// Class InteractiveToolsFramework.InputBehaviorSet
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// Class InteractiveToolsFramework.InputBehaviorSource
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// Class InteractiveToolsFramework.InputRouter
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_JBF5, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_6P59, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// Class InteractiveToolsFramework.InteractionMechanic
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_T16I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// Class InteractiveToolsFramework.InteractiveGizmoManager
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_8DDP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_MWYS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_54UT, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// Class InteractiveToolsFramework.ToolContextTransactionProvider
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// Class InteractiveToolsFramework.InteractiveToolManager
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_K0IW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_5BU2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_EFN7, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// Class InteractiveToolsFramework.ToolFrameworkComponent
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// Class InteractiveToolsFramework.InteractiveToolsContext
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_DZGB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// Class InteractiveToolsFramework.IntervalGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// Class InteractiveToolsFramework.IntervalGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_A5UD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// Class InteractiveToolsFramework.IntervalGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_JJL0, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_5NBX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_H9N0, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// Class InteractiveToolsFramework.GizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_NXHZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// Class InteractiveToolsFramework.GizmoAxisIntervalParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// Class InteractiveToolsFramework.KeyAsModifierInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_JCHS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// Class InteractiveToolsFramework.MeshSurfacePointToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_EYL7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// Class InteractiveToolsFramework.MouseHoverBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_Z6C5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// Class InteractiveToolsFramework.MultiClickSequenceInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_T3NA, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// Class InteractiveToolsFramework.MultiSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_W1NZ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// Class InteractiveToolsFramework.GizmoLocalFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_LP9P, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// Class InteractiveToolsFramework.GizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_NDTD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// Class InteractiveToolsFramework.GizmoLocalVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// Class InteractiveToolsFramework.GizmoAxisTranslationParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_VBM2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_I00A, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// Class InteractiveToolsFramework.GizmoPlaneTranslationParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_EHGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_IXVA, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// Class InteractiveToolsFramework.GizmoAxisRotationParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_SEIP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_SCA2, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// Class InteractiveToolsFramework.GizmoUniformScaleParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_WG8T, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// Class InteractiveToolsFramework.GizmoAxisScaleParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// Class InteractiveToolsFramework.GizmoPlaneScaleParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_KOGS, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_DUD5, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// Class InteractiveToolsFramework.PlanePositionGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.PlanePositionGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_76GB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_4QNV, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// Class InteractiveToolsFramework.SelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_4TJX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// Class InteractiveToolsFramework.MeshSelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// Class InteractiveToolsFramework.SingleClickInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_RPN3, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_Y0MF, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// Class InteractiveToolsFramework.SingleClickToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// Class InteractiveToolsFramework.SingleClickTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_2P5O, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// Class InteractiveToolsFramework.GizmoNilStateTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_37EE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// Class InteractiveToolsFramework.GizmoLambdaStateTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_93HY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// Class InteractiveToolsFramework.GizmoObjectModifyStateTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_T8AQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// Class InteractiveToolsFramework.GizmoTransformChangeStateTarget
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_O7CF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_YXSZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// Class InteractiveToolsFramework.TransformGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// Class InteractiveToolsFramework.TransformGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_N8VY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// Class InteractiveToolsFramework.TransformGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_LK0A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_7NTO, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_OZ9P, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_FQMC, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_YFR9, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_ZRQG, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CJ6A, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_GYNB, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// Class InteractiveToolsFramework.TransformProxy
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_P5IF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_4TDU, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// Class InteractiveToolsFramework.GizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_0FNW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// Class InteractiveToolsFramework.GizmoComponentWorldTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_I9OS, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// Class InteractiveToolsFramework.GizmoScaledTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_NUPE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// Class InteractiveToolsFramework.GizmoTransformProxyTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// WidgetBlueprintGeneratedClass BP_StartupScreen.BP_StartupScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StartupScreen__BP_StartupScreen_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StartupScreen_C, 0x0348);
		}

		// WidgetBlueprintGeneratedClass BP_BountyToggleButton.BP_BountyToggleButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BountyToggleButton__BP_BountyToggleButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, ButtonFocus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, SelectLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Arrow_Btn_Next, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Arrow_Btn_Prev, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Border_37, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Button_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Image_6958, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, SelectedBorder, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TB_CurrentLabel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TB_OffText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TB_OnText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, Toggler, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TogglerPadding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, WidgetPadding, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, NormalBrush, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, SelectedBrush, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, CheckBoxStyle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, DefaultValue, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, UnknownData_45TM, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, OnText, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, OffText, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TextColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TextFont, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, PrevButtonStyle, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, NextButtonStyle, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, PrevButtonTransform, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, NextButtonTransform, 0x0F3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, ToggledDispatcher, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, HoverSound, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, ChangeSound, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, HasControllerFocus, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, IsMouseHovered, 0x0F79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, UnknownData_93UN, 0x0F7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyToggleButton_C, TextLabel, 0x0F80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BountyToggleButton_C, 0x0F98);
		}

		// WidgetBlueprintGeneratedClass BP_ChallengeProgressSlotCompact.BP_ChallengeProgressSlotCompact_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChallengeProgressSlotCompact__BP_ChallengeProgressSlotCompact_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, BP_RadialMeter_133, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, Image_824, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, Image_1242, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, OutOf, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, TextBlock_2994, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, TextBlock_2995, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, TextBlock_2996, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, TextBlock_3006, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, TimeToAnimate, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, UnknownData_K2J7, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, Data, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, Progress, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, ProgressFloat, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, CurrentTier, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, CurrentReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotCompact_C, CurrentTarget, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChallengeProgressSlotCompact_C, 0x035C);
		}

		// Class AudioAnalyzer.AudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerAsset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerAsset, 0x0028);
		}

		// Class AudioAnalyzer.AudioAnalyzerNRTSettings
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRTSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRTSettings, 0x0028);
		}

		// Class AudioAnalyzer.AudioAnalyzerNRT
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRT)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, Sound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, DurationInSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, UnknownData_STUK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRT, 0x0078);
		}

		// Class AnimationCore.AnimationDataSourceRegistry
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_H2H_NP02.BP_Casino_H2H_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_H2H_NP02__BP_Casino_H2H_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_H2H_NP02_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_ScrollingTextBox.BP_ScrollingTextBox_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScrollingTextBox__BP_ScrollingTextBox_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScrollingTextBox_C, 0x09F8);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_SP_NP01.BP_Casino_SP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_SP_NP01__BP_Casino_SP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_SP_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_Spinner.BP_Spinner_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Spinner__BP_Spinner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TargetChange_Right_Complete, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TargetChange_Left, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TargetChange_Left_Complete, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TargetChange_Right, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TargetChange, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, ButtonFocus, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, Arrow_Btn_Next, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, Arrow_Btn_Prev, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, Background, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, Border, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, Button_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TB_CurrentChoice, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, TB_CurrentLabel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, ViewModel, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, SpinnerName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, ViewModelClass, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, IsFocused, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, UnknownData_UAWK, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, HoverSound, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, ChangeSound, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, SelectedBrush, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, IsMouseHovered, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Spinner_C, IsAnimating, 0x0399);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spinner_C, 0x039A);
		}

		// WidgetBlueprintGeneratedClass BP_ChatIndicator.BP_ChatIndicator_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChatIndicator__BP_ChatIndicator_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChatIndicator_C, Image_30, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChatIndicator_C, 0x0420);
		}

		// Class ImgMediaFactory.ImgMediaSettings
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_VO0N, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_UZDM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_K7IT, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_Busted.BP_InGame_Busted_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_Busted__BP_InGame_Busted_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Busted_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Busted_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, BackBar, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, BG_White, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, BP_ButtonCallout_C_560, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, BP_ButtonCallout_C_563, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Btn_Exit, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Btn_ReBuy, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, DirtBrush01, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, DirtBrush02, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, DirtBrush03, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, DirtBrush04, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, DirtFrame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, HeaderBar, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Image_55, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Image_56, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Image_1772, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Image_1773, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, Safeframe, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, TB_Busted_Timer, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, TextBankroll, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, TextBlock_437, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_Busted_C, TextRebuyAmount, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_Busted_C, 0x04D8);
		}

		// WidgetBlueprintGeneratedClass BP_HudBackPanel.BP_HudBackPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HudBackPanel__BP_HudBackPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, SupportMenuConsole_Outro, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, SupportMenuConsole_Intro, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, SupportMenu_Outro, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, SupportMenu_Intro, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CreditsMenuConsole_Outro, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CreditsMenuConsole_Intro, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CreditsMenu_Outro, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CreditsMenu_Intro, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, OptionsMenuConsole_Outro, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, OptionsMenuConsole_Intro, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, ControlsMenuConsole_Outro, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, ControlsMenuConsole_Intro, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, GameReferenceMenuConsole_Outro, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, GameReferenceMenuConsole_Intro, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, HelpOptionsMenuConsole_Outro, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, HelpOptionsMenuConsole_Intro, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, OptionsMenu_Outro, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, OptionsMenu_Intro, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, ControlsMenu_Outro, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, ControlsMenu_Intro, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, GameReferenceMenu_Outro, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, GameReferenceMenu_Intro, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, HelpOptionsMenu_Outro, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, HelpOptionsMenu_Intro, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, AchievementsMenu_Outro, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, AchievementsMenu_Intro, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, IngameShopMenu_Outro, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, IngameShopMenu_Intro, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, PauseMenu_Intro, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BackPanel_RotateLoop, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Background, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BG_White, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_4, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_9, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_16, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_25, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_36, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_49, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_64, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_81, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_100, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_121, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_144, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_169, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_196, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_225, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_256, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_289, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_324, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_361, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_400, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_441, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_484, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_529, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_576, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_625, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_676, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_729, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_784, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_841, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_900, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_961, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1024, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1089, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1156, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1225, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1296, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1369, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1444, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1521, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1600, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1681, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1723, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1765, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, BP_BackPanel_Card_C_1808, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Btn_BackToGame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Btn_RapSheet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Btn_ReBuy, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Btn_SitOut, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CfButton_1086, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CfButton_1087, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, CfButton_1088, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtBrush01, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtBrush02, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtBrush03, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtBrush04, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtFrame, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, DirtFrame2, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Image_6418, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Image_8806, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Image_13687, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Image_19121, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, Panel_Group, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, PanelMenuRotate, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HudBackPanel_C, WhiteMenu_BACK, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HudBackPanel_C, 0x06B0);
		}

		// WidgetBlueprintGeneratedClass FUE_Rewards.FUE_Rewards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__FUE_Rewards__FUE_Rewards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE_Rewards_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE_Rewards_C, FUE_Rewards_IN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE_Rewards_C, Image_215, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE_Rewards_C, Image_314, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE_Rewards_C, Image_315, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFUE_Rewards_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass BP_Slots.BP_Slots_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Slots__BP_Slots_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, HunThoPop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TenThoPop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, ThoPop, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, HunPop, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TenPop, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, OnePop, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, HB2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunDown, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunDownDown, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_Hundreds, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HundredThousand, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunThoDown, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunThoDownDown, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunThoUp, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_HunUp, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_OneDown, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_OneDownDown, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_Ones, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_OneUp, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenDown, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenDownDown, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_Tens, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenThoDown, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenThoDownDown, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenThoUp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenThousands, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_TenUp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_ThoDown, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_ThoDownDown, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_ThoUp, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TB_Thousands, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17896, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17897, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17898, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17899, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17900, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17901, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17902, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17903, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17904, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17905, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17906, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17907, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17908, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17909, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17910, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17911, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17912, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17913, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17914, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17915, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17916, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17917, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17918, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, TextBlock_17919, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_Hun, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_HunTho, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_One, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_Ten, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_TenTho, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB2_Tho, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_Hun, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_HunTho, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_One, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_Ten, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_TenTho, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VB_Tho, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, IsRolling, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VerticalBoxes, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, RollUpPoint, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, DesiredValue, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, CurrentVBs, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, VerticalBoxes2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, RollsLeft, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, BlurSpeed, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, UnknownData_6E88, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, DesiredText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, ShouldStop, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, StopSpinTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, UnknownData_H63D, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, SpinTimes, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slots_C, DoneSpinning, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Slots_C, 0x0528);
		}

		// Class MovieSceneCapture.MovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_6VC6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_CS16, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.MovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.NullAudioCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// Class MovieSceneCapture.MasterAudioSubmixCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_OU2D, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// Class MovieSceneCapture.MovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// Class MovieSceneCapture.CompositionGraphCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_50L9, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_5GXC, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_J0CM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_EE05, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// Class MovieSceneCapture.FrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_D52M, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_FMSC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// Class MovieSceneCapture.CompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_17QF, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_BMP
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_PNG
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_JPG
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// Class MovieSceneCapture.ImageSequenceProtocol_EXR
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_WF7W, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// Class MovieSceneCapture.MovieSceneCaptureInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// Class MovieSceneCapture.MovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_RA68, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_EGGQ, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_IRS8, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// Class MovieSceneCapture.LevelCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_1OLE, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_7RKX, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// Class MovieSceneCapture.MovieSceneCaptureEnvironment
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// Class MovieSceneCapture.UserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_N6IX, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// Class MovieSceneCapture.UserDefinedImageCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_JGTU, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// Class MovieSceneCapture.VideoCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_GB18, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_0JAH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// BlueprintGeneratedClass BP_3D_TableRefill.BP_3D_TableRefill_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_TableRefill__BP_3D_TableRefill_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_TableRefill_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_TableRefill_C, Callout, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_TableRefill_C, DynamicMaterial, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_TableRefill_C, 0x0258);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_SP_NP01.BP_BikerBar_SP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_SP_NP01__BP_BikerBar_SP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_SP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_SP_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_GameOptions.BP_GameOptions_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameOptions__BP_GameOptions_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, GameOptions_AV_OUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, GameOptions_AV_IN, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, ApplyButton, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, BackBar, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, BP_BackButton_C_47, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, BP_ButtonCallout_C_50, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, BP_ButtonCallout_C_51, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, CardFaceOption, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, ChangesSaved_Group, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, DefaultBuyinSpinner, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, GameOptionsList, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, RestoreDefaultsButton, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, RumbleToggler, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, Safeframe, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, Text_GameOptions, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, TutorialToggler, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameOptions_C, TutorialToggleEnabled, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameOptions_C, 0x04E9);
		}

		// Class NetCore.NetAnalyticsAggregatorConfig
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_LeaderboardComparePanel.BP_LeaderboardComparePanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LeaderboardComparePanel__BP_LeaderboardComparePanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, Image_2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, Image_177, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, NoInfo, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBAffiliationRank, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsDailyCut, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsDailyCutTitle, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsLifetime, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsLifetimeTitle, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsPerDay, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBChipsPerDayTitle, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBLeaderboardTitle, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBLeaderboardValue, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBPlayerLevel, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TBPosition, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TextBlock_1956, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, HeartsColor, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, SpadesColor, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, DiamondsColor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, ClubsColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LeaderboardComparePanel_C, TouristColor, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LeaderboardComparePanel_C, 0x05B8);
		}

		// Class MRMesh.MeshReconstructorBase
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// Class MRMesh.MockDataMeshTrackerComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_8FTD, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_LBYE, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_528K, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// Class MRMesh.MRMeshComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_NI4H, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_MQDH, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_CH4O, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// WidgetBlueprintGeneratedClass BP_StoreItemSelection.BP_StoreItemSelection_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StoreItemSelection__BP_StoreItemSelection_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, UberGraphFrame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, SelectionIn, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Boost_Border, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Equipped, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Featured, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, InnerRarityGlow, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Item, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, OuterRarityGlow, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Owned, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Text_Boost_Percent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemSelection_C, Text_Hands, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StoreItemSelection_C, 0x04E0);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_Background01.BP_Casino_Background01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_Background01__BP_Casino_Background01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Animate_OUT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Animate_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, BG_Black, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtBrush01, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtBrush02, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtBrush03, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtBrush04, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, DirtFrame2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_298, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2464, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2474, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2475, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2476, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2477, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2478, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2479, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2480, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2481, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2482, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2483, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2484, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2485, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2486, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2487, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2488, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2489, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2490, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2491, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2492, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Image_2493, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, Panel_Group, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, PanelMenuRotate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, EULA_Screen, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, ProfileReceived, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_Background01_C, RomReceived, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_Background01_C, 0x0382);
		}

		// WidgetBlueprintGeneratedClass BP_ChallengesPanel.BP_ChallengesPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChallengesPanel__BP_ChallengesPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Arrow_Loop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Challenges_OUT, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Challenges_IN, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid1InUp, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid1OutUp, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid1InDown, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid1OutDown, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid0InUp, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid0OutUp, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid0InDown, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid0OutDown, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Arrow_DN, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Arrpw_UP, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BackBar, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_BackButton_C_47, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ButtonCallout_C_5, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ButtonCallout_C_7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ButtonCallout_C_70, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ButtonCallout_C_71, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_75, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_133, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_134, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_160, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_162, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_163, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_190, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_192, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_193, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_665, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_667, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_668, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_669, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_671, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_672, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_673, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_675, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BP_ChallengeProgressPanel_C_676, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BTN_LB, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BTN_LT, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BTN_RB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, BTN_RT, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid0, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Grid1, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Image_7310, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, Safeframe, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, TextBlock_13921, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, CurrentGrid, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, UnknownData_85HO, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, CurrentPage, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, PageReached, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, SingleAnimationFinished, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, UnknownData_100D, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, AnimationDelay, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, ChallengeData, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, parentScreen, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, RowSize, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, ColSize, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, NumberOfPages, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, ActiveAnimations, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengesPanel_C, IsHidden, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChallengesPanel_C, 0x0549);
		}

		// WidgetBlueprintGeneratedClass BP_Support.BP_Support_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Support__BP_Support_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Nav_ContactUs, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Nav_ReleaseNotes, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Support_OUT, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BtnSelect_LOOP, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Support_IN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BackBar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BG_White, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BP_BackButton_C_47, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BP_ButtonCallout_C, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, BP_ButtonCallout_C_560, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Btn_ContactUs, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Btn_Logs, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Btn_ReleaseNotes, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Btn_Scroll, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Content, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, DirtBrush01, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, DirtBrush02, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, DirtBrush03, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, DirtBrush04, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, DirtFrame, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Image_713, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Safeframe, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, SupportList, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, WhiteMenu_BACK, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, InReference, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, UnknownData_9XB3, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Support_C, Contents, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Support_C, 0x04F8);
		}

		// Class MobilePatchingUtils.MobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_ZYPJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// Class MobilePatchingUtils.MobilePendingContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_9O47, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// Class MobilePatchingUtils.MobilePatchingLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_RewardIconSlot.BP_RewardIconSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RewardIconSlot__BP_RewardIconSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconSlot_C, Panel, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RewardIconSlot_C, 0x0278);
		}

		// WidgetBlueprintGeneratedClass BP_BackPanel_Card.BP_BackPanel_Card_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BackPanel_Card__BP_BackPanel_Card_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, Image1_In, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, Image0_In, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, Image0, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, Image1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, TouristImages, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, HeartsImages, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, ClubsImages, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, SpadesImages, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, DiamondsImages, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_Card_C, UsingImage_1, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BackPanel_Card_C, 0x02D1);
		}

		// Class GeometryCollectionTracks.MovieSceneGeometryCollectionSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0118);
		}

		// Class GeometryCollectionTracks.MovieSceneGeometryCollectionTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, UnknownData_V3X6, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0090);
		}

		// Class ClothingSystemRuntimeNv.ClothConfigNv
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_NQ4I, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_1NU1, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_ZM4E, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// Class ClothingSystemRuntimeNv.ClothingSimulationFactoryNv
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// Class ClothingSystemRuntimeNv.ClothingSimulationInteractorNv
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_CPR7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// Class ClothingSystemRuntimeNv.ClothPhysicalMeshDataNv_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// Class SignificanceManager.SignificanceManager
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_V842, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// AnimBlueprintGeneratedClass BP_PlayerAvatarAnim_F.BP_PlayerAvatarAnim_F_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_PlayerAvatarAnim_F__BP_PlayerAvatarAnim_F_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, UberGraphFrame, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Root, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalRefPose_5, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalToComponentSpace_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Fabrik_3, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Fabrik_2, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_BlendListByInt, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalToComponentSpace, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Fabrik, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_ComponentToLocalSpace, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalRefPose_4, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LayeredBoneBlend_2, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Slot_5, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LayeredBoneBlend, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_TwoWayBlend_2, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Slot_4, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalRefPose_3, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Slot_3, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalRefPose_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_BlendListByBool, 0x15C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Slot_2, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_SaveCachedPose_2, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_UseCachedPose_5, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_UseCachedPose_4, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_UseCachedPose_3, 0x1858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_SaveCachedPose, 0x1880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_Slot, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_UseCachedPose_2, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_UseCachedPose, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_TwoWayBlend, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, AnimGraphNode_LocalRefPose, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_F_C, Player, 0x1B50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerAvatarAnim_F_C, 0x1B58);
		}

		// WidgetBlueprintGeneratedClass BP_LoadingProgressBar.BP_LoadingProgressBar_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LoadingProgressBar__BP_LoadingProgressBar_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadingProgressBar_C, ProgressBar_21, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoadingProgressBar_C, Safeframe, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LoadingProgressBar_C, 0x0360);
		}

		// Class Niagara.NiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_ETGN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// Class Niagara.MovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// Class Niagara.MovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// Class Niagara.MovieSceneNiagaraBoolParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_L0MB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// Class Niagara.MovieSceneNiagaraColorParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_Z05V, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// Class Niagara.MovieSceneNiagaraFloatParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_P7S8, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// Class Niagara.MovieSceneNiagaraIntegerParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_DVLU, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// Class Niagara.MovieSceneNiagaraSystemSpawnSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_HNN7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_UZHK, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_HU2X, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_F5WI, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// Class Niagara.MovieSceneNiagaraSystemTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_EXQ3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// Class Niagara.MovieSceneNiagaraVectorParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_BJ7X, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_CVLZ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// Class Niagara.NiagaraActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_5B0Y, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// Class Niagara.NiagaraComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_R4QG, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_PUFV, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_MRHL, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_GLEP, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_692H, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0QH4, 0x058B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// Class Niagara.NiagaraComponentPool
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_XY9X, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// Class Niagara.NiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_HXJY, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// Class Niagara.NiagaraComponentRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_6H29, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_3EK2, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_ORY3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// Class Niagara.NiagaraComponentSettings
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// Class Niagara.NiagaraConvertInPlaceUtilityBase
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// Class Niagara.NiagaraDataInterface2DArrayTexture
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_ETCV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_6COR, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// Class Niagara.NiagaraDataInterfaceArrayFloat
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayFloat2
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayFloat3
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayFloat4
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayColor
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayQuat
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// Class Niagara.NiagaraDataInterfaceArrayInt32
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceArrayBool
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// Class Niagara.NiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceAudioOscilloscope
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// Class Niagara.NiagaraDataInterfaceAudioPlayer
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_3GTX, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_A6TS, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// Class Niagara.NiagaraDataInterfaceAudioSpectrum
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// Class Niagara.NiagaraDataInterfaceCamera
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_IK6P, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceCollisionQuery
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_VXBU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// Class Niagara.NiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_0XWH, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_C910, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// Class Niagara.NiagaraDataInterfaceColorCurve
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// Class Niagara.NiagaraDataInterfaceCurlNoise
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_OF6Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// Class Niagara.NiagaraDataInterfaceCurve
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// Class Niagara.NiagaraParticleCallbackHandler
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// Class Niagara.NiagaraDataInterfaceExport
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_I2KY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_M4EX, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// Class Niagara.NiagaraDataInterfaceGBuffer
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// Class Niagara.NiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// Class Niagara.NiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_DMRC, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_2T8H, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// Class Niagara.NiagaraDataInterfaceGrid2DCollection
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_SKQQ, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// Class Niagara.NiagaraDataInterfaceGrid2DCollectionReader
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_3IN0, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// Class Niagara.NiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_0974, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_NN8J, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// Class Niagara.NiagaraDataInterfaceGrid3DCollection
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_DA6A, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_D9H0, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// Class Niagara.NiagaraDataInterfaceLandscape
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceNeighborGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_BJCC, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// Class Niagara.NiagaraDataInterfaceOcclusion
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// Class Niagara.NiagaraDataInterfaceParticleRead
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// Class Niagara.NiagaraDataInterfacePlatformSet
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// Class Niagara.NiagaraDataInterfaceRenderTarget2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_I6WH, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// Class Niagara.NiagaraDataInterfaceRenderTarget2DArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_BVLI, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// Class Niagara.NiagaraDataInterfaceRenderTargetVolume
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_4QD9, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// Class Niagara.NiagaraDataInterfaceSimpleCounter
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// Class Niagara.NiagaraDataInterfaceSkeletalMesh
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_7CAI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_DXWW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_EBV6, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_DK94, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// Class Niagara.NiagaraDataInterfaceSpline
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceStaticMesh
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_YSU4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_3WX9, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_CNVH, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// Class Niagara.NiagaraDataInterfaceTexture
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// Class Niagara.NiagaraDataInterfaceVector2DCurve
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// Class Niagara.NiagaraDataInterfaceVector4Curve
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// Class Niagara.NiagaraDataInterfaceVectorCurve
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// Class Niagara.NiagaraDataInterfaceVectorField
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_S3V9, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// Class Niagara.NiagaraDataInterfaceVolumeTexture
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// Class Niagara.NiagaraEditorDataBase
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// Class Niagara.NiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// Class Niagara.NiagaraSignificanceHandlerDistance
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// Class Niagara.NiagaraSignificanceHandlerAge
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// Class Niagara.NiagaraEffectType
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_QE4P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_RAK7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_WQVW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// Class Niagara.NiagaraEmitter
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_YALT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_GS3V, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_CJUM, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_3YNM, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_CDZK, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_IQU2, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_JBUY, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// Class Niagara.NiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// Class Niagara.NiagaraEventReceiverEmitterAction_SpawnParticles
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_0FSZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// Class Niagara.NiagaraFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// Class Niagara.NiagaraLightRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_UM9Y, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_XU6T, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_G376, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// Class Niagara.NiagaraMeshRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_VDF2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_1U2S, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_8E5K, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_RP7M, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_4SLG, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_DH2A, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_EA5F, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_7DKN, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_WCO0, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_4LAT, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// Class Niagara.NiagaraMessageDataBase
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// Class Niagara.NiagaraParameterCollectionInstance
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_TQHD, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// Class Niagara.NiagaraParameterCollection
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// Class Niagara.NiagaraPrecompileContainer
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// Class Niagara.NiagaraPreviewBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// Class Niagara.NiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_W40X, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamInt32
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamFloat
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamVector2D
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamVector
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamVector4
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_AXEY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// Class Niagara.NiagaraPreviewAxis_InterpParamLinearColor
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// Class Niagara.NiagaraPreviewGrid
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_G49D, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_K7WF, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// Class Niagara.NiagaraRibbonRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_B98R, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_11KZ, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_554U, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_34X9, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_B2NU, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_5L6Q, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// Class Niagara.NiagaraScript
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_AI0J, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_O1UT, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_GFXA, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// Class Niagara.NiagaraScriptSourceBase
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_7DLS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// Class Niagara.NiagaraSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_5HES, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// Class Niagara.NiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_MRO1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// Class Niagara.NiagaraSimulationStageGeneric
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_U8EM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_I9HO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// Class Niagara.NiagaraSpriteRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_IINZ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_P2JZ, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_Z5TS, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_NTP8, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_MI1U, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_RMV6, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_F9RT, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// Class Niagara.NiagaraSystem
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_ILIQ, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_6QMZ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_2X3M, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_L8Q0, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_8KL0, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_EYRC, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_LRDK, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_H2H_NP01.BP_BikerBar_H2H_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_H2H_NP01__BP_BikerBar_H2H_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_H2H_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_TournamentPayoutDisplay.BP_TournamentPayoutDisplay_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TournamentPayoutDisplay__BP_TournamentPayoutDisplay_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_OUT_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_Participants_OUT, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_Participants_IN, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_6pToH2h, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_Update, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Payout_IN_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Border_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, EntryFee_Background, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Image_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Image_3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, LootCase_Icon, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, PayoutTitleRibbonTournament, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, RatingDotTournament1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, RatingDotTournament2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, RatingDotTournament3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, RatingIconRibbonTournament, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Slot02, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, Slot03, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_EntryFee_Value, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_Payout1_Label, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_Payout1_Value, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_Payout2_Value, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_Payout3_Value, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TournamentPayoutDisplay_C, TB_Payouts_Header, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TournamentPayoutDisplay_C, 0x0360);
		}

		// WidgetBlueprintGeneratedClass BP_EditAppearance.BP_EditAppearance_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EditAppearance__BP_EditAppearance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Nav_Gender, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Nav_Body, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Nav_Head, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Nav_Hair, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Nav_Nickname, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, BtnSelect_LOOP, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, EditAppearance_OUT, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, EditAppearance_IN, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, BackBar, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, BP_BackButton_C_18, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, BP_ButtonCallout_C_1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, BP_SelectButton_C_27, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_Continue, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_EditBody, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_EditHair, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_EditHead, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_Gender, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Btn_NickName, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, EditAppearanceList, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, EditAppearanceMenu, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, EditNicknameMenu, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Selected_Nickname, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, WhiteMenu_BACK, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, NpcTweakerButton, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Loading, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditAppearance_C, Continued, 0x04E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EditAppearance_C, 0x04E2);
		}

		// WidgetBlueprintGeneratedClass BP_AvatarSplash.BP_AvatarSplash_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AvatarSplash__BP_AvatarSplash_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Splash_OUT, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Splash_IN, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Bottom_01, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Bottom_02, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Lower_01, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Lower_02, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Middle_01, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Middle_02, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Splash_Group, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, Upper_01, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, PlayerBankRoll, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarSplash_C, CanSetProgress, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AvatarSplash_C, 0x03A9);
		}

		// WidgetBlueprintGeneratedClass BP_MuckSelector.BP_MuckSelector_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MuckSelector__BP_MuckSelector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, RightSelect_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, LeftSelect_IN, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, DownSelect_IN, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, UpSelect_IN, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Select_Loop, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Muck_OUT, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Muck_IN, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Arrow_Down, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Arrow_Left, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Arrow_Right, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Arrow_UP, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, BLCard, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Both, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, BP_ButtonCallout, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, BRCard, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Btn_Down, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Btn_Left, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Btn_Right, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Btn_Up, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, CardSplatter_01, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, CardSplatter_02, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, CardSplatter_03, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, CardSplatter_04, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, down_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, down_02, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Face, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Focus_Down, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Focus_Left, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Focus_Right, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Focus_Up, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Frame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Image_2241, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Image_2242, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Image_3123, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Image_3241, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Image_10439, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, left_01, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, left_02, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, LLCard, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, LRCard, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, RadialMenuBack, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, RadMeterPointer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, right_01, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, right_02, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, RLCard, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, RRCard, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Safeframe, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Select_Down, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Select_Left, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Select_RIGHT, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Select_UP, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, Timer, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, TimerGradient, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, TLCard, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, TRCard, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, up_01, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, up_02, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, PointerDirection, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, PointerHoveredSection, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, MuckSelectTimeLimit, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuckSelector_C, DefaultRevealDecision, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MuckSelector_C, 0x0571);
		}

		// BlueprintGeneratedClass BP_3D_Nameplate.BP_3D_Nameplate_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_Nameplate__BP_3D_Nameplate_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, StatsButton, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, ProfileButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, MuteButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, GiftButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, Nameplate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_Nameplate_C, DynamicMaterial, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_Nameplate_C, 0x0258);
		}

		// WidgetBlueprintGeneratedClass BP_AudioSettingsScreen.BP_AudioSettingsScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AudioSettingsScreen__BP_AudioSettingsScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, VideoSettings_OUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, VideoSettings_IN, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, ApplyButton, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, Audio_SettingsList, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, BackBar, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, BP_BackButton_C_47, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, BP_ButtonCallout_C_32, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, BP_ButtonCallout_C_50, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, BP_ButtonCallout_C_51, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, ChangesSaved_Group, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, Chat_Group, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, ChatSlider, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, EffectsVolume_Group, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, EffectsVolumeSlider, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MasterVolume_Group, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MasterVolumeSlider, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MusicVolume_Group, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MusicVolumeSlider, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MuteButton, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, RestoreDefaultsButton, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, Safeframe, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, TextBlock_1484, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, TextBlock_3806, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UISlider, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UIVolume_Group, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, VOSlider, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, VOVolume_Group, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MasterVolume, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, EffectsVolume, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, MusicVolume, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UnknownData_V2RI, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, AllBusses, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, VOVolume, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UIVolume, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, IsMuted, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, UnknownData_JSKB, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, ChangesSavedTime, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AudioSettingsScreen_C, ChatVolume, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AudioSettingsScreen_C, 0x0574);
		}

		// WidgetBlueprintGeneratedClass BP_LobbySetup.BP_LobbySetup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LobbySetup__BP_LobbySetup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, UberGraphFrame, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, PreviousVenue, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, NextVenue, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LobbyParticipants_ALL_OUT, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LobbyParticipants_OUT, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LobbyParticipants_IN, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LobbySetup_OUT, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LobbySetup_IN, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BackBar, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_BackButton, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_ButtonCallout, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_ButtonCallout_C_1, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_ButtonCallout_C_25, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_ButtonCallout_C_560, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BP_TournamentPayoutDisplay, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BTN_GoReady, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BTN_INVITE, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Btn_JoinChat, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BTN_VoiceChat_Join, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, BuyInSpinner, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Content, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, CountdownBox, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, From_Background, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, GameTypeSpinner, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Image_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Image_2, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Image_3, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Image_5, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LBL_COUNTDOWN, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, LoadingBox, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Lock, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Locked, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Popularity, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Popularity_Background, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, PracticeChipsTB, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, PrivacySpinner, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Safeframe, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TB_LobbyType, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TB_VoiceChat_Join, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TextBlock_1, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TextBlock_356, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TextBlock_357, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TextBlock_744, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, TextBlock_1163, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Throbber_2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Throbber_5, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Title_Text, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, To_Background, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Type_Group, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, Venue_Group, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbySetup_C, VenueSpinner, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LobbySetup_C, 0x0748);
		}

		// Class SlateCore.FontBulkData
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_KE7F, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// Class SlateCore.FontFaceInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// Class SlateCore.FontProviderInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// Class SlateCore.SlateTypes
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// Class SlateCore.SlateWidgetStyleAsset
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// Class SlateCore.SlateWidgetStyleContainerBase
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_P9CR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// Class SlateCore.SlateWidgetStyleContainerInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// Class AugmentedReality.ARActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// Class AugmentedReality.ARBlueprintLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// Class AugmentedReality.ARTraceResultLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// Class AugmentedReality.ARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_C9L6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// Class AugmentedReality.ARSaveWorldAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_PU0N, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// Class AugmentedReality.ARGetCandidateObjectAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_ANG5, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// Class AugmentedReality.ARComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_R24R, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_4OB1, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_TO1W, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// Class AugmentedReality.ARPlaneComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// Class AugmentedReality.ARPointComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// Class AugmentedReality.ARFaceComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_Q0HY, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// Class AugmentedReality.ARImageComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// Class AugmentedReality.ARQRCodeComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// Class AugmentedReality.ARPoseComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// Class AugmentedReality.AREnvironmentProbeComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// Class AugmentedReality.ARObjectComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// Class AugmentedReality.ARMeshComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// Class AugmentedReality.ARGeoAnchorComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// Class AugmentedReality.ARDependencyHandler
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// Class AugmentedReality.ARGeoTrackingSupport
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// Class AugmentedReality.CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_9M2V, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// Class AugmentedReality.GetGeoLocationAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_UC5G, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// Class AugmentedReality.ARLifeCycleComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_G23G, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// Class AugmentedReality.ARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// Class AugmentedReality.ARBasicLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// Class AugmentedReality.AROriginActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// Class AugmentedReality.ARPin
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_0BEQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_SOF9, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_YQML, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// Class AugmentedReality.ARSessionConfig
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_Y5ND, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_CSJP, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_HVIM, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_DF3E, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_7U5P, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// Class AugmentedReality.ARSharedWorldGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_FSJ3, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// Class AugmentedReality.ARSharedWorldGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_GRNG, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// Class AugmentedReality.ARSharedWorldPlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_0FR4, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// Class AugmentedReality.ARSkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_2MNN, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// Class AugmentedReality.ARTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_3AFI, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// Class AugmentedReality.ARTextureCameraImage
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// Class AugmentedReality.ARTextureCameraDepth
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_CN9K, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// Class AugmentedReality.AREnvironmentCaptureProbeTexture
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_M9P0, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// Class AugmentedReality.ARTraceResultDummy
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// Class AugmentedReality.ARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_8JRP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_IAKF, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_VJWH, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_47CT, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_AT3N, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x0100);
		}

		// Class AugmentedReality.ARPlaneGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_EQM6, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// Class AugmentedReality.ARTrackedPoint
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// Class AugmentedReality.ARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, UnknownData_0OJK, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0110);
		}

		// Class AugmentedReality.ARTrackedQRCode
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_U0PA, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// Class AugmentedReality.ARFaceGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_D40E, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_3SQK, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// Class AugmentedReality.AREnvironmentCaptureProbe
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_0KPH, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// Class AugmentedReality.ARTrackedObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// Class AugmentedReality.ARTrackedPose
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_FW6S, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// Class AugmentedReality.ARMeshGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// Class AugmentedReality.ARGeoAnchor
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_478Q, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// Class AugmentedReality.ARTrackableNotifyComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// Class AugmentedReality.ARTypesDummyClass
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// Class AugmentedReality.ARCandidateImage
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_F2HC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// Class AugmentedReality.ARCandidateObject
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_EWUG, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// Class OnlineSubsystemUtils.AchievementBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.AchievementQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_77OL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// Class OnlineSubsystemUtils.AchievementWriteCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_661G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.ConnectionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_A3H4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.CreateSessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_ZYDP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// Class OnlineSubsystemUtils.DestroySessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_I1M8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.EndMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_OUO5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.EndTurnCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_OFRI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.FindSessionsCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_PU3E, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.FindTurnBasedMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_HKFB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_K504, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseCallbackProxy2
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_JB8X, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_N6DK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy2
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_R5FN, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_G37D, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy2
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_ZIEJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// Class OnlineSubsystemUtils.IpConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_M4P6, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_GKP4, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// Class OnlineSubsystemUtils.IpNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_XYZC, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_TZ4Z, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_ZA06, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_N81R, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// Class OnlineSubsystemUtils.JoinSessionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_27ME, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// Class OnlineSubsystemUtils.LeaderboardBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.LeaderboardFlushCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_OIGG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// Class OnlineSubsystemUtils.LeaderboardQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_HOAO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// Class OnlineSubsystemUtils.LogoutCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_NUJ6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// Class OnlineSubsystemUtils.OnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_LSUG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_QQFT, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_A204, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_IFGL, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_QJRN, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// Class OnlineSubsystemUtils.OnlineEngineInterfaceImpl
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_TYDV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// Class OnlineSubsystemUtils.OnlinePIESettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_XZKA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// Class OnlineSubsystemUtils.OnlineSessionClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_K6MU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_2PJA, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// Class OnlineSubsystemUtils.PartyBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_UT4F, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_S5QF, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// Class OnlineSubsystemUtils.PartyBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_2MKR, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_FO6J, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_7S28, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// Class OnlineSubsystemUtils.PartyBeaconState
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_KQHA, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_OJB7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// Class OnlineSubsystemUtils.QuitMatchCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_OOHR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// Class OnlineSubsystemUtils.ShowLoginUICallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_E8BV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// Class OnlineSubsystemUtils.SpectatorBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_MP1U, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_48W3, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// Class OnlineSubsystemUtils.SpectatorBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_SLVW, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_5ZFQ, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_2K58, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// Class OnlineSubsystemUtils.SpectatorBeaconState
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_18RQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_DXOG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// Class OnlineSubsystemUtils.TestBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// Class OnlineSubsystemUtils.TestBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// Class OnlineSubsystemUtils.TurnBasedBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.VoipListenerSynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_GELU, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_MP_NP01.BP_Laundromat_MP_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_MP_NP01__BP_Laundromat_MP_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_MP_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_StoreEmptyFillerImage.BP_StoreEmptyFillerImage_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StoreEmptyFillerImage__BP_StoreEmptyFillerImage_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StoreEmptyFillerImage_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass BP_EventSlot.BP_EventSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EventSlot__BP_EventSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventSlot_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventSlot_C, Event_Icon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EventSlot_C, EventMeter, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EventSlot_C, 0x02E8);
		}

		// BlueprintGeneratedClass LootCase_Open_PlayWidgetAnimations.LootCase_Open_PlayWidgetAnimations_C
		TEST_METHOD(BlueprintGeneratedClass__LootCase_Open_PlayWidgetAnimations__LootCase_Open_PlayWidgetAnimations_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootCase_Open_PlayWidgetAnimations_C, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_SP_NP02.BP_Casino_SP_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_SP_NP02__BP_Casino_SP_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_SP_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_SP_NP02_C, 0x0390);
		}

		// Class GeometryCacheTracks.MovieSceneGeometryCacheSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0128);
		}

		// Class GeometryCacheTracks.MovieSceneGeometryCacheTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, UnknownData_H9YX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0090);
		}

		// WidgetBlueprintGeneratedClass BP_Boost_Rewards.BP_Boost_Rewards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Boost_Rewards__BP_Boost_Rewards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, FUE_Rewards_IN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item1_Body, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item1_Thumbnail, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item1_Title, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item2_Body, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item2_Thumbnail, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item2_Title, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item3_Body, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item3_Thumbnail, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, Item3_Title, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Boost_Rewards_C, AffiliationArray, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Boost_Rewards_C, 0x02C8);
		}

		// WidgetBlueprintGeneratedClass BP_GameplayNotification.BP_GameplayNotification_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameplayNotification__BP_GameplayNotification_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, GamePlayNotification_IN, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, Image_125, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, NotificationText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, Safeframe, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, ShowDuration, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, UnknownData_5YAQ, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, PotResolutionFormat, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameplayNotification_C, WinningSeats, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameplayNotification_C, 0x03F8);
		}

		// Class EyeTracker.EyeTrackerFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// Class AssetTags.AssetTagsSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// WidgetBlueprintGeneratedClass BP_GameLobby.BP_GameLobby_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameLobby__BP_GameLobby_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameLobby_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameLobby_C, Image_111, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameLobby_C, TempAxis, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameLobby_C, 0x039C);
		}

		// Class Slate.ButtonWidgetStyle
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// Class Slate.CheckBoxWidgetStyle
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// Class Slate.ComboBoxWidgetStyle
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// Class Slate.ComboButtonWidgetStyle
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// Class Slate.EditableTextBoxWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// Class Slate.EditableTextWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// Class Slate.ProgressWidgetStyle
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// Class Slate.ScrollBarWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// Class Slate.ScrollBoxWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// Class Slate.SlateSettings
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_HPFV, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// Class Slate.SpinBoxWidgetStyle
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// Class Slate.TextBlockWidgetStyle
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// Class Slate.ToolMenuBase
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// BlueprintGeneratedClass Shell.Shell_C
		TEST_METHOD(BlueprintGeneratedClass__Shell__Shell_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, HasSetPosition, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, UnknownData_YYNB, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, ShellCamDest_Main_ExecuteUbergraph_Shell_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, BP_3D_BackPanel_C_0_ExecuteUbergraph_Shell_RefProperty, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, VirtualScreenRoot_ExecuteUbergraph_Shell_RefProperty, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, BountyShellCamera_1_ExecuteUbergraph_Shell_RefProperty, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell_C, KeyLight_ExecuteUbergraph_Shell_RefProperty, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShell_C, 0x0260);
		}

		// WidgetBlueprintGeneratedClass BP_TimedChallengePanel.BP_TimedChallengePanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TimedChallengePanel__BP_TimedChallengePanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, ChallengePanel_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, ChallengePanel_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, BackPanel, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, Challenges_Menu, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, DailyChallenge1, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, DailyChallenge2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, DailyChallenge3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, Image_2317, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, Image_2318, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, Splatter, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, SplatterDirectioinal, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TimedChallengePanel_C, WeeklyChallenge, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TimedChallengePanel_C, 0x03F0);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_MP_NP02.BP_Casino_MP_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_MP_NP02__BP_Casino_MP_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_MP_NP02_C, 0x0390);
		}

		// Class ClothingSystemRuntimeCommon.ClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// Class ClothingSystemRuntimeCommon.ClothSharedConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// Class ClothingSystemRuntimeCommon.ClothingAssetCustomData
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// Class ClothingSystemRuntimeCommon.ClothingAssetCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_QITH, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_5P5Z, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// Class ClothingSystemRuntimeCommon.ClothLODDataCommon_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_GDLS, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// Class OnlineSubsystemSteam.SteamAuthComponentModuleInterface
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// Class OnlineSubsystemSteam.SteamNetConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_1DQT, 0x1B91);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1B98);
		}

		// Class OnlineSubsystemSteam.SteamNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_E22R, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07C0);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_MP_NP03.BP_Laundromat_MP_NP03_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_MP_NP03__BP_Laundromat_MP_NP03_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_MP_NP03_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_MP_NP03_C, 0x0390);
		}

		// BlueprintGeneratedClass BP_GameClient.BP_GameClient_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameClient__BP_GameClient_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GameClient_C, DefaultSceneRoot, 0x0AB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GameClient_C, 0x0AB8);
		}

		// Class ClothingSystemRuntimeInterface.ClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// Class ClothingSystemRuntimeInterface.ClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// Class ClothingSystemRuntimeInterface.ClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_NFW3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// Class ClothingSystemRuntimeInterface.ClothSharedSimConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// Class ClothingSystemRuntimeInterface.ClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// Class ClothingSystemRuntimeInterface.ClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_ULZF, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// WidgetBlueprintGeneratedClass BP_PresetCancelButton.BP_PresetCancelButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PresetCancelButton__BP_PresetCancelButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PresetCancelButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PresetCancelButton_C, BTN_Cancel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PresetCancelButton_C, Button_RestoreDefaults, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PresetCancelButton_C, Color, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PresetCancelButton_C, seat, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PresetCancelButton_C, 0x028C);
		}

		// WidgetBlueprintGeneratedClass BP_LoginMessage.BP_LoginMessage_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LoginMessage__BP_LoginMessage_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Message_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Message_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, BlueSplatter, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Btn_Continue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Content, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtBrush01, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtBrush02, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtBrush03, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtBrush04, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, DirtFrame2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, GameLogo, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_138, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_918, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_5721, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_6418, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_8806, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_11053, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_11101, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12449, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12450, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12451, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12472, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12474, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12476, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12478, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12480, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12481, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12482, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12483, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12484, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12485, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12486, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12487, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12488, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12489, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12490, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12491, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12492, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12493, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12494, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12495, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12496, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12497, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12498, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12499, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12500, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12501, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12502, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12503, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12504, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12505, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12506, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12507, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12508, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12509, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12510, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12511, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12512, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12513, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12514, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12515, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Image_12516, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Panel_Group, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, PanelMenuRotate, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Ring_Back, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, Ring_Outer, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LoginMessage_C, LoginMessageSeenDispatcher, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LoginMessage_C, 0x05C0);
		}

		// Class TcpMessaging.TcpMessagingSettings
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_TSD2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_THXD, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// WidgetBlueprintGeneratedClass BP_AffiliationReward.BP_AffiliationReward_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AffiliationReward__BP_AffiliationReward_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, Background, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, ClosedShader, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, Image_3227, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, Overlay_25, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, RewardImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, TB_Reward_Name, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, TextBlock_218, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AffiliationReward_C, Data, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AffiliationReward_C, 0x0308);
		}

		// BlueprintGeneratedClass BP_RotatingFanBlade01.BP_RotatingFanBlade01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RotatingFanBlade01__BP_RotatingFanBlade01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingFanBlade01_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingFanBlade01_C, ceilingfan_blade_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingFanBlade01_C, Scene1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingFanBlade01_C, Roll_Per_Second, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RotatingFanBlade01_C, 0x023C);
		}

		// WidgetBlueprintGeneratedClass BP_ControlsScreen.BP_ControlsScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ControlsScreen__BP_ControlsScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Controls_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Controls_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, BackBar, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, BP_BackButton_C_47, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, BP_ButtonCallout_C_5, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, BP_ButtonCallout_C_7, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Btn_NextCategory, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Btn_PrevCategory, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, ControlsList, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_55, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_612, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_613, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_614, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_615, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_616, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1165, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1166, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1167, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1169, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1170, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1173, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1174, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1175, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1176, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1177, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1178, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1179, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1180, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_1182, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2507, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2512, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2513, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2514, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2515, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2518, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2519, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2520, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2522, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2523, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2524, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2525, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2526, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2527, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2528, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2530, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2531, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_2532, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4342, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4463, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4991, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4992, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4993, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4994, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4995, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_4996, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_5410, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_5411, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_5414, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_5424, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_5427, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_9595, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_9596, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_14272, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_14273, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_14274, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_16257, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_16258, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_17709, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_17710, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19552, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19553, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19554, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19555, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19556, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19557, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19558, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19559, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19560, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19561, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19562, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19563, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19564, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19565, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19566, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19567, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19568, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19569, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19570, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19571, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19572, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19573, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_19574, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21550, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21551, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21552, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21553, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21554, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21555, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21556, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21557, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21558, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21559, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21560, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21561, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21562, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21563, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21564, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21565, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21566, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21567, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21568, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21569, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21570, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21571, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_21572, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27739, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27740, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27741, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27744, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27745, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27746, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27747, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27748, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27749, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27750, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27752, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27753, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27754, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27755, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27758, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27759, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_27760, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_29600, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_29601, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_29602, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_29603, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_34695, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_34696, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_34698, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_34699, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39797, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39798, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39799, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39800, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39801, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39802, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39803, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39804, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39805, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39806, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39807, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39808, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39809, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39810, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39811, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39812, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39813, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39814, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39815, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39816, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39817, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39818, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39819, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39820, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Image_39821, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Line_ESC, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Line_LeftMouse_BTN, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Line_MiddleBouseBTN, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, MenuSubtitle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PC_controllerGroup, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PC_Keyboard, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PC_MenuControls, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PC_Mouse, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PC_TableControls, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PS4_Controller, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PS4_ControllerGroup, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PS4_MenuControls, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PS4_TableControls, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, Safeframe, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, STEAM_ControllerGroup, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, STEAM_MenuControls, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, STEAM_TableControls, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, TableSubtitle, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, TB_Controls_Header, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, XBOX1_ControllerGroup, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, XBOX_MenuControls, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, XBOX_TableControls, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, CurrentControllerGroup, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, inTableMenu, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, UnknownData_H1U1, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, TableControlItems, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, MenuControlItems, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ControlsScreen_C, PageSound, 0x0A18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ControlsScreen_C, 0x0A20);
		}

		// WidgetBlueprintGeneratedClass BP_AvatarAssetSelector.BP_AvatarAssetSelector_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AvatarAssetSelector__BP_AvatarAssetSelector_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SlotAnimation_END, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SlotAnimation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, ScrollDownAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, ScrollUpAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Border, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option0, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option5, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option6, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option7, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Option8, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SelectedOption, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, VerticalBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, Options, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, ItemSelected, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, CurrentIndex, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, PageSpeed, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, CenterOffset, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, TextureSize, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SelectedBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, NormalBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, UpQueue, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, DownQueue, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, HasFocus, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, HasAnimatedHover, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, RandomUp, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, UnknownData_0RB3, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, RandomMax, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SlotDelay, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, SpinTimeLeft, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, HoverSound, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, ChangeSound, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, CanRandomize, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, HasOptionBGs, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, UnknownData_WD5J, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, parentScreen, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AvatarAssetSelector_C, ItemDisplayName, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AvatarAssetSelector_C, 0x0498);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_ClickMenu.BP_InGame_ClickMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_ClickMenu__BP_InGame_ClickMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUE_TableStandings_Glow, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUE_Emotes_Glow, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUE_Collapse_Glow, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, ClickMenu_OUT, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, ClickMenu_IN, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, BackBar, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_CollapseMenu, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_Emotes, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_HandRankings, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_JoinChat, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_LeaveChat, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_Pause, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_Shop, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Btn_TableStandings, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUECollapseGlow, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUEEmotesGlow, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, FUETableStandingsGlow, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_1200, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_5928, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_5929, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_5931, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_5934, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Image_5937, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, JoinChatIcon, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, LeaveChatIcon, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, Splat, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnableCollapse, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnablePause, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnableEmotes, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnableShop, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnableTableStandings, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EnableHandRankings, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, CollapseGlowVisibility, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EmoteGlowVisibility, 0x046F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, TableStandingsGlowVisibility, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_ClickMenu_C, EmoteShouldGlow, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_ClickMenu_C, 0x0472);
		}

		// WidgetBlueprintGeneratedClass BP_Leaderboard_Menu.BP_Leaderboard_Menu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Leaderboard_Menu__BP_Leaderboard_Menu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Nav_RankedTournaments, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, ComingSoon_LOOP, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Nav_RankedHeadToHead, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Nav_CasualTournaments, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Nav_CasualRingGames, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Nav_Bankroll, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, BtnSelect_LOOP, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, HelpAndOptions_OUT, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, HelpAndOptions_IN, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, BackBar, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, BP_BackButton_C_18, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, BP_SelectButton_C_27, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Btn_Bankroll, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Btn_Casual_RingGames, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Btn_Casual_Tournaments, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Btn_Ranked_Head_To_Head, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Btn_Ranked_Tournaments, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, LeaderBoardList, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, Safeframe, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_Menu_C, WhiteMenu_BACK, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leaderboard_Menu_C, 0x04C0);
		}

		// WidgetBlueprintGeneratedClass BP_Shop_Items.BP_Shop_Items_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Shop_Items__BP_Shop_Items_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, UberGraphFrame, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Shop_OUT, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Shop_IN, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Back1, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BackBar, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_BackButton_C_18, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_1, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_5, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_7, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_89, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_90, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_195, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_ButtonCallout_C_196, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_GenericLoading2, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BP_StoreItemContainer, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_Buy, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_Gift, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_NextCategory, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_PageLeft, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_PageRight, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_PrevCategory, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Btn_Refill, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Buy_Group, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, BuyPrice, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, CategoryTitle, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Chip_Icon, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, ChipStackValue, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, DescriptionGlow, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, DetailedDescription, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Details, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Downloading_Group, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, EmptyMessage, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, HandsRemaining, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, HorizontalBox_55, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, HorizontalBox_56, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, HorizontalBox_57, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_1, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_2, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_169, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_170, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_259, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_676, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_902, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_1718, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_6033, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_6150, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Image_6210, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, ItemDescriptionTitle, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, LBL_BUY, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, MouseBlocker, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Nav_Buttons, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Overlay_1179, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Overlay_1369, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, PageNumber, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, PriceLabel, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Purchase, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, ReFill_Group, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, RefillLabel, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, RefillPrice, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, SAFE_FRAME, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Slash_Line_Buy, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Slash_Line_Refill, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Slash_Tag_Buy, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Slash_Tag_Refill, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, SlashBuy, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, SlashRefill, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Subcategory, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Subcategory_Type, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, Text_Installing, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, TextBlock_960, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, TitleBox, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, TXT_BaseChipAmount, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, TXT_ChipBonusAmount, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shop_Items_C, TXT_ChipBundleAmount, 0x0CA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shop_Items_C, 0x0CB0);
		}

		// BlueprintGeneratedClass BP_3D_ChipStack.BP_3D_ChipStack_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_ChipStack__BP_3D_ChipStack_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ChipStack_C, Widget, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ChipStack_C, Scene, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_ChipStack_C, 0x0230);
		}

		// WidgetBlueprintGeneratedClass BP_Community.BP_Community_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Community__BP_Community_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BtnSelect_LOOP, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Community_OUT, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Community_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BackBar, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BG_White, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BP_BackButton, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BP_BackButton_C_18, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BP_ButtonCallout_C_1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, BP_SelectButton_C_27, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Btn_Continue, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Btn_EventCalender, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Btn_News, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Button01, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Button02, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, Button03, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, CommunityList, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, DirtBrush01, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, DirtBrush02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, DirtBrush03, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, DirtBrush04, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, DirtFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Community_C, WhiteMenu_BACK, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Community_C, 0x04D0);
		}

		// Class GameplayTags.BlueprintGameplayTagLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// Class GameplayTags.GameplayTagAssetInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// Class GameplayTags.EditableGameplayTagQuery
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_SSTS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AnyTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AllTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_NoTagsMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AnyExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_AllExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// Class GameplayTags.EditableGameplayTagQueryExpression_NoExprMatch
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// Class GameplayTags.GameplayTagsManager
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_M31S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_I0CS, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_G1F3, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// Class GameplayTags.GameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// Class GameplayTags.RestrictedGameplayTagsList
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// Class GameplayTags.GameplayTagsSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_CL5S, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// Class GameplayTags.GameplayTagsDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// BlueprintGeneratedClass BP_AvatarAssets.BP_AvatarAssets_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AvatarAssets__BP_AvatarAssets_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AvatarAssets_C, DefaultSceneRoot, 0x0870);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AvatarAssets_C, 0x0878);
		}

		// WidgetBlueprintGeneratedClass BP_LevelSelect.BP_LevelSelect_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LevelSelect__BP_LevelSelect_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, ArrowPulse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, StoryMode_OUT, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, StoryMode_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Arrow_01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Atrrow_02, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BackBar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Bar_Arrows, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BarMouseButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BarSubCanvas, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BG_White, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_3, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_9, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_10, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_11, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_12, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_ButtonCallout_C_13, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BP_SelectButton, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, BTN_02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Bar, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Casino, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Laundry, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Mayor, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Penthouse, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Btn_Slaughter, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, ButcherShopComingSoonText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, CanvasPanel, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Casino_Arrows, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, CasinoMouseButton, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, CasinoShader, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, CasinoSubCanvas, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, GameLogo, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_5, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_6, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_1243, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_1280, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_1321, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2176, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2284, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2516, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2565, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2945, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_2990, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_3035, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_3307, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4019, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4020, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4347, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4553, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4766, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_4963, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_6418, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8336, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8337, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8359, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8360, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8361, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8362, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8419, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8420, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8502, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8503, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8588, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8674, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_8806, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_11245, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_11250, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_11251, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_11252, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_11253, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_12855, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_13687, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_14360, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_15189, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_16751, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_16825, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_17873, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_17937, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_18333, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_19057, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_20320, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_20410, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_20500, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_20591, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Image_20683, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Laundry_Arrows, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, LaundryMouseButton, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, LaundrySubCanvas, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Level_List, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Mayor_Arrows, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, MayorMouseButton, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, MayorSubCanvas, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Panel_Template, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Penthouse_Arrows, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, PenthouseComingSoonText, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, PenthouseMouseButton, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, PenthouseSubCanvas, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, PenthouseSubCanvas_DIM, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Safeframe, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Slaughterhouse_Arrows, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, SlaughterMouseButton, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, SlaughterSubCanvas, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, SlaughterSubCanvas_DIM, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, Furthest_Unlocked, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, InSubMenu, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, UnknownData_FAZ3, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, SelectedButton, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, SubMenuScreen, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelect_C, FUEDelay, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LevelSelect_C, 0x076C);
		}

		// Class OnlineSubsystem.NamedInterfaces
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_T56H, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// Class OnlineSubsystem.TurnBasedMatchInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_TitleScreen.BP_TitleScreen_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TitleScreen__BP_TitleScreen_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, UberGraphFrame, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Notice_IN, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, ByPassDaily_OUT, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Title_OUT, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, ChipRotate_LOOP, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Title_IN, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, StartButton, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, BG_White, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, BlueSplatter, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, BP_ButtonCallout, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, BP_GenericLoading2, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Btn_Signin, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtBrush01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtBrush02, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtBrush03, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtBrush04, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtFrame, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, DirtFrame2, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, EnteringMessage, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, GameLogo, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_2, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_127, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_918, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_5721, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_6418, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_8806, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_11053, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_11101, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12449, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12450, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12451, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12472, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12474, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12476, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12478, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12480, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12481, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12482, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12483, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12484, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12485, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12486, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12487, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12488, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12489, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12490, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12491, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12492, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12493, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12494, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12495, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12496, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12497, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12498, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12499, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12500, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12501, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12502, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12503, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12504, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12505, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12506, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12507, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12508, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12509, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12510, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12511, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12512, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12513, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12514, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12515, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Image_12516, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, LoadingText, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Notice, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Panel_Group, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, PanelMenuRotate, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Ring_Back, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Ring_Outer, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Safeframe, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Version, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Xbox_ActiveUsername, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, ProfileReceived, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, RomReceived, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, UnknownData_GUP5, 0x072A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, Message, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, LaunchMovieTimerHandle, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TitleScreen_C, ClientOutOfDate, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TitleScreen_C, 0x0751);
		}

		// Class ChaosSolverEngine.ChaosDebugDrawComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_D8B6, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// Class ChaosSolverEngine.ChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_JA9A, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// Class ChaosSolverEngine.ChaosGameplayEventDispatcher
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_YOW9, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_9FYE, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// Class ChaosSolverEngine.ChaosNotifyHandlerInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// Class ChaosSolverEngine.ChaosSolverEngineBlueprintLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// Class ChaosSolverEngine.ChaosSolver
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// Class ChaosSolverEngine.ChaosSolverActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_KXH9, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_IZXG, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_GLCN, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_WYYU, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_D1YX, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_Z508, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_6B15, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// Class ChaosSolverEngine.ChaosSolverSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_KYLY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// Class ActorLayerUtilities.LayersBlueprintLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// Class AudioExtensions.SoundfieldEncodingSettingsBase
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// Class AudioExtensions.AudioEndpointSettingsBase
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// Class AudioExtensions.SpatializationPluginSourceSettingsBase
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// Class AudioExtensions.OcclusionPluginSourceSettingsBase
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// Class AudioExtensions.ReverbPluginSourceSettingsBase
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// Class AudioExtensions.SoundModulatorBase
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// Class AudioExtensions.SoundfieldEndpointSettingsBase
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// Class AudioExtensions.SoundfieldEffectSettingsBase
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// Class AudioExtensions.SoundfieldEffectBase
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// WidgetBlueprintGeneratedClass BP_GenericLoading.BP_GenericLoading_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GenericLoading__BP_GenericLoading_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, GenericLoading_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, GenericLoading_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, BP_GenericLoading2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, CountdownBox, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, Default_Black, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, DirtBrush01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, DirtBrush02, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, DirtBrush03, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, DirtBrush04, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, DirtFrame2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GenericLoading_C, Safeframe, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GenericLoading_C, 0x0478);
		}

		// WidgetBlueprintGeneratedClass BP_StatSlot.BP_StatSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatSlot__BP_StatSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatSlot_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatSlot_C, Image_2888, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatSlot_C, Label, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatSlot_C, Value, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatSlot_C, 0x0290);
		}

		// WidgetBlueprintGeneratedClass BP_MyCareer.BP_MyCareer_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MyCareer__BP_MyCareer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Nav_Affiliation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Nav_Persona, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Nav_RapSheet, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BtnSelect_LOOP, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, MyCareer_OUT, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, MyCareer_IN, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BackBar, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BG_White, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BP_BackButton, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BP_BackButton_C_18, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, BP_SelectButton_C_27, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Btn_EditAppearance, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Btn_PrestigeShop, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Btn_RapSheet, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Button01, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Button02, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, Button03, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, DirtBrush01, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, DirtBrush02, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, DirtBrush03, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, DirtBrush04, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, DirtFrame, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, MyCareerList, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MyCareer_C, WhiteMenu_BACK, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MyCareer_C, 0x04E0);
		}

		// WidgetBlueprintGeneratedClass BP_ImageOption.BP_ImageOption_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ImageOption__BP_ImageOption_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, ButtonFocus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, SelectLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Arrow_Btn_Next, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Arrow_Btn_Prev, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border_7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border0, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Border4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Button0, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Button1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Button2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Button3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Button4, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Image_6958, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, SelectBorder, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, TB_CurrentLabel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Styles, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Buttons, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, CurrentIndex, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, UnknownData_71QX, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, Borders, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, SelectedBrush, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, NormalBrush, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, HoverSound, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, ChangeSound, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, OptionChanged, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, IsMouseHovered, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, UnknownData_T3U0, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, TextLabel, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ImageOption_C, IsFocused, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ImageOption_C, 0x0481);
		}

		// WidgetBlueprintGeneratedClass BP_Rival_Profiler.BP_Rival_Profiler_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Rival_Profiler__BP_Rival_Profiler_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, BG_White, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, BTN_SendRespects, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Button_Enter, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, DirtBrush01, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, DirtBrush02, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, DirtBrush03, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, DirtBrush04, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, DirtFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Frame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Gradient, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_1152, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5293, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5661, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5677, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5810, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5828, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5864, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5865, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5952, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5953, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5977, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_5978, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6371, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6372, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6373, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6374, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6375, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6376, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6377, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Image_6378, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rival_Profiler_C, Pointer, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rival_Profiler_C, 0x0480);
		}

		// WidgetBlueprintGeneratedClass BP_RewardIconContent.BP_RewardIconContent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RewardIconContent__BP_RewardIconContent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, GenderImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, RewardIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RewardIconContent_C, Reward, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RewardIconContent_C, 0x02F8);
		}

		// BlueprintGeneratedClass BP_BountyGameInstance.BP_BountyGameInstance_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BountyGameInstance__BP_BountyGameInstance_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyGameInstance_C, UberGraphFrame, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyGameInstance_C, LoadLevelEventDispatcher, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyGameInstance_C, LoadLevelCompleteEventDispatcher, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyGameInstance_C, UnloadLevelEventDispatcher, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BountyGameInstance_C, Unloading, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BountyGameInstance_C, 0x04D9);
		}

		// WidgetBlueprintGeneratedClass BP_UpcomingEventPanel.BP_UpcomingEventPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_UpcomingEventPanel__BP_UpcomingEventPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, BP_RadialMeter_123, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, Image_780, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, Image_6777, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, TextBlock_2321, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, TextBlock_2356, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, TextBlock_2357, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, Title, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, StartDate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_UpcomingEventPanel_C, EndDate, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_UpcomingEventPanel_C, 0x02D8);
		}

		// AnimBlueprintGeneratedClass BP_RndAnim_M.BP_RndAnim_M_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_RndAnim_M__BP_RndAnim_M_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_M_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_M_C, AnimGraphNode_Root, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_M_C, AnimGraphNode_Slot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RndAnim_M_C, AnimGraphNode_LocalRefPose, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RndAnim_M_C, 0x03A8);
		}

		// Class MotoSynth.MotoSynthPreset
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// Class MotoSynth.MotoSynthSource
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_REA3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_G5QJ, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_37BY, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// Class MotoSynth.SynthComponentMoto
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_MSTI, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// Class UMG.Visual
		TEST_METHOD(Class__UMG__Visual)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// Class UMG.Widget
		TEST_METHOD(Class__UMG__Widget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_DL51, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_LOQY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// Class UMG.UserWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_AKVQ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FBWJ, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_9S5L, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_REJ7, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_9PCA, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// Class UMG.PanelWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_RK5P, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// Class UMG.ContentWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// Class UMG.Button
		TEST_METHOD(Class__UMG__Button)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_ABPL, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_4BJC, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// Class UMG.AsyncTaskDownloadImage
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// Class UMG.BackgroundBlur
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_QV7M, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_Z8MX, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_UBDP, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// Class UMG.PanelSlot
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// Class UMG.BackgroundBlurSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_7YCZ, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// Class UMG.PropertyBinding
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// Class UMG.BoolBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// Class UMG.Border
		TEST_METHOD(Class__UMG__Border)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_XJUJ, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_1PG6, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_TH1U, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_758B, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// Class UMG.BorderSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_4HNT, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// Class UMG.BrushBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_CTOG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// Class UMG.ButtonSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_B29O, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// Class UMG.CanvasPanel
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_W9Y3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// Class UMG.CanvasPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_ODAO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_AUE6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// Class UMG.CheckBox
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_87R0, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_C3RR, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_4RAL, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_OI4K, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_KHJM, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_SNSN, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// Class UMG.CheckedStateBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_A6LE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// Class UMG.CircularThrobber
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_C5F9, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_RWE7, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// Class UMG.ColorBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_YO7H, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// Class UMG.ComboBox
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_LHUA, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// Class UMG.ComboBoxString
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_L1UR, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_OIER, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_892L, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_0T1F, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// Class UMG.DragDropOperation
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_LQVW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_OMJL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// Class UMG.DynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_I9VP, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_KC60, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_II10, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_WMYC, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// Class UMG.DynamicEntryBox
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// Class UMG.EditableText
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_VXSO, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_E9G6, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_V301, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// Class UMG.EditableTextBox
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_2PLF, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_P2AW, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_JJPG, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// Class UMG.ExpandableArea
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_D63Q, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_JN1R, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_TOZ5, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// Class UMG.FloatBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// Class UMG.GridPanel
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_TAYW, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// Class UMG.GridSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_MZ9Q, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_X73Y, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// Class UMG.HorizontalBox
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_MS0W, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// Class UMG.HorizontalBoxSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_1QWI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_Q8OU, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// Class UMG.Image
		TEST_METHOD(Class__UMG__Image)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_ZH7F, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_RYXT, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// Class UMG.InputKeySelector
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_9HJ2, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_Y2W4, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// Class UMG.Int32Binding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// Class UMG.InvalidationBox
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_HHV0, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// Class UMG.UserListEntry
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// Class UMG.UserListEntryLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// Class UMG.UserObjectListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// Class UMG.UserObjectListEntryLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// Class UMG.ListViewBase
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_16OG, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_GDK8, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_YXEY, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// Class UMG.ListView
		TEST_METHOD(Class__UMG__ListView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_PA6L, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_XUCK, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_1Q99, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_JOK2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// Class UMG.ListViewDesignerPreviewItem
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// Class UMG.MenuAnchor
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_KEX6, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_QSR6, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// Class UMG.MouseCursorBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// Class UMG.MovieScene2DTransformPropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// Class UMG.MovieScene2DTransformSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_DOM0, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_LVAQ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// Class UMG.MovieScene2DTransformTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// Class UMG.MovieSceneMarginSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// Class UMG.MovieSceneMarginTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_A5P0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// Class UMG.MovieSceneWidgetMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_2A6D, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// Class UMG.TextLayoutWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_V2WV, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// Class UMG.MultiLineEditableText
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_UU6C, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_YET9, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_BEB9, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// Class UMG.MultiLineEditableTextBox
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_ISH0, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_WC42, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// Class UMG.NamedSlot
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_C8HT, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// Class UMG.NamedSlotInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// Class UMG.NativeWidgetHost
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_9IGY, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// Class UMG.Overlay
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_G0M9, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// Class UMG.OverlaySlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_C33B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_S9AN, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// Class UMG.ProgressBar
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_JQDD, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_PG9V, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// Class UMG.RetainerBox
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_DX85, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_K1T2, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_5VPB, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// Class UMG.RichTextBlock
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_4IQK, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_FIQW, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_7CQ3, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// Class UMG.RichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// Class UMG.RichTextBlockImageDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// Class UMG.SafeZone
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_QOHZ, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// Class UMG.SafeZoneSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_XBDA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_UMH4, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// Class UMG.ScaleBox
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_2SH4, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_Y3E1, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// Class UMG.ScaleBoxSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_8DNZ, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// Class UMG.ScrollBar
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_3RDB, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_YFPX, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// Class UMG.ScrollBox
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_7QNM, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_CA76, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_E2C7, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_0QZ6, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// Class UMG.ScrollBoxSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_D3Y3, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// Class UMG.SizeBox
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_8NBO, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_MY3G, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// Class UMG.SizeBoxSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_YO6O, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_ORFV, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// Class UMG.SlateBlueprintLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// Class UMG.SlateVectorArtData
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// Class UMG.SlateAccessibleWidgetData
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_1SVY, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// Class UMG.Slider
		TEST_METHOD(Class__UMG__Slider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_D1ZA, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_ITIV, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_YYTC, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_SBQ4, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// Class UMG.Spacer
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_1B3O, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// Class UMG.SpinBox
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_5DVM, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_RZOA, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_FYUA, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_E1QW, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_I9MB, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GPME, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_OEIH, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// Class UMG.TextBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_EP7A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// Class UMG.TextBlock
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_11LO, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// Class UMG.Throbber
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_0JZ2, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_YD0R, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// Class UMG.TileView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_62OD, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// Class UMG.TreeView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_OMCO, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_DC07, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// Class UMG.UMGSequencePlayer
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_A1VC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_ZOW6, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_DIV5, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// Class UMG.UMGSequenceTickManager
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_5BR6, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// Class UMG.UniformGridPanel
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_NZDA, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// Class UMG.UniformGridSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_9XYR, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_0HPA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// Class UMG.VerticalBox
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_8QZC, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// Class UMG.VerticalBoxSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_WOFL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_CGNX, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// Class UMG.Viewport
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_1QWB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// Class UMG.VisibilityBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// Class UMG.WidgetAnimation
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_3TG6, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// Class UMG.WidgetAnimationDelegateBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// Class UMG.WidgetAnimationPlayCallbackProxy
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_LARK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// Class UMG.WidgetBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// Class UMG.WidgetBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_IWKO, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// Class UMG.WidgetBlueprintLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// Class UMG.WidgetComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_B7N5, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_PJ5U, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_9WBL, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_13BN, 0x04D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_JQFP, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_REJV, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_M5ZD, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_KG6B, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0590);
		}

		// Class UMG.WidgetInteractionComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_GPCI, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_7G35, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_CNG5, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_9SC5, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_DLZ8, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_LPZE, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// Class UMG.WidgetLayoutLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// Class UMG.WidgetNavigation
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// Class UMG.WidgetSwitcher
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_6X03, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// Class UMG.WidgetSwitcherSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_Q2J2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_T03S, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// Class UMG.WidgetTree
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// Class UMG.WindowTitleBarArea
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_W82E, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// Class UMG.WindowTitleBarAreaSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_UZ5R, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// Class UMG.WrapBox
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_GKS4, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// Class UMG.WrapBoxSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_EORH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_NDP5, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// WidgetBlueprintGeneratedClass BP_MainMenu.BP_MainMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MainMenu__BP_MainMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_LootCase, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, DailyCut_Loop, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, DailyCut_IN, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Installing_LOOP, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_HelpOptions, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_Community, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_LeaderBoard, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_MyCareer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_Shop, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Nav_Play, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, FUE_LOOP, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BtnSelect_LOOP, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MainMenu_OUT, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MainMenu_IN, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BackBar, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ButtonCallout_C_1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ButtonCallout_C_2, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ButtonCallout_C_14, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_ButtonCallout_C_560, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, BP_SelectButton, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_Exit, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_HelpOptions, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_LeaderBoard, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_LootCases, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_MyCareer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_Play, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_Profile, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_Quickplay, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Btn_Shop, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Button_1, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Button_DailyCut_Available, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Button_DailyCut_NotAvailable, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, DailyCutButton, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, FUE_GLOW, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_155, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_156, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_4347, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Image_4766, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, LBL_Daily_Cut_in, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Logo, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, MainMenuList, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, NextDailyCutTimer, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Safeframe, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, TextBlock_12, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, TextBlock_2256, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, WhiteMenu_BACK, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, Xbox_ActiveUsername, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainMenu_C, LBL_LootCases, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MainMenu_C, 0x05B0);
		}

		// WidgetBlueprintGeneratedClass BP_Toast.BP_Toast_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Toast__BP_Toast_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, ChallengeComplete_IN, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, ChallengeProgress_IN, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, AwardIcon, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, AwardIconComplete, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, AwardIconCompleteGlow, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, AwardIconGlow, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Back, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Challenge_Complete, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Challenge_Progress, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Directional, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Image_1541, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Image_3495, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Image_3496, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Image_3497, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Image_3498, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, ProgressMeter, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Safeframe, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, Splatter, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_1268, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_1269, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_1935, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2031, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2032, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2033, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2034, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2036, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2619, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, TextBlock_2633, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, ActionIcons, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, RewardTextVis, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Toast_C, RewardIconVis, 0x04C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Toast_C, 0x04C2);
		}

		// WidgetBlueprintGeneratedClass BP_StoreItemWidget.BP_StoreItemWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StoreItemWidget__BP_StoreItemWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, UberGraphFrame, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, AffiliationLockImage, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Boost_Border, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Equipped, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Featured, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, InnerRarityGlow, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Item, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, ItemButton, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Lock_Affiliation, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Lock_Border, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Lock_LootCase, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, OuterRarityGlow, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Owned, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Text_Boost_Percent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Text_Hands, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreItemWidget_C, Text_Lock, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StoreItemWidget_C, 0x0510);
		}

		// WidgetBlueprintGeneratedClass BP_CardReference.BP_CardReference_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CardReference__BP_CardReference_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, CardReference_OUT, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, CardReference_IN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _01RoyalFlush, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _02StraightFlush, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _03FourKind, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _04FullHouse, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _05Flush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _06Straight, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _07ThreeKind, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _08TwoPair, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _09Pair, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, _10HighCard, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Back, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, BP_ButtonCallout_C_240, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, BP_ButtonCallout_C_562, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, BP_ButtonCallout_C_563, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, BTN_CATEGORY, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, BTN_Close, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, CardRanks, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Directional, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_6852, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7441, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7472, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7489, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7506, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7524, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7543, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7563, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7584, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Image_7606, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Splatter, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, Template, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CardReference_C, ActionIcons, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CardReference_C, 0x04A0);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_H2H_NP01.BP_Casino_H2H_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_H2H_NP01__BP_Casino_H2H_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_H2H_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_H2H_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_Nicknames.BP_Nicknames_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Nicknames__BP_Nicknames_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, UberGraphFrame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Nicknames_OUT, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Nicknames_IN, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, BackBar, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, BP_BackButton_C_5, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, BP_ScrollBox, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, BP_SelectButton, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Grid, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Image_9528, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Image_9530, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, IsLockedText, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, LockedReasonText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, NicknameGroup, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Safeframe, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Splash_01, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Splash_02, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Splash_03, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, Splash_04, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, TextBlock_136, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, TextBlock_3806, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, InsertCol, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nicknames_C, InsertRow, 0x052C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Nicknames_C, 0x0530);
		}

		// BlueprintGeneratedClass BP_Sky_Sphere.BP_Sky_Sphere_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sky_Sphere__BP_Sky_Sphere_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, SkySphereMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Base, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sky_material, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Refresh_material, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_5LB9, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Directional_light_actor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Colors_determined_by_sun_position, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_YBOJ, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_height, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_brightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_falloff, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Overall_Color, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_speed, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_opacity, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Stars_brightness, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_B1XA, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color_curve, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color_curve, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color_curve, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sky_Sphere_C, 0x02C0);
		}

		// WidgetBlueprintGeneratedClass BP_Earrings.BP_Earrings_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Earrings__BP_Earrings_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Nav_RightEar, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Nav_LeftEar, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, BtnSelect_LOOP, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Earrings_OUT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Earrings_IN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, BackBar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, BG_White, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, BP_BackButton_C_18, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, BP_SelectButton_C_27, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Btn_LeftEar, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, Btn_RightEar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, DirtBrush01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, DirtBrush02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, DirtBrush03, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, DirtBrush04, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, DirtFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, EarringsList, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, WhiteMenu_BACK, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Earrings_C, ShopScreen, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Earrings_C, 0x04B8);
		}

		// WidgetBlueprintGeneratedClass BP_PlayMenu.BP_PlayMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_PlayMenu__BP_PlayMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Nav_SP_Casual, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Nav_SP_Story, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Nav_MP_Ranked, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Nav_MP_Casual, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Installing_LOOP, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, BtnSelect_LOOP, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, PlayMenu_OUT, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, PlayMenu_IN, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, BackBar, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, BP_SelectButton, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, BTN_02, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Btn_MP_Casual, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Btn_MP_Ranked, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Btn_SP_Casual, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, BTN_SP_Story, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, Playlist, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, WhiteMenu_BACK, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, LobbySetup, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayMenu_C, FUEDelay, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayMenu_C, 0x04BC);
		}

		// WidgetBlueprintGeneratedClass BP_Casino_MP_NP03.BP_Casino_MP_NP03_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Casino_MP_NP03__BP_Casino_MP_NP03_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Casino_MP_NP03_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Casino_MP_NP03_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_GameReference.BP_GameReference_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GameReference__BP_GameReference_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_Affiliations, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_Challenges, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_TurnTimers, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_TableActions, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_GameTypes, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_HandRankings, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Nav_TexasHoldem, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, GameReference_OUT, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, BtnSelect_LOOP, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, GameReference_IN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, BackBar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, BG_White, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, BP_BackButton_C_47, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, BP_ButtonCallout_C_560, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_Affiliations, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_Challenges, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_GameTypes, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_HandRankings, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_Scroll, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_TableActions, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_TexasHoldem, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Btn_TurnTimers, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Content, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, DirtBrush01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, DirtBrush02, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, DirtBrush03, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, DirtBrush04, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, DirtFrame, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, GameReferenceList, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Image_713, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Safeframe, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, WhiteMenu_BACK, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, InReference, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, UnknownData_2202, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameReference_C, Contents, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameReference_C, 0x0538);
		}

		// BlueprintGeneratedClass BP_VenueViewModel.BP_VenueViewModel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_VenueViewModel__BP_VenueViewModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VenueViewModel_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_VenueViewModel_C, LobbyBaseReference, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_VenueViewModel_C, 0x0058);
		}

		// WidgetBlueprintGeneratedClass BP_LootCase_CardWidget.BP_LootCase_CardWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LootCase_CardWidget__BP_LootCase_CardWidget_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, LootCase_CardWidget_OUT, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, LootCase_CardWidget_IN, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Back, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Border_3, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Face, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Glow, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Image, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, TextBlock_1, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, TextBlock_308, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, TextBlock_599, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Reward, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_CardWidget_C, Menu, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LootCase_CardWidget_C, 0x05D8);
		}

		// WidgetBlueprintGeneratedClass BP_Slider.BP_Slider_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Slider__BP_Slider_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, ButtonFocus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SelectLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Arrow_Btn_Next, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Arrow_Btn_Prev, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Border_178, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Button_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Image_6958, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, ProgressBar_EffectsVolume, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SelectBorder, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, Slider, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, TB_CurrentLabel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SliderPadding, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, WidgetPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, NormalBrush, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SelectedBrush, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SliderStyle, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, PrevButtonStyle, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, NextButtonStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, ChangeIncrement, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, MaxSliderValue, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, MinSliderValue, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, IsDiscrete, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, UnknownData_FL6M, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SliderUpdateDispatcher, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, PrevButtonTransform, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, NextButtonTransform, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, SliderValue, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, UnknownData_5CDL, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, HoverSound, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, ChangeSound, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, HasFocus, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, IsMouseHovered, 0x0C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, UnknownData_L45U, 0x0C92);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Slider_C, TextLabel, 0x0C98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Slider_C, 0x0CB0);
		}

		// Class TimeManagement.FixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// Class TimeManagement.GenlockedCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// Class TimeManagement.GenlockedTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_BDHO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// Class TimeManagement.TimeManagementBlueprintLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// Class TimeManagement.TimeSynchronizationSource
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_G39J, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// WidgetBlueprintGeneratedClass BP_GiftButton.BP_GiftButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GiftButton__BP_GiftButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, Glow_OUT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, Glow_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, BP_ButtonCallout_C_50, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, CanvasPanel_491, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, GiftButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, Image_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, Image_127, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GiftButton_C, Color, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GiftButton_C, 0x02B0);
		}

		// WidgetBlueprintGeneratedClass BP_CalendarDay.BP_CalendarDay_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CalendarDay__BP_CalendarDay_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, Button_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, DayText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, DisabledOverlay, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, EventTitleText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, Icon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, Events, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, date, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, HoveredBackground, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, NormalBackground, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, DaySelected, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, calendar, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, HoverSound, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CalendarDay_C, SelectSound, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CalendarDay_C, 0x02E8);
		}

		// Class AIModule.AIAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_85EG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// Class AIModule.AIBlueprintHelperLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// Class AIModule.AIController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_L75A, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_SN6N, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_Y8JI, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// Class AIModule.AIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// Class AIModule.AIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_X9YD, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// Class AIModule.AIDataProvider_Random
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_5HQB, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// Class AIModule.AIHotSpotManager
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// Class AIModule.AIPerceptionComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_PBFZ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_CYH9, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionInfoUpdated, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0190);
		}

		// Class AIModule.AIPerceptionListenerInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// Class AIModule.AIPerceptionStimuliSourceComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_VRV3, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// Class AIModule.AISubsystem
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_TP38, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// Class AIModule.AIPerceptionSystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_XI3M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_IPKH, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// Class AIModule.AIResourceInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// Class AIModule.AIResource_Movement
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// Class AIModule.AIResource_Logic
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// Class AIModule.AISense
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_T5RK, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_0B5A, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_B9L5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// Class AIModule.AISense_Blueprint
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// Class AIModule.AISense_Damage
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// Class AIModule.AISense_Hearing
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_I3X3, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// Class AIModule.AISense_Prediction
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// Class AIModule.AISense_Sight
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_FVWI, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_TK5Y, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_AMEV, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// Class AIModule.AISense_Team
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// Class AIModule.AISense_Touch
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// Class AIModule.AISenseBlueprintListener
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// Class AIModule.AISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_VAW2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// Class AIModule.AISenseConfig_Blueprint
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// Class AIModule.AISenseConfig_Damage
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// Class AIModule.AISenseConfig_Hearing
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_7KAS, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// Class AIModule.AISenseConfig_Prediction
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// Class AIModule.AISenseConfig_Sight
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PointOfViewBackwardOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, NearClippingRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_M2ON, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// Class AIModule.AISenseConfig_Team
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// Class AIModule.AISenseConfig_Touch
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// Class AIModule.AISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// Class AIModule.AISenseEvent_Damage
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// Class AIModule.AISenseEvent_Hearing
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// Class AIModule.AISightTargetInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// Class AIModule.AISystem
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAddBlackboardSelfKey, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_38MV, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_7OQU, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// Class AIModule.AITask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// Class AIModule.AITask_LockLogic
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// Class AIModule.AITask_MoveTo
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_RWM3, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// Class AIModule.AITask_RunEQS
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_YZ6J, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// Class AIModule.BehaviorTree
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_JROK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_SBLP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// Class AIModule.BrainComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_3XTR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_RWK9, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0108);
		}

		// Class AIModule.BehaviorTreeComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_6OHT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_R066, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_4F6X, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0298);
		}

		// Class AIModule.BehaviorTreeManager
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_4IBV, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// Class AIModule.BehaviorTreeTypes
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// Class AIModule.BlackboardAssetProvider
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// Class AIModule.BlackboardComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_BDNJ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_74G9, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// Class AIModule.BlackboardData
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_C1BO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// Class AIModule.BlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_LC1D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Bool
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Class
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Enum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_QXDZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// Class AIModule.BlackboardKeyType_Float
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Int
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Name
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_NativeEnum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// Class AIModule.BlackboardKeyType_Object
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Rotator
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_String
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// Class AIModule.BlackboardKeyType_Vector
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// Class AIModule.BTNode
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_4U80, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_XRUF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// Class AIModule.BTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_469D, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// Class AIModule.BTCompositeNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_BDMB, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_9MXI, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// Class AIModule.BTComposite_Selector
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// Class AIModule.BTComposite_Sequence
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// Class AIModule.BTComposite_SimpleParallel
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_9DF6, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// Class AIModule.BTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_XDF7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_K99F, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// Class AIModule.BTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// Class AIModule.BTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_YCCL, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// Class AIModule.BTDecorator_BlueprintBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_561P, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_IZ5C, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// Class AIModule.BTDecorator_CheckGameplayTagsOnActor
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_SN29, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// Class AIModule.BTDecorator_CompareBBEntries
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_HR97, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConditionalLoop
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConeCheck
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_2N6U, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_FVZG, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// Class AIModule.BTDecorator_Cooldown
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_5BDI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// Class AIModule.BTDecorator_DoesPathExist
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_1AJR, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_9YLO, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// Class AIModule.BTDecorator_ForceSuccess
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// Class AIModule.BTDecorator_IsAtLocation
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_M4W1, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_LY7S, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_2VSH, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// Class AIModule.BTDecorator_IsBBEntryOfClass
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// Class AIModule.BTDecorator_KeepInCone
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_7FT0, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_B9K1, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// Class AIModule.BTDecorator_Loop
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_58AW, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_31RN, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// Class AIModule.BTDecorator_ReachedMoveGoal
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// Class AIModule.BTDecorator_SetTagCooldown
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_5LJ9, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// Class AIModule.BTDecorator_TagCooldown
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_C4NP, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// Class AIModule.BTDecorator_TimeLimit
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_NQNQ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// Class AIModule.BTFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// Class AIModule.BTService
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_3VV9, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// Class AIModule.BTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// Class AIModule.BTService_BlueprintBase
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_JBDG, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_8POJ, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// Class AIModule.BTService_DefaultFocus
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_NJ9G, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// Class AIModule.BTService_RunEQS
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_0W98, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// Class AIModule.BTTaskNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_QOE0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// Class AIModule.BTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// Class AIModule.BTTask_BlueprintBase
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_NIV1, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_838J, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// Class AIModule.BTTask_FinishWithResult
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_ZW0D, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// Class AIModule.BTTask_GameplayTaskBase
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_8USC, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// Class AIModule.BTTask_MakeNoise
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_3I62, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// Class AIModule.BTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_7K6Y, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_5UJB, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// Class AIModule.BTTask_MoveDirectlyToward
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_754Z, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// Class AIModule.BTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// Class AIModule.BTTask_PlayAnimation
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_FS7M, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_0VEJ, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// Class AIModule.BTTask_PlaySound
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// Class AIModule.BTTask_PushPawnAction
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// Class AIModule.BTTask_RotateToFaceBBEntry
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_HQ22, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// Class AIModule.BTTask_RunBehavior
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// Class AIModule.BTTask_RunBehaviorDynamic
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// Class AIModule.BTTask_RunEQSQuery
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_56AT, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_GD9K, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_FFN5, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// Class AIModule.BTTask_SetTagCooldown
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_P1ZC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// Class AIModule.BTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// Class AIModule.BTTask_WaitBlackboardTime
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// Class AIModule.CrowdAgentInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// Class AIModule.PathFollowingComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_Q34V, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_BN6L, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_2VLV, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0250);
		}

		// Class AIModule.CrowdFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_Q6WO, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_YQ4P, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// Class AIModule.CrowdManager
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_K06Y, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// Class AIModule.DetourCrowdAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// Class AIModule.EnvQuery
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// Class AIModule.EnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// Class AIModule.EnvQueryContext_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_8N6Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// Class AIModule.EnvQueryContext_Item
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// Class AIModule.EnvQueryContext_Querier
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// Class AIModule.EnvQueryDebugHelpers
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// Class AIModule.EnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_YL6I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// Class AIModule.EnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_9W5C, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// Class AIModule.EnvQueryGenerator_ActorsOfClass
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// Class AIModule.EnvQueryGenerator_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_Q0HA, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// Class AIModule.EnvQueryGenerator_Composite
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_7CP9, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// Class AIModule.EnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// Class AIModule.EnvQueryGenerator_Cone
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_XN3K, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// Class AIModule.EnvQueryGenerator_CurrentLocation
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// Class AIModule.EnvQueryGenerator_Donut
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_E0ZF, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_1TI8, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// Class AIModule.EnvQueryGenerator_OnCircle
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_0WUW, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_ENGR, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_IKKN, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_71QD, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// Class AIModule.EnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// Class AIModule.EnvQueryGenerator_PathingGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// Class AIModule.EnvQueryInstanceBlueprintWrapper
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_491I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_WS8D, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_ZEA3, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// Class AIModule.EnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_T1Z6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Actor
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Direction
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Point
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// Class AIModule.EnvQueryManager
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_I4J6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_NHGD, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_K9WB, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// Class AIModule.EnvQueryOption
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// Class AIModule.EnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_MPFB, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_TBOT, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_IL01, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_JRV5, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UBEV, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_ZX2T, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// Class AIModule.EnvQueryTest_Distance
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_T7RB, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// Class AIModule.EnvQueryTest_Dot
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_TS3W, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// Class AIModule.EnvQueryTest_GameplayTags
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_40US, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// Class AIModule.EnvQueryTest_Overlap
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// Class AIModule.EnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_FFT2, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// Class AIModule.EnvQueryTest_PathfindingBatch
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// Class AIModule.EnvQueryTest_Project
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// Class AIModule.EnvQueryTest_Random
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// Class AIModule.EnvQueryTest_Trace
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// Class AIModule.EnvQueryTest_Volume
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_RCL1, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// Class AIModule.EnvQueryTypes
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// Class AIModule.EQSQueryResultSourceInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// Class AIModule.EQSRenderingComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_NTBO, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0480);
		}

		// Class AIModule.EQSTestingPawn
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_XFLL, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_24I4, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_F28X, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_TZTD, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// Class AIModule.GenericTeamAgentInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// Class AIModule.GridPathAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// Class AIModule.GridPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_AASM, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0280);
		}

		// Class AIModule.NavFilter_AIControllerDefault
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// Class AIModule.NavLinkProxy
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_MZPH, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_P5GH, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// Class AIModule.NavLocalGridManager
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_XN6Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// Class AIModule.PathFollowingManager
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// Class AIModule.PawnAction
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_GXST, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_SUX2, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// Class AIModule.PawnAction_BlueprintBase
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// Class AIModule.PawnAction_Move
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_A1LW, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// Class AIModule.PawnAction_Repeat
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_PAH8, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// Class AIModule.PawnAction_Sequence
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_QYWB, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_T69U, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// Class AIModule.PawnAction_Wait
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_XRTL, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// Class AIModule.PawnActionsComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_YSY3, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// Class AIModule.PawnSensingComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_WGWJ, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// Class AIModule.VisualLoggerExtension
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// Class CoreUObject.Object
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// Class CoreUObject.Interface
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// Class CoreUObject.GCObjectReferencer
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_RFWH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// Class CoreUObject.TextBuffer
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_YFLV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// Class CoreUObject.Field
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// Class CoreUObject.Struct
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// Class CoreUObject.ScriptStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_AQAR, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// Class CoreUObject.Package
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_0TGJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// Class CoreUObject.Class
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_W1VQ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// Class CoreUObject.Function
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_QA993L0NDQ, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_9RE5M35A35, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// Class CoreUObject.DelegateFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// Class CoreUObject.SparseDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_NMTR, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// Class CoreUObject.DynamicClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_HYBY, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// Class CoreUObject.PackageMap
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_W6YZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// Class CoreUObject.Enum
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_9DI2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// Class CoreUObject.LinkerPlaceholderClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_MA1E, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// Class CoreUObject.LinkerPlaceholderExportObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_60AD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// Class CoreUObject.LinkerPlaceholderFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_ZEYX, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// Class CoreUObject.MetaData
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_YFSB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// Class CoreUObject.ObjectRedirector
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_VJIA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// Class CoreUObject.Property
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_LDMY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// Class CoreUObject.EnumProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_DISH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// Class CoreUObject.ArrayProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_A0NA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// Class CoreUObject.ObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_L956, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// Class CoreUObject.BoolProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_JEML, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// Class CoreUObject.NumericProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// Class CoreUObject.ByteProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_K3HF, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// Class CoreUObject.ObjectProperty
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// Class CoreUObject.ClassProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_S3JP, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// Class CoreUObject.DelegateProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0070);
		}

		// Class CoreUObject.DoubleProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// Class CoreUObject.FloatProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// Class CoreUObject.IntProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// Class CoreUObject.Int8Property
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// Class CoreUObject.Int16Property
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// Class CoreUObject.Int64Property
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// Class CoreUObject.InterfaceProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_3X7A, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// Class CoreUObject.LazyObjectProperty
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// Class CoreUObject.MapProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_2KK0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// Class CoreUObject.MulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_H2X5, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// Class CoreUObject.MulticastInlineDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// Class CoreUObject.MulticastSparseDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// Class CoreUObject.NameProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// Class CoreUObject.SetProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_0NS2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// Class CoreUObject.SoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// Class CoreUObject.SoftClassProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_B4M0, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// Class CoreUObject.StrProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// Class CoreUObject.StructProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_H25J, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// Class CoreUObject.UInt16Property
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// Class CoreUObject.UInt32Property
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// Class CoreUObject.UInt64Property
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// Class CoreUObject.WeakObjectProperty
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// Class CoreUObject.TextProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// Class CoreUObject.PropertyWrapper
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_T1JS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// Class CoreUObject.MulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// Class CoreUObject.MulticastInlineDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// BlueprintGeneratedClass BP_PlayerHighlight.BP_PlayerHighlight_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerHighlight__BP_PlayerHighlight_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, HighlightParticle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, HighlightSpot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeOut_ParticleOpacity_71B2649E4A094DCD813744800FE0FE83, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeOut_LightIntensity_71B2649E4A094DCD813744800FE0FE83, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeOut__Direction_71B2649E4A094DCD813744800FE0FE83, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, UnknownData_3MC2, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeOut, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, Idle_ParticleOpacity_566767424AE3F263DDD4178E310D4C5C, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, Idle_LightIntensity_566767424AE3F263DDD4178E310D4C5C, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, Idle__Direction_566767424AE3F263DDD4178E310D4C5C, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, UnknownData_PJBQ, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, idle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeIn_ParticleOpacity_75D8288B4BE2C78E428338B351EF6161, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeIn_LightIntensity_75D8288B4BE2C78E428338B351EF6161, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeIn__Direction_75D8288B4BE2C78E428338B351EF6161, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, UnknownData_PUWK, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, FadeIn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, seat, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerHighlight_C, Table, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerHighlight_C, 0x0288);
		}

		// Class Landscape.ControlPointMeshActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// Class Landscape.ControlPointMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_4P7F, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// Class Landscape.LandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DHYK, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DQQU, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_WTJ5, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_3BHG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_OSNK, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_3F8N, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VSNA, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BOWN, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Q7O1, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_L8CM, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_41LS, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Y7MF, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_835L, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BAFV, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BSNP, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_WKQI, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_X08P, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ZTQ4, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_HSNV, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// Class Landscape.Landscape
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// Class Landscape.LandscapeBlueprintBrushBase
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// Class Landscape.LandscapeLODStreamingProxy
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_YDEC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// Class Landscape.LandscapeComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_JK4D, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_AMCJ, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_E1A2, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_DZ0O, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_A696, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0660);
		}

		// Class Landscape.LandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// Class Landscape.LandscapeGizmoActiveActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_9A4K, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// Class Landscape.LandscapeGizmoRenderComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0440);
		}

		// Class Landscape.LandscapeGrassType
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_8Z7Y, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_CGRY, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// Class Landscape.LandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_2JTZ, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_GWB4, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_AALY, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0520);
		}

		// Class Landscape.LandscapeInfo
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_VOBN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_RKUX, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// Class Landscape.LandscapeInfoMap
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_D9QZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// Class Landscape.LandscapeLayerInfoObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_ZSBM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// Class Landscape.LandscapeMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_FFPD, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// Class Landscape.LandscapeMeshCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_5EY7, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// Class Landscape.LandscapeMeshProxyActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// Class Landscape.LandscapeMeshProxyComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_PFIR, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// Class Landscape.LandscapeSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_2X4C, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// Class Landscape.LandscapeSplinesComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0470);
		}

		// Class Landscape.LandscapeSplineControlPoint
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_2HYU, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// Class Landscape.LandscapeSplineSegment
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_Q31B, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// Class Landscape.LandscapeStreamingProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_1OYZ, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// Class Landscape.LandscapeSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_VHRK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// Class Landscape.LandscapeWeightmapUsage
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// Class Landscape.MaterialExpressionLandscapeGrassOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerBlend
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerCoords
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_OGC4, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_SO8P, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerSample
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_39E3, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerSwitch
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_L8VE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_8Z1K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_YLH4, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_6RMX, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// Class Landscape.MaterialExpressionLandscapeLayerWeight
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_CFDK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_IHLR, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// Class Landscape.MaterialExpressionLandscapePhysicalMaterialOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// Class Landscape.MaterialExpressionLandscapeVisibilityMask
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// BlueprintGeneratedClass BP_StandardSpinnerViewModel.BP_StandardSpinnerViewModel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_StandardSpinnerViewModel__BP_StandardSpinnerViewModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StandardSpinnerViewModel_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StandardSpinnerViewModel_C, Options, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StandardSpinnerViewModel_C, 0x0051);
		}

		// Class MediaAssets.MediaSource
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_DWUM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// Class MediaAssets.BaseMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// Class MediaAssets.FileMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_DJAH, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// Class MediaAssets.MediaBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// Class MediaAssets.MediaComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// Class MediaAssets.MediaTimeStampInfo
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// Class MediaAssets.MediaPlayer
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_SBK0, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_KPBZ, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_KES9, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_6JFG, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_20EP, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// Class MediaAssets.MediaPlaylist
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// Class MediaAssets.MediaSoundComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_T39H, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_1ZUA, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_BY6X, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_1JQ8, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// Class MediaAssets.MediaTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_UMG3, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_0LNJ, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_MR6L, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// Class MediaAssets.PlatformMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// Class MediaAssets.StreamMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// Class MediaAssets.TimeSynchronizableMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_DZE4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// WidgetBlueprintGeneratedClass BP_Subtitles.BP_Subtitles_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Subtitles__BP_Subtitles_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Subtitles_C, Background, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Subtitles_C, Image_4, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Subtitles_C, TextBlock_36, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Subtitles_C, TextBlock_141, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Subtitles_C, TopLine, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Subtitles_C, 0x03D8);
		}

		// WidgetBlueprintGeneratedClass BP_Affiliation_Rewards.BP_Affiliation_Rewards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Affiliation_Rewards__BP_Affiliation_Rewards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, FUE_Rewards_IN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item1_Body, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item1_Thumbnail, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item1_Title, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item2_Body, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item2_Thumbnail, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item2_Title, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item3_Body, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item3_Thumbnail, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, Item3_Title, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Affiliation_Rewards_C, AffiliationArray, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Affiliation_Rewards_C, 0x02C8);
		}

		// Class LocationServicesBPLibrary.LocationServices
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// Class LocationServicesBPLibrary.LocationServicesImpl
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_SupportContent.BP_SupportContent_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SupportContent__BP_SupportContent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SupportContent_C, ContactUs, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SupportContent_C, ReleaseNotes, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SupportContent_C, SafeZone, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SupportContent_C, CurrentContent, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SupportContent_C, 0x0280);
		}

		// Class MoviePlayer.MoviePlayerSettings
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_MNNF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// Class AnimGraphRuntime.AnimNotify_PlayMontageNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// Class AnimGraphRuntime.AnimNotify_PlayMontageNotifyWindow
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// Class AnimGraphRuntime.AnimSequencerInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// Class AnimGraphRuntime.KismetAnimationLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// Class AnimGraphRuntime.PlayMontageCallbackProxy
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_X6YX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// Class AnimGraphRuntime.SequencerAnimationSupport
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_EditBody.BP_EditBody_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EditBody__BP_EditBody_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, UberGraphFrame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, EditBody_OUT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, EditBody_IN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, AgeCol, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BackBar, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BP_ButtonCallout_C_32, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BP_ButtonCallout_C_39, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BP_ButtonCallout_C_58, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, Btn_Accept, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BTN_Cancel, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, BTN_RANDOMIZE, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, DummyList, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, Gradient, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, HorizontalSelect, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, Safeframe, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, SkinColorCol, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, Subcategory, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, Subcategory_Type, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, WeightCol, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, NewVar_1, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, UnknownData_5MBU, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditBody_C, AssetSelectionModelContainer, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EditBody_C, 0x0510);
		}

		// WidgetBlueprintGeneratedClass BP_EditGender.BP_EditGender_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EditGender__BP_EditGender_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, UberGraphFrame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, EditBody_OUT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, EditBody_IN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BackBar, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BP_ButtonCallout_C, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BP_ButtonCallout_C_32, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BP_ButtonCallout_C_39, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BP_ButtonCallout_C_58, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, Btn_Accept, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BTN_Cancel, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BTN_CHANGE, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, BTN_RANDOMIZE, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, HorizontalBox_199, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, RButton, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditGender_C, TextBlock, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EditGender_C, 0x04E0);
		}

		// WidgetBlueprintGeneratedClass BP_Nameplate.BP_Nameplate_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Nameplate__BP_Nameplate_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Arrow_Loop, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Glow_Loop, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Nameplate_Out, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Nameplate_In, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, AffiliationSM, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, BackPanel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, chipstack, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, GamerTag, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Glow, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Icon_Chip, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, LevelBack, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, LevelBox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, LowerArrow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Nickname, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, PlaceBack, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, RankBox, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, RankedRatingText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, RankedTierText, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Ranking, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, Rating_LOGO, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, TextBlock_3000, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, TextBlock_7008, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, ActionIcons, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, SeatRank, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, DimmedOpacity, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, GlowVisibility, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, UnknownData_67U8, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Nameplate_C, _3DOwner, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Nameplate_C, 0x03F0);
		}

		// WidgetBlueprintGeneratedClass BP_SeatChipStack.BP_SeatChipStack_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SeatChipStack__BP_SeatChipStack_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatChipStack_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatChipStack_C, LowerArrow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SeatChipStack_C, TextBlock_1956, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SeatChipStack_C, 0x0288);
		}

		// WidgetBlueprintGeneratedClass BP_News.BP_News_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_News__BP_News_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Nav_UpdateNotes, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Nav_Sales, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Nav_General, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BtnSelect_LOOP, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, News_OUT, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, News_IN, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BackBar, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BP_BackButton_C_18, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BP_ButtonCallout_C_560, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BP_GeneralScrollBox, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BP_SaleScrollBox, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, BP_UpdateScrollBox, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Btn_Events, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Btn_General, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Btn_Sales, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Btn_Scroll, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Btn_UpdateNotes, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Image_713, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Image_5853, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, NewsList, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Safeframe, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Website, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, WhiteMenu_BACK, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_News_C, Scrolling, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_News_C, 0x07D1);
		}

		// BlueprintGeneratedClass LootCase_Upgrade_PlayRaritySpecificParticles.LootCase_Upgrade_PlayRaritySpecificParticles_C
		TEST_METHOD(BlueprintGeneratedClass__LootCase_Upgrade_PlayRaritySpecificParticles__LootCase_Upgrade_PlayRaritySpecificParticles_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootCase_Upgrade_PlayRaritySpecificParticles_C, 0x0038);
		}

		// Class ProceduralMeshComponent.KismetProceduralMeshLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// Class ProceduralMeshComponent.ProceduralMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_EYFQ, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_Y9YV, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04D0);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_H2H_NP02.BP_BikerBar_H2H_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_H2H_NP02__BP_BikerBar_H2H_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_H2H_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_H2H_NP02_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_MP_NP03.BP_BikerBar_MP_NP03_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_MP_NP03__BP_BikerBar_MP_NP03_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP03_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_MP_NP03_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_HUD.BP_InGame_HUD_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_HUD__BP_InGame_HUD_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, UberGraphFrame, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Text_LOOP, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, TurnTimer_Out, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, TurnTimer_IN, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_1, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2241, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2242, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2243, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2244, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2245, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2291, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2317, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2343, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2370, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Image_2398, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Info_Text, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, Safeframe, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, TimerFace, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_HUD_C, TimerMeter, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_HUD_C, 0x0748);
		}

		// BlueprintGeneratedClass BP_BountyFunctions.BP_BountyFunctions_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BountyFunctions__BP_BountyFunctions_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BountyFunctions_C, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_MuteButton.BP_MuteButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MuteButton__BP_MuteButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, Glow_OUT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, Glow_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, BP_ButtonCallout_C_50, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, Glow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, MuteButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, MuteIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, Color, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, seat, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, UnknownData_ZRJP, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MuteButton_C, GlowAnimation, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MuteButton_C, 0x02B8);
		}

		// Class LevelSequence.AnimSequenceLevelSequenceLink
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// Class LevelSequence.DefaultLevelSequenceInstanceData
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_WUN5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_39BB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// Class LevelSequence.LevelSequenceMetaData
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// Class LevelSequence.LevelSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_EB9G, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// Class LevelSequence.LevelSequenceBurnInInitSettings
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// Class LevelSequence.LevelSequenceBurnInOptions
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_4ND3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// Class LevelSequence.LevelSequenceActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_1XSP, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_KT98, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_SYC1, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_QU0K, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_DMGY, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// Class LevelSequence.LevelSequenceAnimSequenceLink
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// Class LevelSequence.LevelSequenceBurnIn
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// Class LevelSequence.LevelSequenceDirector
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// Class LevelSequence.LegacyLevelSequenceDirectorBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// Class LevelSequence.LevelSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_JX08, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// Class LevelSequence.LevelSequenceMediaController
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_TPB5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_A5DY, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// Class PhysicsCore.BodySetupCore
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_UR79, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// Class PhysicsCore.ChaosPhysicalMaterial
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_Z9T4, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// Class PhysicsCore.PhysicalMaterial
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_WFV5, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ARQG, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_NYWB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_D7LB, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// Class PhysicsCore.PhysicalMaterialPropertyBase
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// Class PhysicsCore.PhysicsSettingsCore
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_66SU, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_0XYN, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_NWDA, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// BlueprintGeneratedClass BP_3D_BackPanel.BP_3D_BackPanel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_BackPanel__BP_3D_BackPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_BackPanel_C, BackPanel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_BackPanel_C, DefaultSceneRoot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_BackPanel_C, 0x0250);
		}

		// BlueprintGeneratedClass BP_3D_RadialActionMenu.BP_3D_RadialActionMenu_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_RadialActionMenu__BP_3D_RadialActionMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_RadialActionMenu_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_RadialActionMenu_C, Widget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_RadialActionMenu_C, DynamicMaterial, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_RadialActionMenu_C, 0x0258);
		}

		// BlueprintGeneratedClass AnimNotify_FMODPlayEvent.AnimNotify_FMODPlayEvent_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_FMODPlayEvent__AnimNotify_FMODPlayEvent_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_FMODPlayEvent_C, bFollow, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_FMODPlayEvent_C, UnknownData_1CY5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_FMODPlayEvent_C, AttachName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_FMODPlayEvent_C, Event, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_FMODPlayEvent_C, 0x0058);
		}

		// Class PropertyAccess.PropertyAccess
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// Class PropertyAccess.PropertyEventBroadcaster
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// Class PropertyAccess.PropertyEventSubscriber
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// Class NiagaraCore.NiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// Class NiagaraCore.NiagaraDataInterfaceBase
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_EditHead.BP_EditHead_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_EditHead__BP_EditHead_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, UberGraphFrame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, EditHead_OUT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, EditHead_IN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BackBar, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BP_ButtonCallout_C_32, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BP_ButtonCallout_C_39, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BP_ButtonCallout_C_58, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BrowCol, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, Btn_Accept, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BTN_Cancel, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, BTN_RANDOMIZE, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, DummyList, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, EarsCol, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, EyeColorCol, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, EyesCol, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, Gradient, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, HeadCol, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, HorizontalSelect, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, JawCol, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, MouthCol, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, NoseCol, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, Safeframe, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, Subcategory, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, Subcategory_Type, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_EditHead_C, AssetSelectionModelContainer, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_EditHead_C, 0x0530);
		}

		// WidgetBlueprintGeneratedClass BP_NpcTweaker.BP_NpcTweaker_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_NpcTweaker__BP_NpcTweaker_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_NpcTweaker_C, UberGraphFrame, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NpcTweaker_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_ButtonCallout.BP_ButtonCallout_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ButtonCallout__BP_ButtonCallout_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonCallout_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonCallout_C, Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonCallout_C, UnknownData_T76Y, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ButtonCallout_C, MouseImage, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ButtonCallout_C, 0x0278);
		}

		// WidgetBlueprintGeneratedClass BP_BikerBar_MP_NP02.BP_BikerBar_MP_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BikerBar_MP_NP02__BP_BikerBar_MP_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BikerBar_MP_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BikerBar_MP_NP02_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_RankedRewards.BP_RankedRewards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankedRewards__BP_RankedRewards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, AllShow, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, RewardIcon_LOOP, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, RewardIcon_IN, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, RankIcon_IN, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Back2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, BP_LeaderboardRewardSlot, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, BP_LeaderboardRewardSlot_C_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, BP_LeaderboardRewardSlot_C_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, BP_LeaderboardRewardSlot_C_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Image_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Image_RANK, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Image_RANK_LG, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Image_REWARD, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Rewards, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, Safeframe, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, StandingTextBlock, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, TB_LeaderboardType_Rewards, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedRewards_C, TextBlock_5, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankedRewards_C, 0x0330);
		}

		// BlueprintGeneratedClass DmgTypeBP_Environmental.DmgTypeBP_Environmental_C
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// Class VariantManagerContent.LevelVariantSets
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_XEH8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// Class VariantManagerContent.LevelVariantSetsActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// Class VariantManagerContent.LevelVariantSetsFunctionDirector
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_SCCM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// Class VariantManagerContent.PropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_W0O8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_62WK, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_BLZG, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_AMFO, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueTransform
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueVisibility
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueColor
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueMaterial
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueOption
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// Class VariantManagerContent.PropertyValueSoftObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// Class VariantManagerContent.SwitchActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_QFVC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_LN4C, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// Class VariantManagerContent.Variant
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Dependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_DT8U, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0080);
		}

		// Class VariantManagerContent.VariantObjectBinding
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_EU6G, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// Class VariantManagerContent.VariantSet
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_ATO5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_WTGV, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// WidgetBlueprintGeneratedClass BP_Popup.BP_Popup_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Popup__BP_Popup_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, UberGraphFrame, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FullScreen_OUT, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FullScreen_IN, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_SelectLoop, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Button_4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Button_3, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Button_2, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Button_1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Pop_OUT, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Pop_IN, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, BackCover, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_4, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_0_Text, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_1_Text, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_2_Text, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Btn_3_Text, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_Back2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_Content, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_DirtBack, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_Image_2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_Image_3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FS_RankedRewards, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, FullScreen_Group, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Gradient, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Safeframe, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Back, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Black_BG, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_ButtonBacker, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_ContentBottom, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_ContentLeft, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_ContentRight, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_FormattedText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Image_155, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Image_156, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Text_Body, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, SD_Text_Title, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Standard_Group, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Buttons, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, ButtonTexts, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Popup_C, Background, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Popup_C, 0x0531);
		}

		// WidgetBlueprintGeneratedClass BP_TickableImage.BP_TickableImage_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TickableImage__BP_TickableImage_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TickableImage_C, UberGraphFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TickableImage_C, Image_20, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TickableImage_C, geo, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TickableImage_C, Brush, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TickableImage_C, 0x0338);
		}

		// WidgetBlueprintGeneratedClass BP_FeaturedItemsAndEvents.BP_FeaturedItemsAndEvents_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FeaturedItemsAndEvents__BP_FeaturedItemsAndEvents_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Ring_LOOP, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Featured_OUT, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Featured_IN, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option1Out, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option1In, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option0Out, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option0In, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BackBar, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BG_White, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BlueSplatter, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BP_ButtonCallout_C_25, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BP_ButtonCallout_C_560, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BP_UpcomingEventPanel, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Btn_Continue, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, BTN_STORE, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtBrush01, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtBrush02, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtBrush03, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtBrush04, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, DirtFrame2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_918, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_5721, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_6418, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_8806, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_11053, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_11101, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12449, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12450, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12451, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12472, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12474, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12476, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12478, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12480, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12481, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12482, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12483, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12484, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12485, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12486, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12487, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12488, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12489, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12490, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12491, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12492, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12493, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12494, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12495, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12496, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12497, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12498, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12499, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12500, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12501, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12502, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12503, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12504, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12505, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12506, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12507, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12508, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12509, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12510, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12511, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12512, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12513, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12514, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12515, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Image_12516, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option0, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Option1, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Panel_Group, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, PanelMenuRotate, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Ring_Back, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Ring_Outer, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, Safeframe, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, TextBlock_1163, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, FeaturedCompleteDispatcher, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, CurrentOption, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FeaturedItemsAndEvents_C, JustShown, 0x0611);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FeaturedItemsAndEvents_C, 0x0612);
		}

		// WidgetBlueprintGeneratedClass BP_LevelSelectSub.BP_LevelSelectSub_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LevelSelectSub__BP_LevelSelectSub_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, LevelSelectSub_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, LevelSelectSub_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BtnSelect_LOOP, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BackBar, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BackBrush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BossText, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BP_SelectButton, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BTN_02, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Btn_Boss, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Btn_Henchmen, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Btn_Mayor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, ChannelBack, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, ElipseBack, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, HenchmenText, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Image_34, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Image_325, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Image_326, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Image_1852, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, MayorText, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Root, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, Safeframe, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, TB_VenueDescription, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, TB_VenueFull, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, clickedButton, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, venue, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, UnknownData_KCBU, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BtnContinue, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BtnNewGame, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, BtnBack, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LevelSelectSub_C, FUEDelay, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LevelSelectSub_C, 0x0534);
		}

		// Class AudioMixer.SynthComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_GR8N, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_GB3W, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_D86G, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_6Y20, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// Class AudioMixer.AudioGenerator
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_F7E1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// Class AudioMixer.AudioMixerBlueprintLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// Class AudioMixer.QuartzClockHandle
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_PAFY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// Class AudioMixer.SubmixEffectDynamicsProcessorPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_0NSC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// Class AudioMixer.SubmixEffectSubmixEQPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_3ICM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// Class AudioMixer.SubmixEffectReverbPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_0L66, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// Class AudioMixer.QuartzSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_Y8LK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// Class AudioMixer.SynthSound
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_UIIO, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// WidgetBlueprintGeneratedClass BP_Accessories.BP_Accessories_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Accessories__BP_Accessories_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Nav_Rings, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Nav_Wristwear, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Nav_Earrings, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Nav_Glasses, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, BtnSelect_LOOP, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Shop_OUT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Shop_IN, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, AccessoriesList, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, BackBar, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, BG_White, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, BP_BackButton_C_18, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, BP_SelectButton_C_27, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Btn_Earrings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Btn_Glasses, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Btn_Rings, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, Btn_Wristwear, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, DirtBrush01, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, DirtBrush02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, DirtBrush03, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, DirtBrush04, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, DirtFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, WhiteMenu_BACK, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Accessories_C, ShopScreen, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Accessories_C, 0x04D8);
		}

		// Class HeadMountedDisplay.HeadMountedDisplayFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.MotionControllerComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, hand, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_C2B8, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_8RI3, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_MS6Q, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_BQQ8, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_XZL0, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// Class HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.VRNotificationsComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// Class HeadMountedDisplay.XRAssetFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// Class HeadMountedDisplay.AsyncTask_LoadXRDeviceVisComponent
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_788I, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// Class HeadMountedDisplay.XRLoadingScreenFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_H2H_NP02.BP_Laundromat_H2H_NP02_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_H2H_NP02__BP_Laundromat_H2H_NP02_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP02_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_H2H_NP02_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_RefillCallout.BP_InGame_RefillCallout_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_RefillCallout__BP_InGame_RefillCallout_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, Glow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, BTN_RANDOMIZE, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, CalloutText, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, FUEGlow, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, TextColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_RefillCallout_C, _3DRefillCallout, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_RefillCallout_C, 0x0388);
		}

		// Class AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_V07E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_I7SG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_9C2B, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// Class AppleImageUtils.AppleImageInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_RankedPlayer.BP_RankedPlayer_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RankedPlayer__BP_RankedPlayer_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, Glow, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, IconBorder, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, SlotIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, TierIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, VenueIcon0, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RankedPlayer_C, VenueIcon1, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RankedPlayer_C, 0x02B8);
		}

		// WidgetBlueprintGeneratedClass BP_StatsButton.BP_StatsButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatsButton__BP_StatsButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, Glow_OUT, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, Glow_IN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, BP_ButtonCallout_C_50, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, Image_127, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, StateButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsButton_C, Color, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatsButton_C, 0x02A8);
		}

		// Class AnimationSharing.AnimSharingStateInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_N67D, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_40T0, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x02E0);
		}

		// Class AnimationSharing.AnimSharingTransitionInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_DUAV, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x02D0);
		}

		// Class AnimationSharing.AnimSharingAdditiveInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_PNQU, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x02D0);
		}

		// Class AnimationSharing.AnimSharingInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_9CUY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_2D9A, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_2WTD, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_PJ7O, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0118);
		}

		// Class AnimationSharing.AnimationSharingManager
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_85VG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// Class AnimationSharing.AnimationSharingSetup
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// Class AnimationSharing.AnimationSharingStateProcessor
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// Class InputCore.InputCoreTypes
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// BlueprintGeneratedClass BP_CameraManager.BP_CameraManager_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CameraManager__BP_CameraManager_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CameraManager_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CameraManager_C, Scene, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CameraManager_C, 0x02D0);
		}

		// Class MaterialShaderQualitySettings.MaterialShaderQualitySettings
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// Class MaterialShaderQualitySettings.ShaderPlatformQualitySettings
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_7PCP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// BlueprintGeneratedClass BP_GameTypeViewModel.BP_GameTypeViewModel_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GameTypeViewModel__BP_GameTypeViewModel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameTypeViewModel_C, UberGraphFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameTypeViewModel_C, LobbyBaseReference, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameTypeViewModel_C, 0x0058);
		}

		// Class AutomationUtils.AutomationUtilsBlueprintLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// BlueprintGeneratedClass BP_RotatingSafetyLight01.BP_RotatingSafetyLight01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_RotatingSafetyLight01__BP_RotatingSafetyLight01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingSafetyLight01_C, PointLight, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingSafetyLight01_C, bulb, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingSafetyLight01_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RotatingSafetyLight01_C, RotatingMovement, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RotatingSafetyLight01_C, 0x0240);
		}

		// AnimBlueprintGeneratedClass BP_ShellAvatarAnim_M.BP_ShellAvatarAnim_M_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_ShellAvatarAnim_M__BP_ShellAvatarAnim_M_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_M_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_M_C, AnimGraphNode_Root, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_M_C, AnimGraphNode_Slot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_M_C, AnimGraphNode_LocalRefPose, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShellAvatarAnim_M_C, 0x0418);
		}

		// WidgetBlueprintGeneratedClass BP_SelectButton.BP_SelectButton_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_SelectButton__BP_SelectButton_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SelectButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SelectButton_C, BP_ButtonCallout_C_563, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SelectButton_C, BTN_01, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SelectButton_C, 0x0278);
		}

		// WidgetBlueprintGeneratedClass BP_ActionIcon.BP_ActionIcon_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ActionIcon__BP_ActionIcon_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Timer_OUT, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetCheckFold_IN, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Reveal_GLOW, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, HighCard_GLOW, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, HighCard_IN_4, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, HighCard_IN_3, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, TimerFrame_LOOP, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BetAmount_OUT, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, EmptyAnimation, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Timer_IN, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, CallOut_OUT, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, CallOut_IN, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BetAmount_IN, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Reveal_IN, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, HighCard_IN, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Glow_Loop, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BigBlind_IN, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, SmallBlind_IN, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetBet_IN, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetAll_In_IN, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetCall_IN, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetRaise_IN, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetFold_IN, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, PresetCheck_IN, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Bet_IN, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, All_In_IN, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Call_IN, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Raise_IN, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Fold_IN, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Check_IN, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BetAmount, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BigBlind, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Both, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, BTN_Cancel, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Button_RestoreDefaults, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Callout, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Face, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Glow, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_Bet, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_Call, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_Check, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_CheckFold, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_Fold, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ICON_RaiseAllin, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Icon_RaiseAllIn2, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Image_1, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_HighCard, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_HighCard_GLOW, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_RevealCard0, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_RevealCard0_GLOW, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_RevealCard1, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Img_RevealCard1_GLOW, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_01, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_02, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_03, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_04, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_05, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_06, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_07, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_08, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Ring_09, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, SmallBlind, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, Timer, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, TimerGradient, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, TimerGroup, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ActionIcon_C, ActorOwner, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ActionIcon_C, 0x06D8);
		}

		// WidgetBlueprintGeneratedClass BP_LootCase.BP_LootCase_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LootCase__BP_LootCase_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, UberGraphFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, FadeNavArrowsOut, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, FadeButtonBarOut, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCaseTitleFadeOut, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Arrow_Loop, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCase_1CardComeUp, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCase_1CardGoDown, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCase_1CardStayUp, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCase_OUT, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCase_IN, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Arrow_Left, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Arrow_Right, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Block_Cover, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_BackButton, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_ButtonCallout_C_1, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_ButtonCallout_C_2, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_ButtonCallout_C_3, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_ButtonCallout_C_32, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_ButtonCallout_C_58, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BP_LootCase_CardWidget_C_1, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Btn_Accept, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_ARROW_LEFT, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_ARROW_RIGHT, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_NEXT, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_PREVIEW, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_PREVIOUS, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, BTN_UPGRADE, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, CaseCount, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Image_1, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Image_3, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Nav_Arrows, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Safeframe, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, TB_LootCaseQualityName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, TB_LootCaseQuantity, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, TextBlock_734, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Primary3DLootCase, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Secondary3DLootCase, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, LootCaseRarityColor, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, Text_OpenCase, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LootCase_C, HasSwappedLootCases, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LootCase_C, 0x05F9);
		}

		// WidgetBlueprintGeneratedClass BP_RadialActionMenu.BP_RadialActionMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RadialActionMenu__BP_RadialActionMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UberGraphFrame, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Splat_Glow_IN, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeter_BACK_TO_Radial_Meter_FullScale, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeter_OUT, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Cancel_OUT, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Cancel_IN, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeter_BACK_TO_Radial_Meter, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Glow_Loop, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialActionMenu_PRESET_OUT, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeter_IN, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialActionMenu_PRESET_TO_FULL, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialActionMenu_PRESET_IN, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUE_GlowPointer_Glow, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUE_LeftBumper_Glow, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUE_RightBumper_Glow, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DnGlow_LOOP, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpRightGlow_LOOP, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpLeftGlow_LOOP, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RIGHT_Select_IN, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialActionMenu_OUT, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, LEFT_Select_IN, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DOWN_Select_IN, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialActionMenu_IN, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, _5X_BigBlind, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, AcceptButton, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, AllInButton, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, AllinDeadzone, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Both, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Bottom_RING, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_14, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_25, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_26, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_27, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_397, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_ButtonCallout_C_398, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, BP_TickableImage, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Button, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, CancelButton, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, CancelButton_RAD, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ConfirmButtonImage, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DecrementButton, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DN, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DN2, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DnGlow, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DnSelect, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, DNSelect_Gradient, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Frame, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUE_LeftGlow, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUE_RightGlow, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, FUEGlowPointer, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Glow, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ICON_Bet, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ICON_Call, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ICON_Check, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ICON_CheckFold, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, ICON_Fold, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Icon_Raise_AllIn, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Image_344, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Image_1048, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, IncrementButton, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Left_RING, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, MinBetDeadzone, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, MouseHelper, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, OuterCanvasPanel, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, PotPointer, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Call_Image, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Cancel_Action_Number, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Check_Image, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_CheckFold_Image, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Fold_Image, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Preset_Raise_Image, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialMenu, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialMenuGroup, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RadialMeter, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeter, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterBack, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterDnSelect, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterFrame, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterHoverText, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterPanel, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaisePointer, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Right_RING, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Safeframe, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SplatBackground1, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SplatBackground2, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SplatBackground3, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SplatBackground4, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Text_Down, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Text_UpLeft, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Text_UpRight, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, TextBacker, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, TextBlock_988, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, TextBlock_990, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Tick_Marks, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, Timer, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpLeft_Gradient, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpLeftGlow, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpLeftSelect, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpRight_Gradient, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpRightGlow, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UpRightSelect, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SectionShouldBeGlowing, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, SectionIsGlowing, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, LastQueuedAction, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, UnknownData_MSGY, 0x0AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterAnimateTime, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, animateRaiseMeterProgress, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterAnimationEaseType, 0x0AC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, RaiseMeterAllInProgressEaseInFinalPageType, 0x0AC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialActionMenu_C, QueuedActionEnacted, 0x0AC3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RadialActionMenu_C, 0x0AC4);
		}

		// WidgetBlueprintGeneratedClass BP_CommunityCards.BP_CommunityCards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CommunityCards__BP_CommunityCards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, UnDeal_4, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, UnDeal_5, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TheFlop_Deal_4_IN, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, UnDeal_6, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TheFlop_Deal_5_IN, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card05_Glow, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card04_Glow, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card03_Glow, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card02_Glow, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card01_Glow, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TheRiver_IN, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TheTurn_IN, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TheFlop_IN, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BackBrush01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BackBrush02, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BoostPercentText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BottomCardGlow, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BP_ButtonCallout, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, BTN_Restore, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card02, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card03, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card04, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card05, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card_01Glow, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card_02Glow, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card_03Glow, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card_04Glow, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Card_05Glow, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardBackFlop1, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardBackFlop2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardBackFlop3, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardBackTurn, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardBlankRiver, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, CardsHoverArea, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Channel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, ChipsDisplay, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Elipse, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_533, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_659, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_1393, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_2524, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_6868, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_7844, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_7845, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_7846, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_7847, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Image_7848, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Left_Card, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Left_Card_Back, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Left_Card_GLOW, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, LevelMeter, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Meter_Green, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, PeekButton, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, PotDisplay, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, REP_BoostIcon, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Right_Card, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Right_Card_Back, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Right_Card_GLOW, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, Safeframe, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CommunityCards_C, TopCardGlow, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CommunityCards_C, 0x0650);
		}

		// Class FieldSystemEngine.FieldSystemActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// Class FieldSystemEngine.FieldSystem
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_6PE7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// Class FieldSystemEngine.FieldSystemComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_8G15, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_V8SM, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// Class FieldSystemEngine.FieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// Class FieldSystemEngine.FieldSystemMetaDataIteration
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_XXNI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// Class FieldSystemEngine.FieldSystemMetaDataProcessingResolution
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_PUQW, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// Class FieldSystemEngine.FieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// Class FieldSystemEngine.FieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// Class FieldSystemEngine.FieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// Class FieldSystemEngine.FieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// Class FieldSystemEngine.UniformInteger
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_BYMK, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// Class FieldSystemEngine.RadialIntMask
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_9M61, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// Class FieldSystemEngine.UniformScalar
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_K400, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// Class FieldSystemEngine.RadialFalloff
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_VZN1, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// Class FieldSystemEngine.PlaneFalloff
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_VQ3H, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// Class FieldSystemEngine.BoxFalloff
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_T06Z, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// Class FieldSystemEngine.NoiseField
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_D0BU, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// Class FieldSystemEngine.UniformVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// Class FieldSystemEngine.RadialVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// Class FieldSystemEngine.RandomVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_YL16, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// Class FieldSystemEngine.OperatorField
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_GN6L, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_DKGB, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// Class FieldSystemEngine.ToIntegerField
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// Class FieldSystemEngine.ToFloatField
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// Class FieldSystemEngine.CullingField
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_YYVG, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// Class FieldSystemEngine.ReturnResultsTerminal
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// WidgetBlueprintGeneratedClass BP_FriendList.BP_FriendList_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_FriendList__BP_FriendList_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, UberGraphFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, FriendsList_OUT, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, FriendsList_IN, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BackCover, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BackGradient, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BP_ButtonCallout_C_1, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BP_ButtonCallout_C_32, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BP_ButtonCallout_C_175, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BTN_Close, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, BTN_SELECT, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, Image_1352, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, Image_3998, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, ProfileButton, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, SafeFrame_Template, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, Text_Title, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FriendList_C, TopGradient, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FriendList_C, 0x0748);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_PlayerStats.BP_InGame_PlayerStats_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_PlayerStats__BP_InGame_PlayerStats_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, PlayerStats_OUT, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, PlayerStats_IN, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, BP_AvatarInfo, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Image_923, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Image_994, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Image_1071, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Image_1079, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Image_1152, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_PlayerStats_C, Safeframe, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_PlayerStats_C, 0x03D0);
		}

		// Class FMODStudio.FMODAmbientSound
		TEST_METHOD(Class__FMODStudio__FMODAmbientSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFMODAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFMODAmbientSound, 0x0228);
		}

		// Class FMODStudio.FMODAnimNotifyPlay
		TEST_METHOD(Class__FMODStudio__FMODAnimNotifyPlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAnimNotifyPlay, UnknownData_B0RC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAnimNotifyPlay, AttachName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAnimNotifyPlay, Event, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODAnimNotifyPlay, 0x0078);
		}

		// Class FMODStudio.FMODAsset
		TEST_METHOD(Class__FMODStudio__FMODAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, AssetGuid, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODAsset, 0x0038);
		}

		// Class FMODStudio.FMODAudioComponent
		TEST_METHOD(Class__FMODStudio__FMODAudioComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, Event, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, ParameterCache, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, UnknownData_WFH7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, ProgrammerSoundName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, UnknownData_55YF, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, UnknownData_V2N2, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, OnEventStopped, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, OnTimelineMarker, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, OnTimelineBeat, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, AttenuationDetails, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, OcclusionDetails, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, UnknownData_HB0X, 0x02C7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODAudioComponent, 0x0380);
		}

		// Class FMODStudio.FMODBank
		TEST_METHOD(Class__FMODStudio__FMODBank)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBank, 0x0038);
		}

		// Class FMODStudio.FMODBankLookup
		TEST_METHOD(Class__FMODStudio__FMODBankLookup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODBankLookup, DataTable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODBankLookup, MasterBankPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODBankLookup, MasterAssetsBankPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODBankLookup, MasterStringsBankPath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBankLookup, 0x0060);
		}

		// Class FMODStudio.FMODBlueprintStatics
		TEST_METHOD(Class__FMODStudio__FMODBlueprintStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBlueprintStatics, 0x0028);
		}

		// Class FMODStudio.FMODBus
		TEST_METHOD(Class__FMODStudio__FMODBus)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBus, 0x0038);
		}

		// Class FMODStudio.FMODEvent
		TEST_METHOD(Class__FMODStudio__FMODEvent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEvent, 0x0038);
		}

		// Class FMODStudio.FMODEventControlSection
		TEST_METHOD(Class__FMODStudio__FMODEventControlSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODEventControlSection, ControlKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEventControlSection, 0x0180);
		}

		// Class FMODStudio.FMODEventControlTrack
		TEST_METHOD(Class__FMODStudio__FMODEventControlTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODEventControlTrack, ControlSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEventControlTrack, 0x0088);
		}

		// Class FMODStudio.FMODEventParameterTrack
		TEST_METHOD(Class__FMODStudio__FMODEventParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODEventParameterTrack, UnknownData_D748, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODEventParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEventParameterTrack, 0x0090);
		}

		// Class FMODStudio.FMODSettings
		TEST_METHOD(Class__FMODStudio__FMODSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLoadAllBanks, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLoadAllSampleData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bEnableLiveUpdate, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bEnableEditorLiveUpdate, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_TEAX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, BankOutputDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, OutputFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_UTWT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, Locales, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bVol0Virtual, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_J1SZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, Vol0VirtualLevel, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, SampleRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bMatchHardwareSampleRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_18FD, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, RealChannelCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, TotalChannelCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, DSPBufferLength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, DSPBufferCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, FileBufferSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, StudioUpdatePeriod, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, InitialOutputDriverName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLockAllBuses, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_3C1S, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, MemoryPoolSizes, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LiveUpdatePort, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, EditorLiveUpdatePort, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, PluginFiles, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ContentBrowserPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ForcePlatformName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, MasterBankName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, SkipLoadBankName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, StudioBankKey, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, WavWriterPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LoggingLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_G637, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, OcclusionParameter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, AmbientVolumeParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, AmbientLPFParameter, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODSettings, 0x0158);
		}

		// Class FMODStudio.FMODSnapshot
		TEST_METHOD(Class__FMODStudio__FMODSnapshot)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODSnapshot, 0x0038);
		}

		// Class FMODStudio.FMODSnapshotReverb
		TEST_METHOD(Class__FMODStudio__FMODSnapshotReverb)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSnapshotReverb, AssetGuid, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODSnapshotReverb, 0x0070);
		}

		// Class FMODStudio.FMODVCA
		TEST_METHOD(Class__FMODStudio__FMODVCA)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODVCA, 0x0038);
		}

		// WidgetBlueprintGeneratedClass BP_RetractableHoleCards.BP_RetractableHoleCards_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RetractableHoleCards__BP_RetractableHoleCards_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, UberGraphFrame, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, FUE_REPMeter_Glow, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, FUE_Card_Glow, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, RepReward_IN, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, HoleCards_FOLD, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, HoleCardsGroup_OUT, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Deal_LeftCard__IN, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Deal_RightCard_IN, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, HoleCards_REVEAL, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, HoleCardsGroup_IN, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BackBrush01, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BackBrush02, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BoostPercentText, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BottomCardGlow, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BP_ButtonCallout, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, BTN_Restore, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Card01, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Card02, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Card03, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Card04, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Card05, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, CardsHoverArea, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, CardSplatter, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Channel, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, ChipsDisplay, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Elipse, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, FUE_CardGlow, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, HighCard_Front, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_533, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_659, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_1393, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_2524, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_4070, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_4071, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_4072, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_4073, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Image_4263, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Left_Card, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Left_Card_Back, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Left_Card_GLOW, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, LevelMeter, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Meter_Green, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, PeekButton, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, PotDisplay, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, REP_BoostIcon, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, RepRewardDiscriptionText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, RepRewardValueText, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Right_Card, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Right_Card_Back, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Right_Card_GLOW, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, Safeframe, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, TopCardGlow, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, TimeAnimateRepIncreaseOnMeter, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, PausedForFue, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, UnknownData_MSWP, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, PauseTime, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RetractableHoleCards_C, FueCardGlowVisibility, 0x068C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RetractableHoleCards_C, 0x068D);
		}

		// Class WmfMediaFactory.WmfMediaSettings
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_USI3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// Class AssetRegistry.AssetRegistryImpl
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_J8SI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// Class AssetRegistry.AssetRegistryHelpers
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// Class AssetRegistry.AssetRegistry
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// BlueprintGeneratedClass BP_FmodAnimNotify.BP_FmodAnimNotify_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FmodAnimNotify__BP_FmodAnimNotify_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, Event, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, bFollow, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, UnknownData_BZ01, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, AttachName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, ParameterValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_FmodAnimNotify_C, ParameterName, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FmodAnimNotify_C, 0x0064);
		}

		// AnimBlueprintGeneratedClass BP_ShellAvatarAnim_F.BP_ShellAvatarAnim_F_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_ShellAvatarAnim_F__BP_ShellAvatarAnim_F_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_F_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_F_C, AnimGraphNode_Root, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_F_C, AnimGraphNode_Slot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ShellAvatarAnim_F_C, AnimGraphNode_LocalRefPose, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShellAvatarAnim_F_C, 0x0418);
		}

		// WidgetBlueprintGeneratedClass BP_RadialMeter.BP_RadialMeter_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_RadialMeter__BP_RadialMeter_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, BackgroundObject, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, ForegroundObject, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, Progress, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, UnknownData_D4XE, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, CustomForegroundTexture, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, ForegroundMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, MaskingTween, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, CustomBackgroundTexture, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, BackgroundVisibility, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, UnknownData_6VP7, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, WipeZeroAngle, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, CustomPointerTint, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, BackgroundTint, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, toggle, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, UnknownData_XBT5, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, BackgroundImage, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, ForegroundImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, Palette, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, hasLinear, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, UnknownData_0OBK, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, linearSpeed, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, linearTarget, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialMeter_C, linearDirection, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RadialMeter_C, 0x03D8);
		}

		// WidgetBlueprintGeneratedClass BP_AnimatedCounter.BP_AnimatedCounter_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_AnimatedCounter__BP_AnimatedCounter_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, TextBlock, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, Justification, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, UnknownData_C6R4, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, Font, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, Color_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, ShadowOffset, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, ShadowColor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_AnimatedCounter_C, SoundID, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AnimatedCounter_C, 0x0354);
		}

		// AnimBlueprintGeneratedClass BP_PlayerAvatarAnim_M.BP_PlayerAvatarAnim_M_C
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_PlayerAvatarAnim_M__BP_PlayerAvatarAnim_M_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, UberGraphFrame, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Root, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalRefPose_5, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalToComponentSpace_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Fabrik_3, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Fabrik_2, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_BlendListByInt, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalToComponentSpace, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Fabrik, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_ComponentToLocalSpace, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalRefPose_4, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LayeredBoneBlend_2, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Slot_5, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LayeredBoneBlend, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_TwoWayBlend_2, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Slot_4, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalRefPose_3, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Slot_3, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalRefPose_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_BlendListByBool, 0x15C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Slot_2, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_SaveCachedPose_2, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_UseCachedPose_5, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_UseCachedPose_4, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_UseCachedPose_3, 0x1858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_SaveCachedPose, 0x1880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_Slot, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_UseCachedPose_2, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_UseCachedPose, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_TwoWayBlend, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, AnimGraphNode_LocalRefPose, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PlayerAvatarAnim_M_C, Player, 0x1B50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerAvatarAnim_M_C, 0x1B58);
		}

		// WidgetBlueprintGeneratedClass BP_InGame_GameResults.BP_InGame_GameResults_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_InGame_GameResults__BP_InGame_GameResults_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, UberGraphFrame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Ranked_DOWN, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RankedResults_Provisional_IN, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Ranked_UP, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RankedResults_OUT, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RankedResults_IN, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, MainTitle_IN, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Place_IN, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, idle, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_OUT, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, GameResults_OUT, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_Boost_ADDED, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_REP_ADDED, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_Chips_ADDED, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_ICONS_Scroller_IN, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Reward_ICONS_LOOP, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, GameResults_IN, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, BackBar, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Background_Group, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, BG_White, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, BP_ButtonCallout, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, BP_ButtonCallout_C_2, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, BP_ButtonCallout_C_32, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Btn_CycleLeft, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Btn_CycleRight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Btn_Exit, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, DirtBrush01, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, DirtBrush02, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, DirtBrush03, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, DirtBrush04, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, DirtFrame, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, HeaderBar, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, IconName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, IMG_NewRatingIcon, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, IMG_OriginalRatingIcon, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, LevelRepRemainingCounter, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, PlaceImage, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, PlayerName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RankedGames_Group, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RatingLogo1, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RatingLogo2, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RewardIcon, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Rewards_Group, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RewardsScroller, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Safeframe, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Splatter_02, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat01_CricleBack, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat02_CricleBack, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat03_CricleBack, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat_01BACK, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat_02BACK, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Stat_03BACK, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, StatMeter, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TB_NewRating, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TB_RatingChange, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Text_XPAdded, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, Text_XPAdded2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextBlock_15, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextBoostAdded, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextBoostAdded2, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextChipsAdded, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextChipsAdded2, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, TextPlayerLevel, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, LevelProgress, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, RewardsLoopTimePerReward, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, LevelProgressMeterEaseType, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, UnknownData_R41W, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, SecondsToAnimateLevelProgress, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, SecondsAfterMeterFullUntilStartNextFill, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, NumLevelProgressLoops, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, AnimationToPlayWhenProgressComplete, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, progressToAnimate, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, ReadyToScrollRewards_1, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, UnknownData_H2PQ, 0x06A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_InGame_GameResults_C, levelCounter, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_InGame_GameResults_C, 0x06AC);
		}

		// Class Bounty.Achievements
		TEST_METHOD(Class__Bounty__Achievements)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAchievements, UnknownData_FLOH, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAchievements, 0x02C8);
		}

		// Class Bounty.ActionIcon
		TEST_METHOD(Class__Bounty__ActionIcon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, seat, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, HighCard, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, RevealCard0, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, RevealCard1, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, UnknownData_JCC7, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, ActionText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, AmountText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, ShowActionTextWhenPresetting, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, UnknownData_5Y6I, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, ActionTextDuration, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionIcon, UnknownData_SO27, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionIcon, 0x04C0);
		}

		// Class Bounty.AIBehaviorsData
		TEST_METHOD(Class__Bounty__AIBehaviorsData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIBehaviorsData, BehaviorSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIBehaviorsData, Scripts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIBehaviorsData, FueScript, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBehaviorsData, 0x0060);
		}

		// Class Bounty.AIManager
		TEST_METHOD(Class__Bounty__AIManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIManager, UnknownData_GO1G, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIManager, 0x0240);
		}

		// Class Bounty.AIPlayer
		TEST_METHOD(Class__Bounty__AIPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIPlayer, UnknownData_F507, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIPlayer, 0x0238);
		}

		// Class Bounty.AnimatedCounter
		TEST_METHOD(Class__Bounty__AnimatedCounter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatedCounter, UnknownData_UGH1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatedCounter, DisableCountingSound, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatedCounter, UnknownData_0EEI, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatedCounter, SoundPlaying, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatedCounter, UnknownData_Z0RC, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatedCounter, 0x02A0);
		}

		// Class Bounty.AssetLoader
		TEST_METHOD(Class__Bounty__AssetLoader)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLoader, UnknownData_IIY7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetLoader, 0x0180);
		}

		// Class Bounty.AssetSelectionModelContainer
		TEST_METHOD(Class__Bounty__AssetSelectionModelContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetSelectionModelContainer, UnknownData_E45E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetSelectionModelContainer, 0x0038);
		}

		// Class Bounty.AutoDebugCmds
		TEST_METHOD(Class__Bounty__AutoDebugCmds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDebugCmds, Commands, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDebugCmds, 0x0040);
		}

		// Class Bounty.AutoVideoQuality
		TEST_METHOD(Class__Bounty__AutoVideoQuality)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAutoVideoQuality, UnknownData_VYBK, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAutoVideoQuality, 0x0248);
		}

		// Class Bounty.AssetsToLoad
		TEST_METHOD(Class__Bounty__AssetsToLoad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetsToLoad, Meshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetsToLoad, Textures, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetsToLoad, SkinTextures, 0x08E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetsToLoad, 0x0A28);
		}

		// Class Bounty.avatar
		TEST_METHOD(Class__Bounty__avatar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::Aavatar, Definition, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aavatar, UnknownData_SIMA, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aavatar, AssetsToLoad, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aavatar, UnknownData_SF6Y, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aavatar, OnApplyDefinitionFinishedDelegate, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aavatar, 0x02F8);
		}

		// Class Bounty.AvatarAnimEndingNotifyState
		TEST_METHOD(Class__Bounty__AvatarAnimEndingNotifyState)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarAnimEndingNotifyState, 0x0030);
		}

		// Class Bounty.AvatarAnimInstance
		TEST_METHOD(Class__Bounty__AvatarAnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAnimInstance, UnknownData_MCOZ, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAnimInstance, Anims, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAnimInstance, UnknownData_TPQA, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAnimInstance, OnAnimLoadingFinishedDelegate, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAnimInstance, UnknownData_9BDN, 0x0A80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarAnimInstance, 0x0C40);
		}

		// Class Bounty.AvatarAssetDatabase
		TEST_METHOD(Class__Bounty__AvatarAssetDatabase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, UnknownData_48VT, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, AvatarCreatorThumbnailsLoadedEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, Male, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, Female, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, UnknownData_UXPK, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, HairColorsList, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, EyeColorList, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, ShavedHeadMeshes, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, StubbleMeshes, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, DisableAllEarMorphForCertainHeadwear, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, DisableAllEarMorphForCertainHair, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, DisableCertainHairsForAllHeadwear, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, ExcludeAssetsFromAvatarCreator, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, ExcludeAssetsFromRandomizer, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, UnknownData_SJVZ, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, ExcludeMorphsFromAvatarCreator, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, ShouldCastShadow, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, NoFacialHairThumbnail, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, NoMakeupThumbnail, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, FacialStubbleThumbnails, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, GenderAssetBindings, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, NoFacialHairToMakeup, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, BlankTexture, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarAssetDatabase, MissingThumbnailTexture, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAvatarAssetDatabase, 0x0870);
		}

		// Class Bounty.AvatarAssetSelector
		TEST_METHOD(Class__Bounty__AvatarAssetSelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAssetSelector, ColumnName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAssetSelector, canScroll, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAssetSelector, inColorMenu, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAssetSelector, IsRandomizing, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarAssetSelector, UnknownData_YP2D, 0x027B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarAssetSelector, 0x0280);
		}

		// Class Bounty.AvatarDefinition
		TEST_METHOD(Class__Bounty__AvatarDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarDefinition, Gender, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarDefinition, UnknownData_MY6U, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarDefinition, WeightRatio, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarDefinition, UnknownData_NLWW, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAvatarDefinition, 0x0798);
		}

		// Class Bounty.UiComponent
		TEST_METHOD(Class__Bounty__UiComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UnknownData_9F8I, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, BeginShowEvent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, ShowEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, BeginHideEvent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, HideEvent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UnknownData_A2UL, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, RequiredComponents, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, ZOrder, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UnknownData_DJUZ, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UiManager, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UnknownData_QFWX, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, CustomControllerFocus, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiComponent, UnknownData_OTFK, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUiComponent, 0x0348);
		}

		// Class Bounty.BountyUiComponent
		TEST_METHOD(Class__Bounty__BountyUiComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyUiComponent, BeginShowSfx, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyUiComponent, BeginHideSfx, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyUiComponent, IntroHeader, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyUiComponent, IntroDescription, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyUiComponent, 0x0388);
		}

		// Class Bounty.BountyShellScreen
		TEST_METHOD(Class__Bounty__BountyShellScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, UnknownData_GSC9, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, DefaultBackgroundAnimation, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, DefaultBackLink, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, CanRotateAvatar, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, UnknownData_3O5N, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, ShellCamTarget, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, DynamicShadowDistance, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, DynamicShadowAmount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, BackgroundPtr, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, UnknownData_RE8A, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, RotationRoot, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellScreen, UnknownData_E81W, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyShellScreen, 0x0418);
		}

		// Class Bounty.AvatarEditorScreen
		TEST_METHOD(Class__Bounty__AvatarEditorScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, SubCategoryTB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, HoveredColumn, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, RandomizingMinDelayTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, RandomizingMaxDelayTime, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, CurrentAssetDisplayName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, ShowGlasses, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, ShowHeadwear, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, ShowPiercings, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, UnknownData_WSCT, 0x044B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarEditorScreen, Columns, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarEditorScreen, 0x0468);
		}

		// Class Bounty.AvatarGenderSelectScreen
		TEST_METHOD(Class__Bounty__AvatarGenderSelectScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, DirtyAvatar, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, UnknownData_BMWU, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, ChangeGenderSFX, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, GenderFocus, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, UnknownData_75YB, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, Male, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, Female, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarGenderSelectScreen, UnknownData_EYKH, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarGenderSelectScreen, 0x0468);
		}

		// Class Bounty.AvatarInfo
		TEST_METHOD(Class__Bounty__AvatarInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarInfo, EventParent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarInfo, EventIconClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarInfo, EventIconPadding, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarInfo, 0x0368);
		}

		// Class Bounty.Chair
		TEST_METHOD(Class__Bounty__Chair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AChair, Table, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChair, seat, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair, 0x0238);
		}

		// Class Bounty.AvatarPickupMgr
		TEST_METHOD(Class__Bounty__AvatarPickupMgr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, Player, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, UnknownData_IVPC, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, CardSpawnedInHand, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, UnknownData_3CO9, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, CurPickup, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, AboutToGrab, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, Pickups, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, FixedItem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, SingleChipL, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, SingleChipR, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, DeckSpawnedInHand, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, Card1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, Card2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAvatarPickupMgr, UnknownData_FU0E, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAvatarPickupMgr, 0x0360);
		}

		// Class Bounty.AvatarSelectionOption
		TEST_METHOD(Class__Bounty__AvatarSelectionOption)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSelectionOption, ItemName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSelectionOption, ItemDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSelectionOption, Texture, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarSelectionOption, 0x0058);
		}

		// Class Bounty.BackButtonInterface
		TEST_METHOD(Class__Bounty__BackButtonInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackButtonInterface, 0x0028);
		}

		// Class Bounty.BackgroundCharacter
		TEST_METHOD(Class__Bounty__BackgroundCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackgroundCharacter, UnknownData_6K3S, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackgroundCharacter, OnInitFinishedDelegate, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABackgroundCharacter, 0x0248);
		}

		// Class Bounty.BgAvatarTarget
		TEST_METHOD(Class__Bounty__BgAvatarTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, UnknownData_6USZ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, Priority, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, UnknownData_QJSP, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, AvatarProbabilites, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, Items, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, NinePlayerTable, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, HeadToHead, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, HenchmenBattle, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, BossBattle, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, UnknownData_VV8H, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, AssignToMatineeAvatarMale, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABgAvatarTarget, AssignToMatineeAvatarFemale, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABgAvatarTarget, 0x0270);
		}

		// Class Bounty.BlobShadow
		TEST_METHOD(Class__Bounty__BlobShadow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlobShadow, UnknownData_ZGT3, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlobShadow, 0x0270);
		}

		// Class Bounty.BoostSelector
		TEST_METHOD(Class__Bounty__BoostSelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostSelector, UnknownData_X1HN, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoostSelector, 0x03B8);
		}

		// Class Bounty.BountyBPFunctions
		TEST_METHOD(Class__Bounty__BountyBPFunctions)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyBPFunctions, 0x0028);
		}

		// Class Bounty.BountyCameraManager
		TEST_METHOD(Class__Bounty__BountyCameraManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraManager, OrbitCamPresetsDataTables, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraManager, UnknownData_SRG0, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyCameraManager, 0x02C0);
		}

		// Class Bounty.BountyCameraPawn
		TEST_METHOD(Class__Bounty__BountyCameraPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, OrbitLock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, ZoomLock, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, UnknownData_1WWG, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AzimuthAngle, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AltitudeAngle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, EquatorialRadius, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, PolarRadius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, EquatorialRadiusMin, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, EquatorialRadiusMax, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, PolarRadiusMin, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, PolarRadiusMax, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, ZoomSpeed, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, ZoomSpeedOrig, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AzimuthAngleMin, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AzimuthAngleMax, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AltitudeAngleMin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, AltitudeAngleMax, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyCameraPawn, UnknownData_QEPI, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyCameraPawn, 0x02C0);
		}

		// Class Bounty.BountyGameCamera
		TEST_METHOD(Class__Bounty__BountyGameCamera)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamera, CamType, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamera, UnknownData_Q7IT, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamera, seatId, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamera, TableID, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamera, UnknownData_72OF, 0x07A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyGameCamera, 0x07B0);
		}

		// Class Bounty.BountyGameCamMover
		TEST_METHOD(Class__Bounty__BountyGameCamMover)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, UnknownData_Z07Q, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, OrbitToGameTimelineCurve, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, GameToOrbitTimelineCurve, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, GameToGameTimelineCurve, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, MatineeToOrbitTimelineCurve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, ActiveTimelinePlayTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, ActiveTimelinePlayValue, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, DeltaTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyGameCamMover, UnknownData_3O8A, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyGameCamMover, 0x0560);
		}

		// Class Bounty.PipeworksGameInstance
		TEST_METHOD(Class__Bounty__PipeworksGameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPipeworksGameInstance, UiManager, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPipeworksGameInstance, SoundManager, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPipeworksGameInstance, 0x01B8);
		}

		// Class Bounty.BountyGameInstance
		TEST_METHOD(Class__Bounty__BountyGameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_X188, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, PreloadedAssets, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_485N, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AvatarAssetsClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, GameClientClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, TableItemAssetsClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UiManagerClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, WebClientClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, LocalPlayerClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, ShutdownMessages, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, LocalSave, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, GameClient, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, WebClient, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, ChatClient, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, PokerGame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, BountySoundMgr, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AIManager, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, CameraManager, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AutoVideoQuality, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, EventRecorder, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AvatarAssets, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, TableItemAssets, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, NpcData, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, FUE, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, FueData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, ClientRomTable, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, CareerModeData, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AIBehaviorsData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, Settings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AutoDebugCmds, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, EmoteData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, SoundData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, SubtitlesData, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, LocalPlayer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, Friends, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, Presence, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, Achievements, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, PlatformEvents, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, PlatformSession, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, AssetLoader, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_4ZHW, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, LoadedState, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UI3Dmode, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_6ZRK, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, InstallCompletedEvent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_R4DM, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, LootCasesUpdatedEvent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, HudHidden, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyGameInstance, UnknownData_5NB0, 0x0499);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyGameInstance, 0x04A0);
		}

		// Class Bounty.BountyGameMode
		TEST_METHOD(Class__Bounty__BountyGameMode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyGameMode, 0x0308);
		}

		// Class Bounty.BountyLetterBoxRule
		TEST_METHOD(Class__Bounty__BountyLetterBoxRule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyLetterBoxRule, 0x0028);
		}

		// Class Bounty.BountyLevelScriptActor
		TEST_METHOD(Class__Bounty__BountyLevelScriptActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyLevelScriptActor, 0x0228);
		}

		// Class Bounty.BountyLocalPlayer
		TEST_METHOD(Class__Bounty__BountyLocalPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, TimedChallenges, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, ProgressChallenges, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, HasSeenAffilationSelectionThisSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_OQN9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, ShellAvatar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, RankedLeaderboardRewardNotificationAggregator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, LootcaseDisplayAggregator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, ProfileUpdated, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, StatsUpdated, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_YXYB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, TimedChallengesUpdated, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, ProgressChallengesUpdated, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_LRQ0, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, ChangeAffiliationEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_KUG7, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, DailyCutReceivedEvent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, DailyCutAvailableEvent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_LD1R, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextBaseAllotment, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextBonusAllotment, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextStreakAllotment, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextBoostAllotment, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextBoostMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, NextTotalAllotment, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, consecutiveAllotments, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, LastAllotmentWithoutBoost, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, LastAllotmentHadBoost, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_EVZU, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, LocalStats, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, LeaderboardRewardContent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, BoostPopupContent, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, GiftPopupContent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, AffiliationSelectionScreen, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalPlayer, UnknownData_T2DL, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyLocalPlayer, 0x03E0);
		}

		// Class Bounty.BountyNotification
		TEST_METHOD(Class__Bounty__BountyNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyNotification, UnknownData_VFQD, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyNotification, CurrentSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyNotification, UnknownData_LK91, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyNotification, 0x03F0);
		}

		// Class Bounty.BountyOnlineSessionClient
		TEST_METHOD(Class__Bounty__BountyOnlineSessionClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyOnlineSessionClient, 0x01E0);
		}

		// Class Bounty.BountySaveGame
		TEST_METHOD(Class__Bounty__BountySaveGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, UnknownData_OFHV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, MPRoundsStarted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, Bankroll, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, OutfitsPurchased, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, DrinksPurchased, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, SmokesPurchased, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, DailyCutChips, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, PlayersBustedT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, PlayersBustedRG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, H2HWon, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, PlayersBustedCurrentT, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, CasinoGamesPlayed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, LaundromatGamesPlayed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, ButcherShopGamesPlayed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, BarGamesPlayed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, PenthouseGamesPlayed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, ConsecutiveHandsWon, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, ConsecutiveDailyCuts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, ChallengesCompleted, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, MPRGChipstackBuyInRatio, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedGamesPlayed, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedSeasonsFinishedTier1, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedSeasonsFinishedTier2, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedSeasonsFinishedTier3, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedSeasonsFinishedTier4, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RankedSeasonsFinishedTier5, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, MPTBubbleVenues, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, CasinoMPTBubbles, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, LaundromatMPTBubbles, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, SlaughterhouseMPTBubbles, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, BarMPTBubbles, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, PenthouseMPTBubbles, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, UnknownData_RJF8, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, OptionsData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, VideoQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, AutoVideoQuality, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, UnknownData_2TS7, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, ViewedScreens, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, EventIds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, RecordFueStatus, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, HasSeenMaxTouristLevelPopup, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, HasSeenMaxHeartsLevelPopup, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, HasSeenMaxSpadesLevelPopup, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, HasSeenMaxClubsLevelPopup, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, HasSeenMaxDiamondsLevelPopup, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountySaveGame, UnknownData_B8ZU, 0x0126);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountySaveGame, 0x0128);
		}

		// Class Bounty.BountyLocalSave
		TEST_METHOD(Class__Bounty__BountyLocalSave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalSave, SaveGameInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalSave, ThreadCopy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyLocalSave, UnknownData_CF91, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyLocalSave, 0x0080);
		}

		// Class Bounty.BountyShellBackground
		TEST_METHOD(Class__Bounty__BountyShellBackground)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellBackground, UnknownData_MC49, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellBackground, MainPanel, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyShellBackground, UnknownData_KTCA, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyShellBackground, 0x03A0);
		}

		// Class Bounty.BountyShellCamera
		TEST_METHOD(Class__Bounty__BountyShellCamera)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyShellCamera, 0x07A0);
		}

		// Class Bounty.BountyShellCamMover
		TEST_METHOD(Class__Bounty__BountyShellCamMover)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellCamMover, ShellCamTimelineCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellCamMover, ActiveTimelinePlayTime, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellCamMover, ActiveTimelinePlayValue, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellCamMover, DeltaTime, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellCamMover, UnknownData_5JNI, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyShellCamMover, 0x0308);
		}

		// Class Bounty.ShellTargetCamComponent
		TEST_METHOD(Class__Bounty__ShellTargetCamComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShellTargetCamComponent, AvatarGender, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShellTargetCamComponent, UnknownData_9007, 0x07C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShellTargetCamComponent, 0x07D0);
		}

		// Class Bounty.BountyShellTarget
		TEST_METHOD(Class__Bounty__BountyShellTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellTarget, MaleTargetComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyShellTarget, FemaleTargetComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyShellTarget, 0x0230);
		}

		// Class Bounty.SoundManager
		TEST_METHOD(Class__Bounty__SoundManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoundManager, UnknownData_AJKL, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoundManager, 0x02C0);
		}

		// Class Bounty.BountySoundManager
		TEST_METHOD(Class__Bounty__BountySoundManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountySoundManager, GatherCardsSound, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountySoundManager, GatherBetsSound, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountySoundManager, 0x02D0);
		}

		// Class Bounty.BountyTargetNodes
		TEST_METHOD(Class__Bounty__BountyTargetNodes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyTargetNodes, TargetsByTable, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyTargetNodes, BackgroundNpcTargets, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyTargetNodes, 0x0240);
		}

		// Class Bounty.BountyToast
		TEST_METHOD(Class__Bounty__BountyToast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, CurrentSetup, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, UnknownData_DQO1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, ChallengeProgressDuration, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, ChallengeCompleteDuration, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, LeaderboardDuration, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, UnknownData_J7J0, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, RewardText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyToast, ProgressText, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyToast, 0x03C8);
		}

		// Class Bounty.BountyPopupData
		TEST_METHOD(Class__Bounty__BountyPopupData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, Background, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, UseFormattedText, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, UnknownData_9IRT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, LeftContent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, RightContent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, BottomContent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPopupData, FullScreenContent, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyPopupData, 0x0050);
		}

		// Class Bounty.UiManager
		TEST_METHOD(Class__Bounty__UiManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, UiPostInitEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, ScreenTransitionFinishedEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, Popup, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, PopupClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, UnknownData_AAN2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, ComponentRefs, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, UnknownData_KAAC, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, LoadedClasses, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiManager, UnknownData_8OS9, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUiManager, 0x0440);
		}

		// Class Bounty.BountyUiManager
		TEST_METHOD(Class__Bounty__BountyUiManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, UnknownData_8QZD, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, ShellTransitionEvent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, GameTransitionEvent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, FatalErrorEvent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, UnknownData_L421, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, ShellBackgroundClass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, GameBackgroundClass, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, ToastClass, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, NotificationClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, ScreensThatAllow3DClickthrough, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, SceneClickableTraceChannel, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, UnknownData_XPQR, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, DefaultNotificationDuration, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, Toast, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, QueuedToasts, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, UnknownData_589Z, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, Notification, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, QueuedNotifications, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyUiManager, UnknownData_B0A4, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyUiManager, 0x0658);
		}

		// Class Bounty.BountyWorldSettings
		TEST_METHOD(Class__Bounty__BountyWorldSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyWorldSettings, 0x03A0);
		}

		// Class Bounty.InGameComponent
		TEST_METHOD(Class__Bounty__InGameComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameComponent, 0x0388);
		}

		// Class Bounty.InGameScreen
		TEST_METHOD(Class__Bounty__InGameScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameScreen, DesiredHudState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameScreen, UnknownData_FNPN, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameScreen, 0x0390);
		}

		// Class Bounty.BustedScreen
		TEST_METHOD(Class__Bounty__BustedScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, RebuyTime, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, CriticalTime, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, StartingColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, CriticalColor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, RebuyAmountText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, BankrollText, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, RebuyMessageText, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, TimerVis, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBustedScreen, UnknownData_NOTY, 0x0401);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBustedScreen, 0x0418);
		}

		// Class Bounty.Card
		TEST_METHOD(Class__Bounty__Card)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACard, UnknownData_4N8H, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACard, 0x0240);
		}

		// Class Bounty.CareerModeData
		TEST_METHOD(Class__Bounty__CareerModeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCareerModeData, GameSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCareerModeData, 0x0040);
		}

		// Class Bounty.Carousel
		TEST_METHOD(Class__Bounty__Carousel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarousel, PanelContents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarousel, UnknownData_7LTX, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCarousel, 0x02A0);
		}

		// Class Bounty.CarouselSlot
		TEST_METHOD(Class__Bounty__CarouselSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarouselSlot, UnknownData_784W, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCarouselSlot, 0x0270);
		}

		// Class Bounty.CfButton
		TEST_METHOD(Class__Bounty__CfButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCfButton, UnknownData_ANJA, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCfButton, ClickedSfx, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCfButton, HoveredSfx, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCfButton, UnknownData_E9M5, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCfButton, 0x0448);
		}

		// Class Bounty.ChatClient
		TEST_METHOD(Class__Bounty__ChatClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, UnknownData_64ER, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, MaxAllowableTimeSinceLastHeard, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, UnknownData_93RJ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, PlayerIsTalkingEvent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, PlayerIsMutedEvent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatClient, UnknownData_XRVA, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatClient, 0x02B0);
		}

		// Class Bounty.SeatSpecificWidget
		TEST_METHOD(Class__Bounty__SeatSpecificWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USeatSpecificWidget, seat, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeatSpecificWidget, UnknownData_J3MT, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeatSpecificWidget, 0x0270);
		}

		// Class Bounty.ChatIndicator
		TEST_METHOD(Class__Bounty__ChatIndicator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, IndicatorVisibility, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, UnknownData_RPYH, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, MutedIndicator, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, TalkingIndicator, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, CurrentBrush, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatIndicator, UnknownData_79XW, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatIndicator, 0x0418);
		}

		// Class Bounty.ClickMenu
		TEST_METHOD(Class__Bounty__ClickMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickMenu, Collapsed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickMenu, UnknownData_LQ5H, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickMenu, 0x0390);
		}

		// Class Bounty.ClientRom
		TEST_METHOD(Class__Bounty__ClientRom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientRom, OnRomUpdated, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientRom, UnknownData_NHXD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClientRom, 0x0E00);
		}

		// Class Bounty.CommunityCards
		TEST_METHOD(Class__Bounty__CommunityCards)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunityCards, UnknownData_SHWX, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunityCards, PotAmountAnimationTime, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunityCards, PotAnimTimeIsPerChip, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommunityCards, UnknownData_VZXK, 0x045D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommunityCards, 0x0460);
		}

		// Class Bounty.ControllerFocusInterface
		TEST_METHOD(Class__Bounty__ControllerFocusInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerFocusInterface, 0x0028);
		}

		// Class Bounty.ControllerFocusScrollBox
		TEST_METHOD(Class__Bounty__ControllerFocusScrollBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerFocusScrollBox, UnknownData_5EIK, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerFocusScrollBox, ScrollCoefficient, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerFocusScrollBox, UnknownData_Z8VC, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerFocusScrollBox, 0x0280);
		}

		// Class Bounty.DailyCutScreen
		TEST_METHOD(Class__Bounty__DailyCutScreen)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDailyCutScreen, 0x0418);
		}

		// Class Bounty.DealManager
		TEST_METHOD(Class__Bounty__DealManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDealManager, UnknownData_KPH8, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDealManager, 0x02C0);
		}

		// Class Bounty.DebugHUD
		TEST_METHOD(Class__Bounty__DebugHUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHUD, UnknownData_QG3U, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugHUD, 0x03B0);
		}

		// Class Bounty.DisplaySubtitlesNotifyState
		TEST_METHOD(Class__Bounty__DisplaySubtitlesNotifyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaySubtitlesNotifyState, SubtitleScreenWidgetBlueprintClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaySubtitlesNotifyState, CurrentSubtitleScreen, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaySubtitlesNotifyState, 0x0060);
		}

		// Class Bounty.ScrollableButtonListComponent
		TEST_METHOD(Class__Bounty__ScrollableButtonListComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollableButtonListComponent, ObjectsInView, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollableButtonListComponent, UnknownData_VI50, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollableButtonListComponent, 0x0398);
		}

		// Class Bounty.DynamicScrollingButtonList
		TEST_METHOD(Class__Bounty__DynamicScrollingButtonList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, TextColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, Justification, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, UnknownData_6B8T, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, Style, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicScrollingButtonList, ButtonPool, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicScrollingButtonList, 0x06A8);
		}

		// Class Bounty.EmoteData
		TEST_METHOD(Class__Bounty__EmoteData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteData, MaxDelayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteData, UnknownData_DO63, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteData, EmoteAnimations, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmoteData, 0x0048);
		}

		// Class Bounty.EmoteMenu
		TEST_METHOD(Class__Bounty__EmoteMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, DefaultCenter, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, Up, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, Down, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, UpDown, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, Left, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, Right, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, LeftRight, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, UnknownData_N72S, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmoteMenu, Grid, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmoteMenu, 0x0410);
		}

		// Class Bounty.EventRecorder
		TEST_METHOD(Class__Bounty__EventRecorder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventRecorder, UnknownData_LTDR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventRecorder, 0x0098);
		}

		// Class Bounty.EventSlot
		TEST_METHOD(Class__Bounty__EventSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventSlot, UnknownData_SPSL, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventSlot, EventTitle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventSlot, UnknownData_V011, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventSlot, 0x02D0);
		}

		// Class Bounty.FeaturedScreen
		TEST_METHOD(Class__Bounty__FeaturedScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeaturedScreen, ItemCycleInterval, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeaturedScreen, UnknownData_6E23, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeaturedScreen, FeaturedItems, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeaturedScreen, UnknownData_Y81L, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeaturedScreen, 0x0378);
		}

		// Class Bounty.FormattedTextWidget
		TEST_METHOD(Class__Bounty__FormattedTextWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, StandardTextStyle, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, EmphasizedTextStyle, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, UiDirectedTextStyle, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, ChipValueTextStyle, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, PlayerNameTextStyle, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, ShopTextStyle, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, ImageSizeMultiplier, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, UnknownData_3LZJ, 0x111C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, AdditionalIcons, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFormattedTextWidget, UnknownData_J8QS, 0x1130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFormattedTextWidget, 0x1140);
		}

		// Class Bounty.FriendList
		TEST_METHOD(Class__Bounty__FriendList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendList, UnknownData_AX17, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendList, 0x06C8);
		}

		// Class Bounty.Friends
		TEST_METHOD(Class__Bounty__Friends)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, UnknownData_IWWM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriends, 0x0080);
		}

		// Class Bounty.FUE
		TEST_METHOD(Class__Bounty__FUE)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, UnknownData_A2UA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, Notification, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, UnknownData_9FKD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, PlayMenuScreen, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, PlayMenuDelay, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, UnknownData_5QXX, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, MainMenuScreen, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, LevelSelectSubMenuScreen, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, LevelSelectScreen, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, ShopScreen, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFUE, UnknownData_NP75, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFUE, 0x01C0);
		}

		// Class Bounty.FueAffectedInterface
		TEST_METHOD(Class__Bounty__FueAffectedInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFueAffectedInterface, 0x0028);
		}

		// Class Bounty.FueData
		TEST_METHOD(Class__Bounty__FueData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, ButtonSeat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, UnknownData_DHGO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, Deals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, Notifications, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, Timings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, UiGlows, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, ForcedHudStates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, VOLines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, Closeups, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, Emotes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, StatesThatHaltGameEvents, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, BranchingVO, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, BoostMultiplierOnTeaGift, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFueData, UnknownData_OLB0, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFueData, 0x0110);
		}

		// Class Bounty.GameClient
		TEST_METHOD(Class__Bounty__GameClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_RNU3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, BPGameServerErrorEvent, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_93Z9, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnTimerStarted, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnTimerHalf, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnTimerCriticalTick, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnTimerExpired, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnTimerStopped, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_5TBY, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, JoinSessionResultEvent, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, BroadcastSessionIdFromPrelobbyEvent, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, LeaveSessionConfirmEvent, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerJoinedTableEvent, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerLeftTableEvent, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_9N10, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, LocalPlayerFinishedTournamentEvent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, BlindsRaisedEvent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, BlindsRaisingNextHandEvent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_JEAV, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, WaitingToStartNextHandEvent, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerTurnEvent, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerBetEvent, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerCalledEvent, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerCheckedEvent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerFoldedEvent, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerRaisedEvent, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerActedEvent, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerReboughtEvent, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, RevealRequestedEvent, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, RevealRequestedAiEvent, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, HandDealtEvent, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, FlopDealtEvent, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, TurnDealtEvent, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, RiverDealtEvent, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, HandEndedEvent, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerBustedEvent, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerEmotedEvent, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, PlayerRevealedEvent, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_Z14U, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, LobbyCountdownStartedEvent, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, LobbyCountdownStoppedEvent, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameClient, UnknownData_6W2A, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameClient, 0x0AB0);
		}

		// Class Bounty.GameNotification
		TEST_METHOD(Class__Bounty__GameNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNotification, UnknownData_MG76, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNotification, 0x03A0);
		}

		// Class Bounty.GameResultsScreen
		TEST_METHOD(Class__Bounty__GameResultsScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_EV5E, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, ResultsSfx, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, MainTitleInAnimation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, GameResultsInAnimation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, PerformanceInAnimation, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RewardsRepAddedAnimation, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RewardsBoostAnimation, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RewardsIconsLoopAnimation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RewardsIconsScrollerInAnimation, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, GameResultsOutAnimation, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedResultsInAnimation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedResultsProvisionalInAnimation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedUpAnimation, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedDownAnimation, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedResultsOutAnimation, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, Animations, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_T4AB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RewardWidgetClass, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_W68L, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, ShouldAnimate, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_RTH0, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, CurrentRewardInLoop, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, lvlBefore, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, lvlAfter, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, lvlProgBefore, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, lvlProgAfter, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, MeterAnimating, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, ReadyToScrollRewards, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_89VU, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RepBeforeBase, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RepAfterBase, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RepAfterBoost, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedUp, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, RankedDown, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_FVPK, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, ProvisionalStatus, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, HasLootCasesToShow, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_QGN7, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, LevelupRewards, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_XI2O, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, CycleButtonsEnabled, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, UnknownData_YNLU, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameResultsScreen, NumberOfPlayers, 0x047C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameResultsScreen, 0x0480);
		}

		// Class Bounty.GenericLoadingScreen
		TEST_METHOD(Class__Bounty__GenericLoadingScreen)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericLoadingScreen, 0x0418);
		}

		// Class Bounty.Glowable
		TEST_METHOD(Class__Bounty__Glowable)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlowable, 0x0028);
		}

		// Class Bounty.HandResultsManager
		TEST_METHOD(Class__Bounty__HandResultsManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHandResultsManager, UnknownData_U9H7, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandResultsManager, 0x0360);
		}

		// Class Bounty.HoleCardsComponent
		TEST_METHOD(Class__Bounty__HoleCardsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, UnknownData_1RY4, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, DealingHighCardMsgDuration, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, HandDealt, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, UnknownData_HLS9, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, NumCardsInHand, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, UnknownData_RNOD, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, BoostMultiplierText, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, BoostMultiplierVis, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, RepRewardAnimating, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleCardsComponent, UnknownData_8NGD, 0x045A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleCardsComponent, 0x04E0);
		}

		// Class Bounty.InGameHUD
		TEST_METHOD(Class__Bounty__InGameHUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_9P94, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ActionQueuedEvent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RadialMenuCreatedEvent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, HudStateChangedEvent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, Railbirding, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, PlayerHasPlayedInitialHand, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_UFIK, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, AllInSeat, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_L9CG, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChatIndicatorOffsetFromNameplate, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_AQVB, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, Nameplates, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ActionIcons, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChipStacks, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChatIndicators, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ClickMenu, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, GameNotification, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RadialMenu, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RadialMenu2D, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RadialMenu3D, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, HoleCards, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, CommunityCards, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, PauseMenu, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, CardReference, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, EmoteMenu, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RevealSelectionScreen, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, AllInScreen, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, WinRevealScreen, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, BustedScreen, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, GameResultsScreen, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, StoreScreen, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, SitoutScreen, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_V76U, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ConsecutiveMissedTurns, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_4V6B, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ActionIconActorClass, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, NameplateActorClass, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChatIndicatorActorClass, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChipStackActorClass, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, TableRefillActorClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, TableRefillComponentClass, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, PlayerTurnSfx, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, BlindsNextHandMsgDuration, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, BlindsRaisedMsgDuration, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RevealingCardsMsgDuration, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, RefillSuccessMsgDuration, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, MandatoryPlayerRevealDelay, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, VoluntaryPlayerRevealDelay, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, TableFocusStickDeadZoneSquared, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, ChipStackOffset, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, BlankScreenClass, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameHUD, UnknownData_HTBM, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameHUD, 0x06B0);
		}

		// Class Bounty.StoreBase
		TEST_METHOD(Class__Bounty__StoreBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_DCKG, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, CurrentCategory, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_5K3L, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ItemDesc, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ItemCost, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, RefillCost, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, OrigItemCost, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, OrigRefillCost, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ChipAmount, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BonusChipsAmount, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BaseChipsAmount, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BoostMultiText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BoostHandsRemainingText, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, PriceTextColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, RefillPriceTextColor, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ItemRarity, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_WQZO, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, Bankroll, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, PageTitle, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ABtnText, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ABtnActive, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, XBtnActive, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, YBtnActive, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, XBtnVis, 0x0583);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, YBtnVis, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_W7BF, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BuyLabelText, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BuyPriceVis, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, PriceSlashVis, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, RefillPriceVis, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, RefillPriceSlashVis, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ChipBundleAmountVis, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BoostHandsVis, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BoostInfoVis, 0x05A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BtnGroupVis, 0x05A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, LegendVis, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, FeaturedVis, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_FCLW, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, CategoryChangeSfx, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, PagingSfx, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, ItemHighlightSfx, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, PurchaseConfirmedSfx, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnequipSfx, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, GiftSfx, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, NormalPriceColor, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, NsfPriceColor, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, BoostSelectClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreBase, UnknownData_CBAX, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreBase, 0x09F8);
		}

		// Class Bounty.InGameStore
		TEST_METHOD(Class__Bounty__InGameStore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, ConfirmationVis, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, UnknownData_OP9M, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, SeatSelectorClass, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, ConfirmationTitle, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, ConfirmationText, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, PropertiesVis, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, UnknownData_L4OO, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, MinimizeAnimation, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, MaximizeAnimation, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameStore, UnknownData_INMD, 0x0A70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameStore, 0x0A98);
		}

		// Class Bounty.iTAux
		TEST_METHOD(Class__Bounty__iTAux)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, printDebugMessages, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, printErrorMessages, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, tickWhenPaused, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, ignoreTimeDilation, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, defaultTimerInterval, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTAux, currentTweens, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AiTAux, 0x0238);
		}

		// Class Bounty.iTInterface
		TEST_METHOD(Class__Bounty__iTInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UiTInterface, 0x0028);
		}

		// Class Bounty.iTSpline
		TEST_METHOD(Class__Bounty__iTSpline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTSpline, spline, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AiTSpline, 0x0228);
		}

		// Class Bounty.iTween
		TEST_METHOD(Class__Bounty__iTween)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UiTween, 0x0028);
		}

		// Class Bounty.iTweenEvent
		TEST_METHOD(Class__Bounty__iTweenEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_0QJ8, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, aux, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, coordinateSpace, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, sweep, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_MC9Q, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, timerInterval, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vectorConstraints, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vector2DConstraints, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, rotatorConstraints, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, delayType, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, tickType, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, easeType, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_PUPB, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, customEaseTypeCurve, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, punchAmplitude, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, loopType, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, Orientation, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_NL2N, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, OrientationTarget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, orientationSpeed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, tickWhenPaused, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, ignoreTimeDilation, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, EventType, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_JFLS, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, SweepResult, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, shouldTick, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_9NKS, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, actorTweening, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, widgetTweening, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, componentTweening, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, onTweenStartTarget, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, onTweenTickTarget, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, onTweenLoopTarget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, onTweenCompleteTarget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, tweenName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, tickTypeValue, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, Alpha, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, playingBackward, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_C1IA, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, numberOfLoopSections, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, actorTickableWhenPaused, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_7KVJ, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, actorTimeDilation, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, tweenIndex, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, Delay, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, SplineComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, interpolateToSpline, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, switchPathOrientationDirection, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_NGLS, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, generatedPointDistance, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, destroySplineObject, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_T5FB, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vectorFrom, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vectorTo, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vectorTemp, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vectorCurrent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, rotatorFrom, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, rotatorTo, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, rotatorTemp, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, rotatorCurrent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, shortestPath, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, UnknownData_FDEO, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vector2DFrom, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vector2DTo, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vector2DTemp, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, vector2DCurrent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, floatFrom, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, floatTo, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, floatTemp, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, floatCurrent, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, linearColorFrom, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, linearColorTo, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, linearColorTemp, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AiTweenEvent, linearColorCurrent, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AiTweenEvent, 0x0450);
		}

		// Class Bounty.LeaderboardRewardDisplay
		TEST_METHOD(Class__Bounty__LeaderboardRewardDisplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, RewardBox, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, Tier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, LeaderboardType, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, UnknownData_USGU, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, ChipValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRewardDisplay, UnknownData_FSV8, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardRewardDisplay, 0x0298);
		}

		// Class Bounty.LeaderboardsComparePanel
		TEST_METHOD(Class__Bounty__LeaderboardsComparePanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsComparePanel, Data, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsComparePanel, Titles, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsComparePanel, Values, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardsComparePanel, 0x0478);
		}

		// Class Bounty.LeaderboardsScreen
		TEST_METHOD(Class__Bounty__LeaderboardsScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, LeaderboardType, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, UnknownData_8EWF, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, NextResetTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, UnknownData_N0J8, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, FriendsOnly, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, UnknownData_0AKG, 0x0443);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, ClickSfx, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, Slots, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, SelectedSlot, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, SelfComparePanel, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, OtherComparePanel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, SlotsPerPage, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, IsLoading, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsScreen, UnknownData_N7O1, 0x047D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardsScreen, 0x0508);
		}

		// Class Bounty.LeaderboardsSlot
		TEST_METHOD(Class__Bounty__LeaderboardsSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsSlot, Data, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsSlot, HasData, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsSlot, IsFriend, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardsSlot, UnknownData_ENWC, 0x02D2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardsSlot, 0x02D8);
		}

		// Class Bounty.LoadingProgressBar
		TEST_METHOD(Class__Bounty__LoadingProgressBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar, LoadingVis, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar, UnknownData_W3YR, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingProgressBar, LoadProgress, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingProgressBar, 0x0350);
		}

		// Class Bounty.LobbyBase
		TEST_METHOD(Class__Bounty__LobbyBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, UnknownData_8550, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, PopulationText, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, ChatButtonText, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, GameTypeViewModel, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, VenueViewModel, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, BuyInViewModel, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, MaxPlayerViewModel, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, PrivacyViewModel, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, LobbyParticipants, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, TournamentPayoutWidget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, PrelobbyThrobberRef, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, CountdownBoxRef, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, ContentRef, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, SelectSfx, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, LevelLoadSfx, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, LobbyText, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, GoReadyText, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, BuyInData, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, GamePopularity, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, GameType, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, GameTypeLobby, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, venue, 0x058B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, UnknownData_IZ9K, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, AvailableVenues, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, MaxPlayers, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, IsPrivate, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, IsQuickplay, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBase, UnknownData_1TPH, 0x05A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyBase, 0x05B0);
		}

		// Class Bounty.LobbyParticipants
		TEST_METHOD(Class__Bounty__LobbyParticipants)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyParticipants, VerticalBox, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyParticipants, UnknownData_YZQ8, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyParticipants, 0x0458);
		}

		// Class Bounty.PokerPlayer
		TEST_METHOD(Class__Bounty__PokerPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerPlayer, UnknownData_ZG66, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerPlayer, PickupMgr, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerPlayer, UnknownData_A8XX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerPlayer, OnInitFinishedDelegate, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerPlayer, UnknownData_T8ZO, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APokerPlayer, 0x0368);
		}

		// Class Bounty.LocalPokerPlayer
		TEST_METHOD(Class__Bounty__LocalPokerPlayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocalPokerPlayer, 0x0368);
		}

		// Class Bounty.LootcaseDisplayAggregator
		TEST_METHOD(Class__Bounty__LootcaseDisplayAggregator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootcaseDisplayAggregator, LootcaseDataQueue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootcaseDisplayAggregator, 0x0038);
		}

		// Class Bounty.LootCaseMenu
		TEST_METHOD(Class__Bounty__LootCaseMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, UnknownData_L6O7, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, IsShowingReward, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, OpenQueued, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, CurrentRarity, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, UnknownData_IQU6, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, CurrentReward, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootCaseMenu, UnknownData_ZHLK, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootCaseMenu, 0x04A8);
		}

		// Class Bounty.MainLevelScriptActor
		TEST_METHOD(Class__Bounty__MainLevelScriptActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainLevelScriptActor, 0x0228);
		}

		// Class Bounty.MatineeAvatar
		TEST_METHOD(Class__Bounty__MatineeAvatar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeAvatar, UnknownData_7G1I, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeAvatar, seatId, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeAvatar, UnknownData_9UZV, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeAvatar, MaleFemalePairingKey, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeAvatar, 0x0318);
		}

		// Class Bounty.MatineeAvatar_M
		TEST_METHOD(Class__Bounty__MatineeAvatar_M)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeAvatar_M, 0x0318);
		}

		// Class Bounty.MatineeAvatar_F
		TEST_METHOD(Class__Bounty__MatineeAvatar_F)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeAvatar_F, 0x0318);
		}

		// Class Bounty.MatineeNameplate
		TEST_METHOD(Class__Bounty__MatineeNameplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeNameplate, NameObj, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeNameplate, NicknameObj, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeNameplate, BackgroundObj, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeNameplate, 0x0360);
		}

		// Class Bounty.ModalPopup
		TEST_METHOD(Class__Bounty__ModalPopup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalPopup, UnknownData_SZ47, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalPopup, CurrentSetup, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalPopup, PriorityQueue, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalPopup, 0x03D0);
		}

		// Class Bounty.MouseHelper
		TEST_METHOD(Class__Bounty__MouseHelper)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHelper, 0x0260);
		}

		// Class Bounty.Nameplate
		TEST_METHOD(Class__Bounty__Nameplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, UnknownData_8R8K, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, MouseHovered, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, UnknownData_984S, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, AtSeat, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, UnknownData_D7WZ, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameplate, 0x0310);
		}

		// Class Bounty.NewsScreen
		TEST_METHOD(Class__Bounty__NewsScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, CurrentScrollBox, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, GeneralScrollBox, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, SalesScrollBox, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, NotesScrollBox, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, InSubMenu, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, UnknownData_FWPD, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, GeneralBP, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, UnknownData_MCCJ, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, SaleBP, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, UnknownData_BA7S, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, NoteBP, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, UnknownData_PHPW, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsScreen, Style, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewsScreen, 0x0710);
		}

		// Class Bounty.Nicknames
		TEST_METHOD(Class__Bounty__Nicknames)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, Scroller, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, UnknownData_4UZB, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, NumberOfCols, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, RowsPerPage, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, RowHeight, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, ScrollSpeed, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, CurrentNickname, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, CurrentSelected, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, UnknownData_7GV9, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, Options, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNicknames, UnknownData_QD7V, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNicknames, 0x0488);
		}

		// Class Bounty.NotificationAggregator
		TEST_METHOD(Class__Bounty__NotificationAggregator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationAggregator, UnknownData_QI1C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotificationAggregator, 0x0088);
		}

		// Class Bounty.NpcData
		TEST_METHOD(Class__Bounty__NpcData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNpcData, PredefinedNpcs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNpcData, RndNpcs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNpcData, VenueDistributions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNpcData, ExcludeFromAutoSelectNpcs, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNpcData, RandomNames, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNpcData, 0x00A0);
		}

		// Class Bounty.NpcPokerPlayer
		TEST_METHOD(Class__Bounty__NpcPokerPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANpcPokerPlayer, UnknownData_S6TL, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANpcPokerPlayer, 0x0378);
		}

		// Class Bounty.OptionsScreen
		TEST_METHOD(Class__Bounty__OptionsScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsScreen, GameSavedNotificationTime, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsScreen, UnknownData_JSFJ, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsScreen, PreviewSave, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsScreen, 0x0460);
		}

		// Class Bounty.PipeworksBlueprintLibrary
		TEST_METHOD(Class__Bounty__PipeworksBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPipeworksBlueprintLibrary, 0x0028);
		}

		// Class Bounty.PlatformEvents
		TEST_METHOD(Class__Bounty__PlatformEvents)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEvents, UnknownData_NABZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEvents, 0x01D0);
		}

		// Class Bounty.PlatformSession
		TEST_METHOD(Class__Bounty__PlatformSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformSession, UnknownData_E9XA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformSession, 0x0230);
		}

		// Class Bounty.PlayerManager
		TEST_METHOD(Class__Bounty__PlayerManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerManager, Dealer, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerManager, Players, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerManager, BgCharacters, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerManager, UnknownData_UKE0, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerManager, 0x0230);
		}

		// Class Bounty.PlayerSettings
		TEST_METHOD(Class__Bounty__PlayerSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerSettings, 0x0028);
		}

		// Class Bounty.PlayMenu
		TEST_METHOD(Class__Bounty__PlayMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMenu, RankedLobbyTypeChoice, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMenu, 0x0420);
		}

		// Class Bounty.PokerGame
		TEST_METHOD(Class__Bounty__PokerGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, UnknownData_D3FU, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, IntroFinishedEvent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, AllRequiredAvatarsSpawnedEvent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, LevelLoadedEvent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, AnyIntroStartedEvent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, StartedH2HIntroEvent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, StartedIntroEvent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, StartedBossIntroEvent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, StartFreezeFrameEvent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, FreezeFrameEndEvent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, BeginRailbirdingEvent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APokerGame, PlayerActionEvent, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APokerGame, 0x0390);
		}

		// Class Bounty.PopupWidgetInterface
		TEST_METHOD(Class__Bounty__PopupWidgetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPopupWidgetInterface, 0x0028);
		}

		// Class Bounty.Presence
		TEST_METHOD(Class__Bounty__Presence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPresence, UnknownData_2SGG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPresence, 0x0090);
		}

		// Class Bounty.PrestigeMenu
		TEST_METHOD(Class__Bounty__PrestigeMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrestigeMenu, Items, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrestigeMenu, RankRequestInFlight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrestigeMenu, UnknownData_XCAB, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrestigeMenu, AffiliationSelectionScreen, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrestigeMenu, 0x0438);
		}

		// Class Bounty.RadialActionMenu
		TEST_METHOD(Class__Bounty__RadialActionMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, UnknownData_7ZF4, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, Buttons, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RadialMeterStickDeadRadiusSquared, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, TurnStartInputBlockDelay, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, InitialIntervalBigBlinds, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, MaxSnaps, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, SectionChangeSfx, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, BetSnapSfx, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, TimerSfx, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, TimerExpiredSfx, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, ShowSfx, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, HideSfx, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, SelectSfx, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, UserRaiseCancelPending, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, UnknownData_QWC0, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, SectionsGlowingForTutorial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, HoveredRaiseText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, CheckCallText, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, BetRaiseText, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, LeftValueText, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RightValueText, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, FoldText, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PresetDisplayText, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, CheckVis, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, CallVis, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, BetVis, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RaiseVis, 0x0483);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, FoldVis, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, CheckFoldVis, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_CheckVis, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_CallVis, 0x0487);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_BetVis, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_RaiseVis, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_FoldVis, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_CheckFoldVis, 0x048B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PD_AllinVis, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RaiseMeterButtonsVis, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, PresetDisplayButtonsVis, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, ULTutorialGlowVis, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, URTutorialGlowVis, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, DNTutorialGlowVis, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RaiseMeterPageRightGlowVis, 0x0492);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, RaiseMeterPageLeftGlowVis, 0x0493);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialActionMenu, UnknownData_KBIS, 0x0494);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialActionMenu, 0x0770);
		}

		// Class Bounty.RadialMeter
		TEST_METHOD(Class__Bounty__RadialMeter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, UnknownData_QAJ4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, RotateFront, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, WipeFront, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, PlayAnimatingSound, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, UnknownData_TS8P, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, StartAngle, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, EndAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, UnknownData_SIU1, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, DefaultEaseCurve, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, DefaultCurveScaler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, LinearSpoolTime, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialMeter, UnknownData_I41H, 0x0282);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialMeter, 0x0348);
		}

		// Class Bounty.RankedInfoWidget
		TEST_METHOD(Class__Bounty__RankedInfoWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, RankedType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, IconMode, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, RibbonMode, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Source, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, ShowPlayers, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Tier, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Provisional, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, IconTier, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, rating, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, UnknownData_PDZP, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, TierText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, RatingText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, RatingRangeText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, BuyinText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, EntryFeeText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Payout1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Payout2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Payout3, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, ShowRatingChange, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, UnknownData_WKTA, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, RatingChangeText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, Rewards, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedInfoWidget, PlayerSlots, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedInfoWidget, 0x0370);
		}

		// Class Bounty.RankedLobby
		TEST_METHOD(Class__Bounty__RankedLobby)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, LevelLoadSfx, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, SelectSfx, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, BackSfx, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, InformationalPage, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, HeadToHeadButton, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TournamentButton, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, SearchingAnimT, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, SearchingAnimH, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, ShowTablesAnim, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, RewardInfoT, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, RewardInfoH, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoT, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoH, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoC, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoL1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoL2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoR1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoR2, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, TableInfoX, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, RatingInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, RewardsAvailable, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, UnknownData_6UX9, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, CountdownTime, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, InTransition, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, UnknownData_DXFK, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, Rewards, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, UnknownData_HK6C, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, NumberOfPlayers, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, UnknownData_OFFN, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, lobbyType, 0x061F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobby, UnknownData_I9CJ, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedLobby, 0x0648);
		}

		// Class Bounty.RankedLobbyInformational
		TEST_METHOD(Class__Bounty__RankedLobbyInformational)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobbyInformational, LeaderboardRewards, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedLobbyInformational, RankedInfoWidgets, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedLobbyInformational, 0x03A8);
		}

		// Class Bounty.RankedPlayerWidget
		TEST_METHOD(Class__Bounty__RankedPlayerWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedPlayerWidget, UnknownData_6HF6, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedPlayerWidget, 0x0280);
		}

		// Class Bounty.RefillCallout
		TEST_METHOD(Class__Bounty__RefillCallout)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URefillCallout, 0x0348);
		}

		// Class Bounty.RewardIcon
		TEST_METHOD(Class__Bounty__RewardIcon)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URewardIcon, 0x0260);
		}

		// Class Bounty.RndAnimInstance
		TEST_METHOD(Class__Bounty__RndAnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, UnknownData_X09I, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, AnimsToLoad, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, Anims, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, UnknownData_ENKS, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, AnimLoadingFinishedEvent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URndAnimInstance, UnknownData_QDXP, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URndAnimInstance, 0x0310);
		}

		// Class Bounty.RndAnimTarget
		TEST_METHOD(Class__Bounty__RndAnimTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARndAnimTarget, dir, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARndAnimTarget, MaleAnims, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARndAnimTarget, FemaleAnims, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARndAnimTarget, 0x02A0);
		}

		// Class Bounty.SceneClickable
		TEST_METHOD(Class__Bounty__SceneClickable)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneClickable, 0x0028);
		}

		// Class Bounty.ScrollingTextWidget
		TEST_METHOD(Class__Bounty__ScrollingTextWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, Lines, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, HeaderStyle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, SubheaderStyle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, BodyStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, ContentPadding, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollingTextWidget, FormattedWidgetClass, 0x09F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollingTextWidget, 0x09F8);
		}

		// Class Bounty.SelectButton
		TEST_METHOD(Class__Bounty__SelectButton)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectButton, 0x0260);
		}

		// Class Bounty.Settings
		TEST_METHOD(Class__Bounty__Settings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, avatar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, AvatarAnim, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, PickupMgr, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, DealMgr, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, GenderSelectScreen, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, CardAtlas, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, PotResults, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, VideoOptions, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, ChatOptions, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, Venues, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, Cameras, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, Loading, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, FreezeFrame, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, UnknownData_DY26, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, Misc, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettings, ShutdownNotificationIntervals, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettings, 0x0380);
		}

		// Class Bounty.ShellAvatar
		TEST_METHOD(Class__Bounty__ShellAvatar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShellAvatar, UnknownData_0P6Z, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShellAvatar, 0x0470);
		}

		// Class Bounty.ShellAvatarAnimInstance
		TEST_METHOD(Class__Bounty__ShellAvatarAnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShellAvatarAnimInstance, UnknownData_Q0XH, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShellAvatarAnimInstance, Anims, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShellAvatarAnimInstance, UnknownData_R7P9, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShellAvatarAnimInstance, 0x0380);
		}

		// Class Bounty.ShellAvatarTarget
		TEST_METHOD(Class__Bounty__ShellAvatarTarget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShellAvatarTarget, 0x0220);
		}

		// Class Bounty.GenderSelectAvatarTarget
		TEST_METHOD(Class__Bounty__GenderSelectAvatarTarget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGenderSelectAvatarTarget, 0x0220);
		}

		// Class Bounty.ShutdownMessages
		TEST_METHOD(Class__Bounty__ShutdownMessages)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShutdownMessages, UnknownData_8YTS, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShutdownMessages, 0x0240);
		}

		// Class Bounty.SitoutScreen
		TEST_METHOD(Class__Bounty__SitoutScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USitoutScreen, StartColor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USitoutScreen, CriticalColor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USitoutScreen, BootedText, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USitoutScreen, SitOutDescriptionText, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USitoutScreen, UnknownData_ODHG, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USitoutScreen, 0x0418);
		}

		// Class Bounty.SoundData
		TEST_METHOD(Class__Bounty__SoundData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundData, AvatarAssetSelectorSpinnerLoop, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundData, AvatarAssetSelectorSpinnerStop, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundData, MeterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundData, LevelUp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundData, ScrollingTick, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundData, 0x0058);
		}

		// Class Bounty.StartupScreen
		TEST_METHOD(Class__Bounty__StartupScreen)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartupScreen, 0x0348);
		}

		// Class Bounty.StatsPanel
		TEST_METHOD(Class__Bounty__StatsPanel)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanel, 0x0388);
		}

		// Class Bounty.StatsPanelSlot
		TEST_METHOD(Class__Bounty__StatsPanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelSlot, NameLabelRef, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelSlot, ValueLabelRef, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanelSlot, 0x0270);
		}

		// Class Bounty.StoreFront
		TEST_METHOD(Class__Bounty__StoreFront)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreFront, StoreScreen, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreFront, FeaturedTitleText, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreFront, UnknownData_MTDW, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreFront, 0x0448);
		}

		// Class Bounty.StoreItemContainer
		TEST_METHOD(Class__Bounty__StoreItemContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, UnknownData_FUZ4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, UseBlankFirstRow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, UnknownData_JHMZ, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, SlotPaddingTop, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, Columns, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, RowsOnScreen, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, RowHeight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, ScrollSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, WidgetClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, SelectionClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, FillerClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, UnknownData_8HLM, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, FillerPool, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, WidgetPool, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemContainer, UnknownData_JEH2, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemContainer, 0x0330);
		}

		// Class Bounty.StoreItemDisplayBase
		TEST_METHOD(Class__Bounty__StoreItemDisplayBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, Data, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, FeaturedVis, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, OwnedVis, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, EquippedVis, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, LockedVis, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, PriceSlashVis, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, MaleIconVis, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, FemaleIconVis, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, BoostInfoVis, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, LootCaseInfoVis, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, AffiliationInfoVis, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, InnerGlowVis, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, UnknownData_RO9Y, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, LockedText, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, BoostAmountText, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, BoostCountText, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, Thumbnail, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, Rarity, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, affiliation, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, UnknownData_946E, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, AffiliationRank, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemDisplayBase, UnknownData_LTW0, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemDisplayBase, 0x0488);
		}

		// Class Bounty.StoreItemSelection
		TEST_METHOD(Class__Bounty__StoreItemSelection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemSelection, 0x0488);
		}

		// Class Bounty.StoreItemWidget
		TEST_METHOD(Class__Bounty__StoreItemWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, ParentContainer, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemWidget, 0x0490);
		}

		// Class Bounty.StoreScreen
		TEST_METHOD(Class__Bounty__StoreScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreen, FriendSelectorClass, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreen, DownloadingVis, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreen, UnknownData_SMWZ, 0x0A21);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreScreen, 0x0A60);
		}

		// Class Bounty.StoreSeatSelector
		TEST_METHOD(Class__Bounty__StoreSeatSelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreSeatSelector, UnknownData_RNP6, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreSeatSelector, 0x06C8);
		}

		// Class Bounty.SubtitleScreen
		TEST_METHOD(Class__Bounty__SubtitleScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleScreen, SubtitledAnimationName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleScreen, SubtitledAnimationText, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubtitleScreen, 0x03B0);
		}

		// Class Bounty.SubtitlesData
		TEST_METHOD(Class__Bounty__SubtitlesData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitlesData, SubtitledAnimations, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubtitlesData, 0x0040);
		}

		// Class Bounty.TableItemAssets
		TEST_METHOD(Class__Bounty__TableItemAssets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, UnknownData_HTSC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, SingleChipPath, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardPath, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, DeckPath, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, DealerButtonPath, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, DefaultBlobShadowPath, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardBackPath_BikerBar, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardBackPath_Casino, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardBackPath_Laundromat, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardBackPath_Penthouse, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardBackPath_SlaughterHouse, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, StackSizePercentTable, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, BetSizePercentTable, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, PotSizePercentTable, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, UnknownData_EN6J, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, Card, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, Deck, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, DealerButton, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, SingleChip, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, DeafaultBlobShadow, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CurCardBackTexture, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CurCardFaceTexture, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CurCardBackTexturePath, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CurCardFaceTexturePath, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardFaceTwoTonePath, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, CardFaceFourTonePath, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, OnInitFinishedDelegate, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemAssets, UnknownData_Z0WF, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATableItemAssets, 0x04E0);
		}

		// Class Bounty.TableItemPreviewActor
		TEST_METHOD(Class__Bounty__TableItemPreviewActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemPreviewActor, StoreClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableItemPreviewActor, UnknownData_3DC3, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATableItemPreviewActor, 0x02B0);
		}

		// Class Bounty.TableTarget
		TEST_METHOD(Class__Bounty__TableTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, TableID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, Target, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, SeatTarget, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, UnknownData_CK0H, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, seatId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, IsSpawnLocation, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATableTarget, UnknownData_99P1, 0x022D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATableTarget, 0x0230);
		}

		// Class Bounty.TickableImage
		TEST_METHOD(Class__Bounty__TickableImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickableImage, UnknownData_7DRD, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTickableImage, 0x0268);
		}

		// Class Bounty.TimerSequence
		TEST_METHOD(Class__Bounty__TimerSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimerSequence, UnknownData_UKG6, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimerSequence, 0x0238);
		}

		// Class Bounty.TitleScreen
		TEST_METHOD(Class__Bounty__TitleScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, UnknownData_UZ1K, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, LoginMessageScreen, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, EulaScreen, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, SignInMessage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, MessageVis, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, ButtonVis, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, UnknownData_YDTR, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, PlayerSignedIn, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleScreen, UnknownData_LZUY, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitleScreen, 0x04A0);
		}

		// Class Bounty.TournamentPayoutWidget
		TEST_METHOD(Class__Bounty__TournamentPayoutWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTournamentPayoutWidget, UnknownData_7LCI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTournamentPayoutWidget, Payouts, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTournamentPayoutWidget, EntryFee, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTournamentPayoutWidget, UnknownData_S91A, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTournamentPayoutWidget, 0x0298);
		}

		// Class Bounty.TransformInterpolator
		TEST_METHOD(Class__Bounty__TransformInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformInterpolator, UnknownData_IS9O, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformInterpolator, 0x02C0);
		}

		// Class Bounty.UiComponent3D
		TEST_METHOD(Class__Bounty__UiComponent3D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiComponent3D, WidgetComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiComponent3D, ChildComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiComponent3D, UiManager, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiComponent3D, AcceptsMouseInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUiComponent3D, UnknownData_HEHD, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUiComponent3D, 0x0240);
		}

		// Class Bounty.UiComponentChild
		TEST_METHOD(Class__Bounty__UiComponentChild)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUiComponentChild, 0x0028);
		}

		// Class Bounty.UiSpinnerViewModel
		TEST_METHOD(Class__Bounty__UiSpinnerViewModel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiSpinnerViewModel, CurrentText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiSpinnerViewModel, NextEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiSpinnerViewModel, PrevEnabled, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUiSpinnerViewModel, UnknownData_YPBD, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUiSpinnerViewModel, 0x0048);
		}

		// Class Bounty.VideoOptionsScreen
		TEST_METHOD(Class__Bounty__VideoOptionsScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoOptionsScreen, UnknownData_6N9D, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoOptionsScreen, DisplayMode, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoOptionsScreen, Quality, 0x046C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoOptionsScreen, 0x0470);
		}

		// Class Bounty.WebClient
		TEST_METHOD(Class__Bounty__WebClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWebClient, UnknownData_17ZV, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWebClient, 0x0720);
		}

		// Class Bounty.WidgetActor3D
		TEST_METHOD(Class__Bounty__WidgetActor3D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWidgetActor3D, 0x0220);
		}

		// Class Bounty.WinRevealScreen
		TEST_METHOD(Class__Bounty__WinRevealScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWinRevealScreen, UnknownData_UTD9, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWinRevealScreen, 0x03B0);
		}

		// Class Engine.Actor
		TEST_METHOD(Class__Engine__Actor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_A6I1, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_0Q49, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_3B9B, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_7QBB, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_VND7, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_20OZ, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// Class Engine.AnimNotify
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_KINE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// Class Engine.ActorComponent
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_XO09, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_VS4Q, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_3A55, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_TY18, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_RZHB, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// Class Engine.SceneComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_1HND, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_2QAV, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_1UXY, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_S0J2, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0200);
		}

		// Class Engine.BlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// Class Engine.ReverbEffect
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_RLK0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_GRXV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// Class Engine.BlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_KKMV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// Class Engine.OnlineBlueprintCallProxyBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// Class Engine.Player
		TEST_METHOD(Class__Engine__Player)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_BT5R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_XV73, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// Class Engine.NetConnection
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_Q8OW, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, playerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_IS2V, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_T2RK, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_1OQ9, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// Class Engine.NetDriver
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_3OS6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_X2AY, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8UE1, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_WD3N, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_B9SD, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_3928, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_DVRV, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_3P96, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_R4R2, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_Y08T, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// Class Engine.OnlineEngineInterface
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// Class Engine.OnlineSession
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// Class Engine.PrimitiveComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_S9LV, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_DDBB, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_A6BF, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_38J0, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_IVJ7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_SZPI, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_YPZE, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_JN17, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0440);
		}

		// Class Engine.MeshComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_4KCH, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_HAKA, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0470);
		}

		// Class Engine.SkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_3AIQ, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_6H2Y, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_2GYN, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_88A3, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_I1ZB, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_DBOP, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0ROG, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_DPY9, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VXR5, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0690);
		}

		// Class Engine.SkeletalMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_AFQT, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_YUQC, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_3FVI, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ZMX8, 0x08A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_B3AD, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_OZ4S, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_DC0U, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_TEIN, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4JLD, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IZBB, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_V9K1, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_DNDE, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_N7ZB, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_M6MX, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_99KS, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ED0);
		}

		// Class Engine.AnimInstance
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_MCXY, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_Y3N0, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_GMS2, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02C0);
		}

		// Class Engine.AudioComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GDBT, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_4LPC, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_A476, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IOQL, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_SMO2, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_HVSI, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_O34S, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NB81, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_TJYQ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_69AL, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_FL5T, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_8Q3O, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// Class Engine.AssetImportData
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// Class Engine.AssetUserData
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// Class Engine.FXSystemComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0440);
		}

		// Class Engine.FXSystemAsset
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// Class Engine.AnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_JY6B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// Class Engine.CameraShakeBase
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_NOJ7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_HHQN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x00A0);
		}

		// Class Engine.Subsystem
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_XGEO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// Class Engine.DynamicSubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// Class Engine.EngineSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// Class Engine.MovementComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_3NLL, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_U2YG, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_W5BQ, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// Class Engine.NavMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_BNDP, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// Class Engine.PawnMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// Class Engine.DataAsset
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// Class Engine.Pawn
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_MEL9, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_BG8Y, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_UIU3, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_NROQ, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_9UO7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_IWVA, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// Class Engine.SoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_Z0ZW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// Class Engine.SoundEffectSourcePreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// Class Engine.SoundEffectSubmixPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// Class Engine.StaticMeshActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_7ZB3, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// Class Engine.TargetPoint
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// Class Engine.CameraActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_1KNK, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_F0G5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_OKRA, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// Class Engine.GameInstance
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_4LO8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_URID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_NOQU, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// Class Engine.Info
		TEST_METHOD(Class__Engine__Info)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// Class Engine.GameModeBase
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_ZI99, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// Class Engine.GameMode
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_02PW, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, numPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_UWIX, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// Class Engine.DPICustomScalingRule
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// Class Engine.LevelScriptActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_M5VY, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// Class Engine.SaveGame
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// Class Engine.CameraComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_FE4E, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_JB7F, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// Class Engine.WorldSettings
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_702Z, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_BY3E, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_15K9, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_QLNI, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_PAZK, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// Class Engine.HUD
		TEST_METHOD(Class__Engine__HUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_YU7P, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_4IS5, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_10AU, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_8ISW, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// Class Engine.GameStateBase
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_L9T9, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_JI63, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// Class Engine.GameState
		TEST_METHOD(Class__Engine__GameState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_2QWK, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// Class Engine.Controller
		TEST_METHOD(Class__Engine__Controller)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_1LTA, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_CGPB, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_WYXV, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_RTQI, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_OQ53, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// Class Engine.PlayerController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_72F2, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Z02K, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_AC5N, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_UU5S, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BFZP, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_X9L4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_RNHY, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ZLM9, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IJ7W, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_WCRQ, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GWX2, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VOZ6, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ANLE, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VYRU, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_FLC5, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_7L97, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// Class Engine.SkyLight
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_AKBJ, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// Class Engine.StreamableRenderAsset
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_HKSO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_P72V, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// Class Engine.Texture
		TEST_METHOD(Class__Engine__Texture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_HAZK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_RITX, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_FXZ4, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// Class Engine.TextureCube
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_XF10, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// Class Engine.StaticMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_KNY9, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D0);
		}

		// Class Engine.InstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_JI83, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_ZZX4, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_WOHN, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_HEZV, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_FC6U, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// Class Engine.HierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_D04K, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_9WMU, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_O5KZ, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_10A5, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_JT01, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0670);
		}

		// Class Engine.Brush
		TEST_METHOD(Class__Engine__Brush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_X0UL, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_ZJST, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_TORL, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// Class Engine.Volume
		TEST_METHOD(Class__Engine__Volume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// Class Engine.MaterialInterface
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_HOT2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_0LKO, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_UGS8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// Class Engine.MaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_CIT3, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_DEN2, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_HYTR, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// Class Engine.MaterialInstanceConstant
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// Class Engine.WorldSubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// Class Engine.MaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_F3WV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// Class Engine.MaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// Class Engine.EngineCustomTimeStep
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// Class Engine.TimecodeProvider
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_798P, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// Class Engine.DynamicBlueprintBinding
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// Class Engine.BlueprintGeneratedClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_94RT, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_6ALV, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_TCC2, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// Class Engine.SoundBase
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_KRLE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_SJBD, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// Class Engine.SoundWave
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_V5RN, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_CGBB, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_MRCF, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_EFFS, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_W9BK, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// Class Engine.SoundWaveProcedural
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_61J3, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// Class Engine.BlueprintCore
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_7MQC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_Q4GQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// Class Engine.Blueprint
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_J652, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// Class Engine.Model
		TEST_METHOD(Class__Engine__Model)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_A4WL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// Class Engine.Channel
		TEST_METHOD(Class__Engine__Channel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_0I8H, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// Class Engine.ActorChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_5WY9, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_7MHW, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// Class Engine.AnimationAsset
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_VM6S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_YLSC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// Class Engine.BlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_XEQN, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_UUH6, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_L0EA, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_2I0C, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// Class Engine.BlendSpace
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_4WMT, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// Class Engine.AimOffsetBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// Class Engine.BlendSpace1D
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_VHDJ, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// Class Engine.AimOffsetBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// Class Engine.AISystemBase
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_9GS6, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_VKX4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// Class Engine.AmbientSound
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// Class Engine.AnimationSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_S90Q, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_GHY5, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_BY78, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// Class Engine.AnimBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_095Y, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_4ZYW, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// Class Engine.AnimBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_5XSC, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_67GY, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// Class Engine.AnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// Class Engine.AnimBoneCompressionSettings
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// Class Engine.AnimClassData
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_IFVW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_NW3O, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_OZ8T, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_HCWY, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_FND2, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_E5DW, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_HC6W, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_RG9Y, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// Class Engine.AnimClassInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// Class Engine.AnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// Class Engine.AnimCompositeBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// Class Engine.AnimComposite
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// Class Engine.AnimCompress
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_VYIU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_FDYV, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// Class Engine.AnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// Class Engine.AnimCompress_LeastDestructive
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// Class Engine.AnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_17VU, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// Class Engine.AnimCompress_PerTrackCompression
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_WC2H, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_85ID, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_R63F, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_84S4, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// Class Engine.AnimCompress_RemoveEverySecondKey
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_G3PR, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// Class Engine.AnimCompress_RemoveTrivialKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_JYEQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// Class Engine.AnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// Class Engine.AnimCurveCompressionCodec_UniformIndexable
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// Class Engine.AnimCurveCompressionCodec_UniformlySampled
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// Class Engine.AnimCurveCompressionSettings
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// Class Engine.AnimLayerInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// Class Engine.AnimMetaData
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// Class Engine.AnimMontage
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_DFMI, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_8R1I, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_J99W, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// Class Engine.AnimNotify_PauseClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotify_PlayParticleEffect
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_5C3X, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_JUZ7, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_8BVQ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// Class Engine.AnimNotify_PlaySound
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_TPEL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_VUBV, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// Class Engine.AnimNotify_ResetClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotify_ResetDynamics
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// Class Engine.AnimNotify_ResumeClothingSimulation
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// Class Engine.AnimNotifyState_DisableRootMotion
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// Class Engine.AnimNotifyState_TimedParticleEffect
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_IVIJ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// Class Engine.AnimNotifyState_Trail
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_U3XM, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_IQ60, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// Class Engine.AnimSequence
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_VQBQ, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_DQ7A, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_OGLJ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_4U27, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_V1K6, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IM0W, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// Class Engine.AnimSet
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_FF9B, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_D6MT, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// Class Engine.AnimSingleNodeInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// Class Engine.AnimStateMachineTypes
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// Class Engine.AnimStreamable
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_14ZV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_3HR6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_O7JM, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// Class Engine.ApplicationLifecycleComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// Class Engine.ArrowComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_IRSW, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0460);
		}

		// Class Engine.AssetExportTask
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_4NNO, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// Class Engine.AssetManager
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_REEJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_51QZ, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// Class Engine.AssetManagerSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_NR9C, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// Class Engine.AssetMappingTable
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// Class Engine.AsyncActionHandleSaveGame
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_X88H, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_55XX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// Class Engine.AsyncActionLoadPrimaryAsset
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetClass
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetList
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// Class Engine.AsyncActionLoadPrimaryAssetClassList
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// Class Engine.AsyncActionChangePrimaryAssetBundles
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// Class Engine.AtmosphericFog
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// Class Engine.AtmosphericFogComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_LFQ4, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_RNQN, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// Class Engine.AudioBus
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_X7Y5, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// Class Engine.AudioSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_9SMD, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_88ZS, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_P2YF, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_GY8N, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_SK0U, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// Class Engine.AudioVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_TPUY, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_W3G0, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// Class Engine.AutoDestroySubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_ZJ2G, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// Class Engine.AutomationTestSettings
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_TEEK, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// Class Engine.AvoidanceManager
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_TOK5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_0TFA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// Class Engine.BandwidthTestActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// Class Engine.BillboardComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_NE6S, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0460);
		}

		// Class Engine.BlendableInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// Class Engine.Skeleton
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_2W07, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_WGWD, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_DOCC, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_U1QN, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_5N3U, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// Class Engine.BlendProfile
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_UAIR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// Class Engine.BlockingVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// Class Engine.BlueprintExtension
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// Class Engine.BlueprintMapLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// Class Engine.BlueprintPathsLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// Class Engine.PlatformGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// Class Engine.BlueprintPlatformLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// Class Engine.BlueprintSetLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// Class Engine.BodySetup
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_UTDD, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_2J3Y, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_DYS6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_7EP6, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// Class Engine.BoneMaskFilter
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// Class Engine.BookmarkBase
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// Class Engine.BookMark
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// Class Engine.BookMark2D
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_YQ9T, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// Class Engine.BoundsCopyComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_894K, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_NBVV, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// Class Engine.ShapeComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_YK1K, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0460);
		}

		// Class Engine.BoxComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_Q59C, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// Class Engine.ReflectionCapture
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// Class Engine.BoxReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// Class Engine.ReflectionCaptureComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_Q44N, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_GZ1G, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_W2BQ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_MY30, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// Class Engine.BoxReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_L6OJ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_QL7R, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// Class Engine.Breakpoint
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_669C, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_JAK9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// Class Engine.BrushBuilder
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_4YB7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_A5PO, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// Class Engine.BrushComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0450);
		}

		// Class Engine.BrushShape
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// Class Engine.ButtonStyleAsset
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// Class Engine.CameraAnim
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_HEV1, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_Z0X1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_0ZY2, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// Class Engine.CameraAnimInst
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_LKBN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_5DJ4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_N4YU, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// Class Engine.CameraBlockingVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// Class Engine.CameraModifier
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_FRTQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_L62M, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_K902, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// Class Engine.CameraModifier_CameraShake
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_G5G6, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// Class Engine.MatineeCameraShake
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_XQBT, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_6W9Q, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_S3LV, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// Class Engine.CameraShakeSourceActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// Class Engine.CameraShakeSourceComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_QBJ4, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_NY05, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// Class Engine.Canvas
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_TIJN, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_TPLP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_05K5, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// Class Engine.TextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_EFI4, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// Class Engine.TextureRenderTarget2D
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_KQRT, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// Class Engine.CanvasRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_KDOP, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// Class Engine.CapsuleComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0460);
		}

		// Class Engine.Character
		TEST_METHOD(Class__Engine__Character)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_1UXE, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_ZRVH, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_WJN8, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_XDJK, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_GRTN, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2Y25, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04C0);
		}

		// Class Engine.CharacterMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_EXRE, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LBFY, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_V4G2, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_HBWC, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_K2I6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_T9WZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_DAZU, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CK6W, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0JL6, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_PGOK, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CJZC, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CZ4N, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_EYT7, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// Class Engine.CheatManager
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_STW2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// Class Engine.CheckBoxStyleAsset
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// Class Engine.ChildActorComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_IBKY, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// Class Engine.ChildConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// Class Engine.PlatformInterfaceBase
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// Class Engine.CloudStorageBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_4N8U, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// Class Engine.CollisionProfile
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_9J17, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// Class Engine.Commandlet
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_T59I, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// Class Engine.ComponentDelegateBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// Class Engine.ActorComponentInstanceDataTransientOuter
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// Class Engine.CurveTable
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_E2NG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// Class Engine.CompositeCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_6M1S, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// Class Engine.DataTable
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_XSCS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_ISCM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_I3NQ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// Class Engine.CompositeDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_E585, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// Class Engine.Engine
		TEST_METHOD(Class__Engine__Engine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SUE8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GAJ9, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Q7O5, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XAML, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2OQK, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QP7P, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B6HU, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_M0K5, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PNS1, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_L07B, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ODLW, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LX7C, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_K2AM, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7SV3, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8P8L, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6OZZ, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7KP7, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_76UV, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Z54R, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GPRW, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TRVU, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// Class Engine.ScriptViewportClient
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_5JMP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// Class Engine.GameViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_E1YP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_3JHY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_XA8M, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_19JP, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// Class Engine.Console
		TEST_METHOD(Class__Engine__Console)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_6IYN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_VG0R, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_W76M, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// Class Engine.ControlChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_WWE2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// Class Engine.StreamingSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_XYRP, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_6KCY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_NYWR, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// Class Engine.GarbageCollectionSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_MWC7, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// Class Engine.CullDistanceVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_9CMH, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// Class Engine.CurveBase
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_2PLT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// Class Engine.CurveEdPresetCurve
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// Class Engine.CurveFloat
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_C5CS, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// Class Engine.CurveLinearColor
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_07MU, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// Class Engine.Texture2D
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_J2Q6, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_DE6Y, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// Class Engine.CurveLinearColorAtlas
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_SVVA, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// Class Engine.CurveSourceInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// Class Engine.CurveVector
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// Class Engine.DamageType
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_96K9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_34PH, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// Class Engine.PrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// Class Engine.DataTableFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// Class Engine.DebugCameraController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_70C7, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_N1HT, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_SU5S, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// Class Engine.DebugCameraControllerSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// Class Engine.DebugCameraHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// Class Engine.DebugDrawService
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// Class Engine.DecalActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// Class Engine.DecalComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_NQ0L, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_S39D, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0240);
		}

		// Class Engine.DefaultPawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_JRL9, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// Class Engine.PhysicsVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_KO3P, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// Class Engine.DefaultPhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// Class Engine.DemoNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_ZIDX, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// Class Engine.DemoNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_8WR4, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_ZSUJ, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_1EJN, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_5BO5, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_JPY1, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// Class Engine.PendingNetGame
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_281Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_8YI7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// Class Engine.DemoPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// Class Engine.DestructibleInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// Class Engine.TextureLODSettings
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// Class Engine.DeviceProfile
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_D4BK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_C7LN, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// Class Engine.DeviceProfileFragment
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_9D4O, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// Class Engine.DeviceProfileManager
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_98NA, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// Class Engine.DialogueSoundWaveProxy
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_ABJX, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// Class Engine.DialogueVoice
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_YGIJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_053D, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// Class Engine.DialogueWave
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_B64S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// Class Engine.Light
		TEST_METHOD(Class__Engine__Light)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_9ZM8, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// Class Engine.DirectionalLight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// Class Engine.LightComponentBase
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_GPF3, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_QFSJ, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0230);
		}

		// Class Engine.LightComponent
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_T4UY, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_8X6L, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_7784, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_EDDF, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_4OGQ, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_MITP, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_DG0R, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_CV93, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_QSCH, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0330);
		}

		// Class Engine.DirectionalLightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_RQKY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_RWHU, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_06XB, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_E4HA, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, shadowAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_EWA3, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// Class Engine.Distribution
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_CJAQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// Class Engine.DistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_1YUA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// Class Engine.DistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_HXXD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// Class Engine.DistributionFloatConstantCurve
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// Class Engine.DistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_AUDU, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// Class Engine.DistributionFloatParticleParameter
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// Class Engine.DistributionFloatUniform
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// Class Engine.DistributionFloatUniformCurve
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// Class Engine.DistributionVector
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_JYQQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// Class Engine.DistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_3UB8, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_K682, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// Class Engine.DistributionVectorConstantCurve
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_JGJC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_OKXQ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// Class Engine.DistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_A821, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// Class Engine.DistributionVectorParticleParameter
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// Class Engine.DistributionVectorUniform
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_0B1Y, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_8YGP, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// Class Engine.DistributionVectorUniformCurve
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_KO7A, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_8SZ4, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_I4DH, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// Class Engine.DocumentationActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_MYC9, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// Class Engine.DrawFrustumComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_1Q8T, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0460);
		}

		// Class Engine.SphereComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0460);
		}

		// Class Engine.DrawSphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0460);
		}

		// Class Engine.EdGraph
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_VCNA, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// Class Engine.GraphNodeContextMenuContext
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_W36F, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_XCIJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// Class Engine.EdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_NVWP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_LZC8, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_7BM6, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_R2ER, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// Class Engine.EdGraphNode_Documentation
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// Class Engine.EdGraphPin_Deprecated
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_P4YH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// Class Engine.EdGraphSchema
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// Class Engine.Emitter
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_YWP5, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// Class Engine.EmitterCameraLensEffectBase
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_NRHN, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_V88B, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_LJA6, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// Class Engine.ViewModeUtils
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// Class Engine.EngineBaseTypes
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// Class Engine.EngineHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// Class Engine.LocalMessage
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// Class Engine.EngineMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// Class Engine.EngineTypes
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// Class Engine.ExponentialHeightFog
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_93F6, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// Class Engine.ExponentialHeightFogComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_ZH8O, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_Z7R0, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_S3GR, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// Class Engine.Exporter
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_1BRM, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_XXZ8, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// Class Engine.FloatingPawnMovement
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_KR92, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// Class Engine.Font
		TEST_METHOD(Class__Engine__Font)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_G4DQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_1UI1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_N6XP, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_4EZS, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// Class Engine.FontFace
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_TKCD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_8A4C, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// Class Engine.FontImportOptions
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// Class Engine.ForceFeedbackAttenuation
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// Class Engine.ForceFeedbackComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_RJCS, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_X7NV, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// Class Engine.ForceFeedbackEffect
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_VJY8, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// Class Engine.GameEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_8UG4, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// Class Engine.GameInstanceSubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// Class Engine.GameNetworkManager
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_5VIS, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_3XP1, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_02MO, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_7W9W, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// Class Engine.GameplayStatics
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// Class Engine.GameSession
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_NHIB, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// Class Engine.GameUserSettings
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_7Z8S, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_C64Q, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_0C35, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_FEOO, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_ZHFD, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_FIBG, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// Class Engine.SpotLight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// Class Engine.GeneratedMeshAreaLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// Class Engine.HapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// Class Engine.HapticFeedbackEffect_Buffer
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_BWWO, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// Class Engine.HapticFeedbackEffect_Curve
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// Class Engine.HapticFeedbackEffect_SoundWave
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_YUDJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// Class Engine.HealthSnapshotBlueprintLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// Class Engine.HLODEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// Class Engine.HLODProxy
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// Class Engine.HLODProxyDesc
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// Class Engine.ImportanceSamplingLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// Class Engine.ImportantToggleSettingInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// Class Engine.InGameAdManager
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_SDC4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// Class Engine.InheritableComponentHandler
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// Class Engine.InputDelegateBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// Class Engine.InputActionDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_HRA7, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_DFPC, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// Class Engine.InputKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputSettings
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_N25D, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_INN6, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_CCPP, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// Class Engine.InputTouchDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// Class Engine.InputVectorAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// Class Engine.Interface_AssetUserData
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// Class Engine.BoneReferenceSkeletonProvider
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// Class Engine.Interface_CollisionDataProvider
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// Class Engine.Interface_PostProcessVolume
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// Class Engine.Interface_PreviewMeshProvider
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// Class Engine.InterpCurveEdSetup
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_GRMJ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// Class Engine.InterpData
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_7C4J, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// Class Engine.InterpFilter
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// Class Engine.InterpFilter_Classes
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// Class Engine.InterpFilter_Custom
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// Class Engine.InterpGroup
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_HI4J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_06TX, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// Class Engine.InterpGroupCamera
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_19OO, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// Class Engine.InterpGroupDirector
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// Class Engine.InterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// Class Engine.InterpGroupInstCamera
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// Class Engine.InterpGroupInstDirector
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// Class Engine.InterpToMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_9UIF, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_I3LE, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_BHM7, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// Class Engine.InterpTrack
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_3ITZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_NHI0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_J68R, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// Class Engine.InterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_UOYK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// Class Engine.InterpTrackAnimControl
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_Q2LW, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// Class Engine.InterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_TH2X, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// Class Engine.InterpTrackAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// Class Engine.InterpTrackBoolProp
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// Class Engine.InterpTrackColorProp
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// Class Engine.InterpTrackColorScale
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// Class Engine.InterpTrackDirector
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_NG17, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// Class Engine.InterpTrackEvent
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_E5U1, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// Class Engine.InterpTrackFade
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_CE8V, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_9RRT, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// Class Engine.InterpTrackFloatAnimBPParam
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_8GZQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// Class Engine.InterpTrackFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// Class Engine.InterpTrackFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// Class Engine.InterpTrackFloatProp
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// Class Engine.InterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// Class Engine.InterpTrackInstAnimControl
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_SRKD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// Class Engine.InterpTrackInstAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// Class Engine.InterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// Class Engine.InterpTrackInstBoolProp
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_URX3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_OKKA, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// Class Engine.InterpTrackInstColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_QSD5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_HM20, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// Class Engine.InterpTrackInstColorScale
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// Class Engine.InterpTrackInstDirector
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// Class Engine.InterpTrackInstEvent
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_EFUH, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// Class Engine.InterpTrackInstFade
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// Class Engine.InterpTrackInstFloatAnimBPParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_PDZQ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// Class Engine.InterpTrackInstFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_OGFM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// Class Engine.InterpTrackInstFloatProp
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_T65G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_8H16, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// Class Engine.InterpTrackInstLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_1E6C, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// Class Engine.InterpTrackInstMove
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// Class Engine.InterpTrackInstParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_BDRT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// Class Engine.InterpTrackInstSlomo
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_TE7I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// Class Engine.InterpTrackInstSound
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_0NR6, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// Class Engine.InterpTrackInstToggle
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_E0QQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_EL4O, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// Class Engine.InterpTrackInstVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstVectorProp
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_OAGP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_76DU, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// Class Engine.InterpTrackInstVisibility
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_HTXD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// Class Engine.InterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_MAYR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// Class Engine.InterpTrackLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// Class Engine.InterpTrackMove
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_GSJR, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_7FX8, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// Class Engine.InterpTrackMoveAxis
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_2C4L, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// Class Engine.InterpTrackParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// Class Engine.InterpTrackSlomo
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// Class Engine.InterpTrackSound
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_T025, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// Class Engine.InterpTrackToggle
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_I2HY, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// Class Engine.InterpTrackVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// Class Engine.InterpTrackVectorProp
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// Class Engine.InterpTrackVisibility
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_EJ1R, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// Class Engine.IntSerialization
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_RYU7, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_YHM0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_1BN7, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_9VHY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// Class Engine.KillZVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// Class Engine.KismetArrayLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// Class Engine.KismetGuidLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// Class Engine.KismetInputLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// Class Engine.KismetInternationalizationLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// Class Engine.KismetMaterialLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// Class Engine.KismetMathLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// Class Engine.KismetNodeHelperLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// Class Engine.KismetRenderingLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// Class Engine.KismetStringLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// Class Engine.KismetStringTableLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// Class Engine.KismetSystemLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// Class Engine.KismetTextLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// Class Engine.Layer
		TEST_METHOD(Class__Engine__Layer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_5D41, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// Class Engine.LevelPartitionInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// Class Engine.Level
		TEST_METHOD(Class__Engine__Level)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_OANM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_L47P, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_GL63, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_N2ZE, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_K75N, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// Class Engine.LevelActorContainer
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// Class Engine.LevelBounds
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_LSMP, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// Class Engine.LevelScriptBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// Class Engine.World
		TEST_METHOD(Class__Engine__World)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_KCSE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_M7FD, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_01B4, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_4F9Y, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_PNJ7, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_J6QA, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_JMQF, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_5YXQ, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// Class Engine.LevelStreaming
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_H9BF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_6DKY, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0AVA, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_5XSV, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_HMLS, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// Class Engine.LevelStreamingAlwaysLoaded
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// Class Engine.LevelStreamingDynamic
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// Class Engine.LevelStreamingPersistent
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// Class Engine.LevelStreamingVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_CZY2, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_YBNY, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// Class Engine.LightmappedSurfaceCollection
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// Class Engine.LightMapTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_FXRA, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// Class Engine.LightMapVirtualTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_C1A8, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// Class Engine.LightmassCharacterIndirectDetailVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// Class Engine.LightmassImportanceVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// Class Engine.LightmassPortal
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// Class Engine.LightmassPortalComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// Class Engine.LightmassPrimitiveSettingsObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// Class Engine.LineBatchComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_Y29O, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0480);
		}

		// Class Engine.LocalLightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0340);
		}

		// Class Engine.LocalPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_QY6P, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_O629, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_2SK3, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_1IO7, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_HLES, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// Class Engine.LocalPlayerSubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// Class Engine.LODActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_946E, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// Class Engine.LODSyncComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// Class Engine.LODSyncInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// Class Engine.MapBuildDataRegistry
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_V2RU, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// Class Engine.Material
		TEST_METHOD(Class__Engine__Material)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_15HJ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PW2K, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_340F, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LL1J, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_6TZY, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Z8BO, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_YA6P, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_48B3, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0BYN, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_G2TD, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VJV0, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_U6VI, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9IWW, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_R5XY, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DMTZ, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JQP1, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UIO1, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_7BR5, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_YBR5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// Class Engine.MaterialBillboardComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0450);
		}

		// Class Engine.MaterialExpressionAbs
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_F1H2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// Class Engine.MaterialExpressionActorPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionAdd
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_IPU6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_N9LV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// Class Engine.MaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// Class Engine.MaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_XFFY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// Class Engine.MaterialExpressionAntialiasedTextureMask
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_D0LV, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// Class Engine.MaterialExpressionAppendVector
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_ZDYR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_8UKT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// Class Engine.MaterialExpressionArccosine
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_LMXG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// Class Engine.MaterialExpressionArccosineFast
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_LHIV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// Class Engine.MaterialExpressionArcsine
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_1C08, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// Class Engine.MaterialExpressionArcsineFast
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_J4Q6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// Class Engine.MaterialExpressionArctangent
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_6B8W, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// Class Engine.MaterialExpressionArctangent2
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_6V77, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_5PNQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// Class Engine.MaterialExpressionArctangent2Fast
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_RCX9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_MFWD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// Class Engine.MaterialExpressionArctangentFast
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_28LV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// Class Engine.MaterialExpressionAtmosphericFogColor
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_7OW0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// Class Engine.MaterialExpressionAtmosphericLightColor
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// Class Engine.MaterialExpressionAtmosphericLightVector
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// Class Engine.MaterialExpressionBentNormalCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_Y7G1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionBlackBody
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_BTAF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// Class Engine.MaterialExpressionBlendMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_NWPM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_KJ8T, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_K3VV, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_RMJQ, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// Class Engine.MaterialExpressionBreakMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_JTK9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// Class Engine.MaterialExpressionBumpOffset
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_1Y4I, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_Y34M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_04DZ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// Class Engine.MaterialExpressionCameraPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionCameraVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// Class Engine.MaterialExpressionCeil
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_4KS6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// Class Engine.MaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// Class Engine.MaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_1BNW, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// Class Engine.MaterialExpressionChannelMaskParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_M0J7, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// Class Engine.MaterialExpressionClamp
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_LVA8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_6OJY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_GULR, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_PYJB, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_3U7H, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionCloudSampleAttribute
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// Class Engine.MaterialExpressionCollectionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionComment
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_VQJX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// Class Engine.MaterialExpressionComponentMask
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_BFM6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_R9MT, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// Class Engine.MaterialExpressionConstant
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_ETAM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// Class Engine.MaterialExpressionConstant2Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// Class Engine.MaterialExpressionConstant3Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// Class Engine.MaterialExpressionConstant4Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// Class Engine.MaterialExpressionConstantBiasScale
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_DBLL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_4Z8C, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// Class Engine.MaterialExpressionCosine
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_LQXK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// Class Engine.MaterialExpressionCrossProduct
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_UVBS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_CJKS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// Class Engine.MaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_SIJJ, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionCurveAtlasRowParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_XZXX, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// Class Engine.MaterialExpressionCustom
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_QBRL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// Class Engine.MaterialExpressionDDX
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_GM4U, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// Class Engine.MaterialExpressionDDY
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_C2LZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// Class Engine.MaterialExpressionDecalDerivative
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// Class Engine.MaterialExpressionDecalLifetimeOpacity
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// Class Engine.MaterialExpressionDecalMipmapLevel
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_ERLL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_E8UD, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// Class Engine.MaterialExpressionDeltaTime
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// Class Engine.MaterialExpressionDepthFade
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_CZXS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_T86B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// Class Engine.MaterialExpressionDepthOfFieldFunction
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_FN7T, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_443D, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// Class Engine.MaterialExpressionDeriveNormalZ
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_P4WD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// Class Engine.MaterialExpressionDesaturation
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_1LZ6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_GNNG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// Class Engine.MaterialExpressionDistance
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_6JPR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_8ATS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// Class Engine.MaterialExpressionDistanceCullFade
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// Class Engine.MaterialExpressionDistanceFieldGradient
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_YHPY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// Class Engine.MaterialExpressionDistanceToNearestSurface
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_BJ3M, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// Class Engine.MaterialExpressionDivide
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_POCQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_XRMC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// Class Engine.MaterialExpressionDotProduct
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_466F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_B3XT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// Class Engine.MaterialExpressionDynamicParameter
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_9O6O, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// Class Engine.MaterialExpressionEyeAdaptation
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// Class Engine.MaterialExpressionFeatureLevelSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_TYFA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// Class Engine.MaterialExpressionFloor
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_F0FF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// Class Engine.MaterialExpressionFmod
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_GP9O, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_F7OJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// Class Engine.MaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_QYSE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// Class Engine.MaterialExpressionFontSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// Class Engine.MaterialExpressionFrac
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_TIRI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// Class Engine.MaterialExpressionFresnel
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_EH45, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_4RO8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_Q691, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// Class Engine.MaterialExpressionFunctionInput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_HV5E, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_3RQQ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_NG3H, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_REL6, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_MBDT, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// Class Engine.MaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_UBZL, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_6JRN, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_R324, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// Class Engine.MaterialExpressionGetMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_Z9ZV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// Class Engine.MaterialExpressionGIReplace
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_A7U6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_P2NR, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_NC4J, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// Class Engine.MaterialExpressionHairAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_2NID, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// Class Engine.MaterialExpressionHairColor
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_1FS7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_V42Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_GSLC, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// Class Engine.MaterialExpressionIf
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_91G4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_L44B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_VBJM, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_JMD6, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_TRHB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// Class Engine.MaterialExpressionInverseLinearInterpolate
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_4TV0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_22QI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_33N9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_LFOV, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// Class Engine.MaterialExpressionLightmapUVs
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// Class Engine.MaterialExpressionLightmassReplace
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_B7Y7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_BYQQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// Class Engine.MaterialExpressionLightVector
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// Class Engine.MaterialExpressionLinearInterpolate
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_B558, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_YBJM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_5WG8, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// Class Engine.MaterialExpressionLogarithm10
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_W5M6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// Class Engine.MaterialExpressionLogarithm2
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_Q96L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// Class Engine.MaterialExpressionMakeMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_6LPT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_LRK1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RMM8, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UXJL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KUJB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WO36, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PQFI, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CGAS, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YUTT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PKUA, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Z0M2, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_1M0H, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZAGI, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_R99E, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_77QR, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_7874, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_EKAH, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_I087, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_N6UL, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UXL1, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_47DV, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// Class Engine.MaterialExpressionMapARPassthroughCameraUV
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_AD97, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// Class Engine.MaterialExpressionMaterialAttributeLayers
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_UCRY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_9WW3, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_LTN5, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// Class Engine.MaterialExpressionMaterialFunctionCall
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// Class Engine.MaterialExpressionMaterialLayerOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// Class Engine.MaterialExpressionMaterialProxyReplace
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_6AXZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_M5CN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// Class Engine.MaterialExpressionMax
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_QKQ2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_MGA4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// Class Engine.MaterialExpressionMin
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_2M5Z, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_N7C5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// Class Engine.MaterialExpressionMultiply
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_X7XS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_7BXP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// Class Engine.MaterialExpressionNoise
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_VDLI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_VDWJ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_N7W7, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_51XZ, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_B62I, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// Class Engine.MaterialExpressionNormalize
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_XNXC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// Class Engine.MaterialExpressionObjectBounds
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectOrientation
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionObjectRadius
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// Class Engine.MaterialExpressionOneMinus
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_75T4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// Class Engine.MaterialExpressionPanner
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_IZ0W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_FC30, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_KSO5, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_NP0M, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// Class Engine.MaterialExpressionParticleColor
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleDirection
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleMacroUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleMotionBlurFade
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// Class Engine.MaterialExpressionParticlePositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRadius
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRandom
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleRelativeTime
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSize
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSpeed
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// Class Engine.MaterialExpressionParticleSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_NH7S, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// Class Engine.MaterialExpressionParticleSubUVProperties
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// Class Engine.MaterialExpressionPerInstanceCustomData
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_9I7G, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_ZXRF, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// Class Engine.MaterialExpressionPerInstanceFadeAmount
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// Class Engine.MaterialExpressionPerInstanceRandom
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// Class Engine.MaterialExpressionPixelDepth
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// Class Engine.MaterialExpressionPixelNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// Class Engine.MaterialExpressionPower
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_EB7W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_ZBUX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_C5ZH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// Class Engine.MaterialExpressionPrecomputedAOMask
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// Class Engine.MaterialExpressionPreSkinnedLocalBounds
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// Class Engine.MaterialExpressionPreSkinnedNormal
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// Class Engine.MaterialExpressionPreSkinnedPosition
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// Class Engine.MaterialExpressionPreviousFrameSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_PK3P, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_ZEZ3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// Class Engine.MaterialExpressionQualitySwitch
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_3J27, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_OAZR, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// Class Engine.MaterialExpressionRayTracingQualitySwitch
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_7JJF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_0MVM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// Class Engine.MaterialExpressionReflectionCapturePassSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_E303, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_3OTP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// Class Engine.MaterialExpressionReflectionVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_UXYW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_8BXJ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// Class Engine.MaterialExpressionReroute
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_OKSA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// Class Engine.MaterialExpressionRotateAboutAxis
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_JE3W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_JTTV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_81N9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_M5IE, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_7GWU, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// Class Engine.MaterialExpressionRotator
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_G4H6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_9E86, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// Class Engine.MaterialExpressionRound
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_XR06, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_3XBZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_YI1V, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_KU1T, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_IR1C, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_0YF1, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_BLNM, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_FZQH, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_SZWM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_9Q4I, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_VUAC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_SARG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_1445, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_Z3HR, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// Class Engine.MaterialExpressionSaturate
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_YRB1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// Class Engine.MaterialExpressionSceneColor
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, inputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_P6SM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_AAVQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_58WB, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_5DBS, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// Class Engine.MaterialExpressionSceneDepth
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, inputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_FN27, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_ZBKJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_4K3N, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_4DWN, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// Class Engine.MaterialExpressionSceneDepthWithoutWater
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, inputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_YI1Q, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_V19M, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_AO4I, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// Class Engine.MaterialExpressionSceneTexelSize
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// Class Engine.MaterialExpressionSceneTexture
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_0UDB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_AN39, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// Class Engine.MaterialExpressionScreenPosition
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// Class Engine.MaterialExpressionSetMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// Class Engine.MaterialExpressionShaderStageSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_LFRS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_H3EF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// Class Engine.MaterialExpressionShadingModel
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_9DL8, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// Class Engine.MaterialExpressionShadingPathSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_LVM3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_LIM5, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// Class Engine.MaterialExpressionShadowReplace
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_8BQ9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_VNT0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// Class Engine.MaterialExpressionSign
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_KIL3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// Class Engine.MaterialExpressionSine
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_2S44, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_R136, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_AWMZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_W6PH, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_Y8UQ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// Class Engine.MaterialExpressionSkinningVertexOffsets
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_U8LY, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_V9RK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_RGIZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_RSAK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// Class Engine.MaterialExpressionSmoothStep
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_DCF1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_G8KV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_P4VS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// Class Engine.MaterialExpressionSobol
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_02E1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_XC7Y, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_JOGD, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// Class Engine.MaterialExpressionSpeedTree
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_HNQ0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_35EY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_CHYG, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_KSD2, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_E17O, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_C2WB, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// Class Engine.MaterialExpressionSphereMask
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_LRMQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_UW7E, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_JMHV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_SVLS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// Class Engine.MaterialExpressionSphericalParticleOpacity
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_KL4B, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// Class Engine.MaterialExpressionSquareRoot
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_8ER2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// Class Engine.MaterialExpressionStaticBool
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_V0UL, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// Class Engine.MaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_QBCP, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionStaticComponentMaskParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_TVE7, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionStaticSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_5E24, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_CTHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_DG88, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_9ZCT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// Class Engine.MaterialExpressionStaticSwitchParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// Class Engine.MaterialExpressionStep
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_C3WO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_X306, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// Class Engine.MaterialExpressionSubtract
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_HBHC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_DM36, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// Class Engine.MaterialExpressionTangent
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_CZ36, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// Class Engine.MaterialExpressionTangentOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_PEI1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionTemporalSobol
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_G122, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_9KN4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_4VPV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// Class Engine.MaterialExpressionTextureCoordinate
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_18JR, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// Class Engine.MaterialExpressionTextureObject
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// Class Engine.MaterialExpressionTextureObjectParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// Class Engine.MaterialExpressionTextureProperty
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_9XLA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_VROD, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter2DArray
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterCube
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_8MHW, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterVolume
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_9TEC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// Class Engine.MaterialExpressionTime
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_0R06, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// Class Engine.MaterialExpressionTransform
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_SBGH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_B5Z2, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// Class Engine.MaterialExpressionTransformPosition
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_W2RV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_2N9A, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// Class Engine.MaterialExpressionTruncate
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_TEG6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// Class Engine.MaterialExpressionTwoSidedSign
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// Class Engine.MaterialExpressionVectorNoise
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_CX3R, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_QOH8, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_0341, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_C9L8, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// Class Engine.MaterialExpressionVertexColor
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// Class Engine.MaterialExpressionVertexInterpolator
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_W1CZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// Class Engine.MaterialExpressionVertexNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// Class Engine.MaterialExpressionVertexTangentWS
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// Class Engine.MaterialExpressionViewProperty
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_8VOI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// Class Engine.MaterialExpressionViewSize
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_9CMU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_6IG1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_8HXX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_8KFE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_AN2R, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_HMON, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_H99I, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_VQ3V, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_9NN1, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_9M92, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_UXST, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// Class Engine.MaterialExpressionWorldPosition
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_ES5R, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// Class Engine.MaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_SS4C, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// Class Engine.MaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_WWHJ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// Class Engine.MaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// Class Engine.MaterialFunctionMaterialLayer
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// Class Engine.MaterialFunctionMaterialLayerInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// Class Engine.MaterialFunctionMaterialLayerBlend
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// Class Engine.MaterialFunctionMaterialLayerBlendInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// Class Engine.MaterialInstanceActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// Class Engine.MaterialInstanceDynamic
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_9C7Q, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// Class Engine.MaterialParameterCollection
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_PX1K, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// Class Engine.MaterialParameterCollectionInstance
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_UYTZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_91AO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// Class Engine.MatineeActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_SJIZ, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PV9P, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_BLY5, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_UFQO, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_U32O, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_89F6, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FTLM, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_GEJ8, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// Class Engine.MatineeActorCameraAnim
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// Class Engine.MatineeAnimInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// Class Engine.MatineeInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// Class Engine.MeshMergeCullingVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// Class Engine.MeshSimplificationSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// Class Engine.MeshVertexPainterKismetLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// Class Engine.MicroTransactionBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// Class Engine.ModelComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_7ZVJ, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_J367, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0480);
		}

		// Class Engine.MorphTarget
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_QECG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// Class Engine.NavAgentInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// Class Engine.NavAreaBase
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_HOLM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// Class Engine.NavCollisionBase
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_4YL9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// Class Engine.NavEdgeProviderInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// Class Engine.NavigationDataChunk
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// Class Engine.NavigationDataInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// Class Engine.NavigationObjectBase
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_8VNC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_0M4M, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// Class Engine.NavigationSystemBase
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// Class Engine.NavigationSystemConfig
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_NE1E, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// Class Engine.NullNavSysConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// Class Engine.NavLinkDefinition
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_YSVD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// Class Engine.NavPathObserverInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// Class Engine.NavRelevantInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// Class Engine.SimulatedClientNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// Class Engine.NetPushModelHelpers
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// Class Engine.NetworkPredictionInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// Class Engine.NetworkSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_GEAO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_UFI9, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// Class Engine.NodeMappingContainer
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// Class Engine.NodeMappingProviderInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// Class Engine.Note
		TEST_METHOD(Class__Engine__Note)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// Class Engine.ObjectLibrary
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_0OAL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_9WCR, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// Class Engine.ObjectReferencer
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// Class Engine.ObjectTraceWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_BC67, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// Class Engine.PackageMapClient
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_TA2D, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// Class Engine.PainCausingVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_VRZ7, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_T0XV, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_WDOG, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// Class Engine.ParticleEmitter
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_1JYA, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_JOOK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_G1V6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// Class Engine.ParticleEventManager
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// Class Engine.ParticleLODLevel
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_A9MK, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_MUE8, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// Class Engine.ParticleModule
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_LMWR, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// Class Engine.ParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_4ZNV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// Class Engine.ParticleModuleAcceleration
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_GBZW, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// Class Engine.ParticleModuleAccelerationConstant
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_A16R, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// Class Engine.ParticleModuleAccelerationDrag
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// Class Engine.ParticleModuleAccelerationDragScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// Class Engine.ParticleModuleAccelerationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// Class Engine.ParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// Class Engine.ParticleModuleAttractorLine
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// Class Engine.ParticleModuleAttractorParticle
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_UQW6, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_9SNV, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_UCWF, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_8NFB, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// Class Engine.ParticleModuleAttractorPoint
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_IDBM, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// Class Engine.ParticleModuleAttractorPointGravity
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// Class Engine.ParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// Class Engine.ParticleModuleBeamModifier
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_CP20, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_XB2T, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_074C, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// Class Engine.ParticleModuleBeamNoise
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_FND2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_02PW, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_9JDO, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_NG0V, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_R7X9, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2FLJ, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_COR8, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_27VZ, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// Class Engine.ParticleModuleBeamSource
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_X9X3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_PXEL, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_W4GI, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_XHFL, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_LP8O, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_JSGD, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// Class Engine.ParticleModuleBeamTarget
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_O6AT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8ZV9, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_97X2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8UGY, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ADY9, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_6A6B, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ST9D, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// Class Engine.ParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// Class Engine.ParticleModuleCameraOffset
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_ELOQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_5DQM, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// Class Engine.ParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// Class Engine.ParticleModuleCollision
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_GC7T, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_M3KX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_P6C1, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_E8XT, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_S0AR, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_Q0VT, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// Class Engine.ParticleModuleCollisionGPU
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_TM7C, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// Class Engine.ParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// Class Engine.ParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_GVET, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// Class Engine.ParticleModuleColor_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// Class Engine.ParticleModuleColorOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_W82Z, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// Class Engine.ParticleModuleColorScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_QBRQ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// Class Engine.ParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// Class Engine.ParticleModuleEventGenerator
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_XVTN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_I6KB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverKillParticles
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_B1N7, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// Class Engine.ParticleModuleEventReceiverSpawn
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_5QBS, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_PXUT, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// Class Engine.ParticleModuleEventSendToGame
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// Class Engine.ParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// Class Engine.ParticleModuleKillBox
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_YSWF, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// Class Engine.ParticleModuleKillHeight
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_XQUV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// Class Engine.ParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// Class Engine.ParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// Class Engine.ParticleModuleLifetime_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// Class Engine.ParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// Class Engine.ParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_G1PP, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_F5PG, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_PZX3, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// Class Engine.ParticleModuleLight_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// Class Engine.ParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// Class Engine.ParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// Class Engine.ParticleModuleLocation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// Class Engine.ParticleModuleLocationBoneSocket
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_SJ9R, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_23ZM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_GGAW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_UTTW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// Class Engine.ParticleModuleLocationDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// Class Engine.ParticleModuleLocationEmitter
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_PAYO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_JMZQ, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_WNVU, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_UJDN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// Class Engine.ParticleModuleLocationEmitterDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// Class Engine.ParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_NYAQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_QETB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_Y39J, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// Class Engine.ParticleModuleLocationPrimitiveTriangle
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// Class Engine.ParticleModuleLocationSkelVertSurface
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_ADVW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_MNLD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_BMVY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_GIBN, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// Class Engine.ParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// Class Engine.ParticleModuleLocationWorldOffset_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// Class Engine.ParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshMaterial
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// Class Engine.ParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_FAPV, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// Class Engine.ParticleModuleMeshRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// Class Engine.ParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// Class Engine.ParticleModuleMeshRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// Class Engine.ParticleModuleMeshRotationRateOverLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_2YZF, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// Class Engine.ParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_HCEF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// Class Engine.ParticleModuleOrbit
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_1EO9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_QT44, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_JJUY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_WFWZ, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// Class Engine.ParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// Class Engine.ParticleModuleOrientationAxisLock
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_P15N, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// Class Engine.ParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// Class Engine.ParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_ACS6, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// Class Engine.ParticleModuleParameterDynamic_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// Class Engine.ParticleModulePivotOffset
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// Class Engine.ParticleModuleRequired
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_1YLO, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_L4PZ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_6G4W, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// Class Engine.ParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// Class Engine.ParticleModuleRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// Class Engine.ParticleModuleRotationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_EN5X, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// Class Engine.ParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// Class Engine.ParticleModuleRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// Class Engine.ParticleModuleRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// Class Engine.ParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// Class Engine.ParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// Class Engine.ParticleModuleSize_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// Class Engine.ParticleModuleSizeMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_F6ID, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// Class Engine.ParticleModuleSizeScale
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_G8C6, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// Class Engine.ParticleModuleSizeScaleBySpeed
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// Class Engine.ParticleModuleSourceMovement
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// Class Engine.ParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_34VW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// Class Engine.ParticleModuleSpawn
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_IF6Z, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_CA30, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// Class Engine.ParticleModuleSpawnPerUnit
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_LJ6S, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// Class Engine.ParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// Class Engine.ParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_EZGZ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// Class Engine.ParticleModuleSubUVMovie
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_CU0O, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_BZ6V, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// Class Engine.ParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// Class Engine.ParticleModuleTrailSource
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_VPER, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_ALXQ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_BM8H, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_J90B, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_Y0JF, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// Class Engine.ParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// Class Engine.ParticleModuleTypeDataAnimTrail
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_AHCY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_0ZXA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// Class Engine.ParticleModuleTypeDataBeam2
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_E3O0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_VXQQ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_QK1X, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_LARM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_W5QO, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// Class Engine.ParticleModuleTypeDataGpu
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_NW1H, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// Class Engine.ParticleModuleTypeDataMesh
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_MZ1E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_AL4Y, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_VLPH, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// Class Engine.ParticleModuleTypeDataRibbon
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_QG41, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_0S3Z, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_BHM7, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_VK9L, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// Class Engine.ParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// Class Engine.ParticleModuleVectorFieldGlobal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_FBG9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_VWVS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldLocal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_KSTN, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// Class Engine.ParticleModuleVectorFieldRotation
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// Class Engine.ParticleModuleVectorFieldRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_415K, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldScale
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// Class Engine.ParticleModuleVectorFieldScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// Class Engine.ParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_AYGB, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// Class Engine.ParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// Class Engine.ParticleModuleVelocity_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// Class Engine.ParticleModuleVelocityCone
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_BKFV, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// Class Engine.ParticleModuleVelocityInheritParent
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// Class Engine.ParticleModuleVelocityOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_JRDF, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// Class Engine.ParticleSpriteEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// Class Engine.ParticleSystem
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_CIZV, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_WXTC, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// Class Engine.ParticleSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_70LV, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_VSLM, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_91CV, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_J6R6, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_MMYU, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_OJMH, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_V6KE, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_IZZN, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_HSIX, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TC3L, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DJJA, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06A0);
		}

		// Class Engine.ParticleSystemReplay
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_UV87, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// Class Engine.PathFollowingAgentInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// Class Engine.PawnNoiseEmitterComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_TZXB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_07CX, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// Class Engine.PhysicalAnimationComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_UATA, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_1RZD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// Class Engine.PhysicalMaterialMask
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_T1OY, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// Class Engine.PhysicsAsset
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_LBVY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_6PZZ, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// Class Engine.SkeletalBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_EX9T, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// Class Engine.PhysicsCollisionHandler
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_0W7R, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// Class Engine.RigidBodyBase
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// Class Engine.PhysicsConstraintActor
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_QUEC, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// Class Engine.PhysicsConstraintComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_Q7GI, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// Class Engine.PhysicsConstraintTemplate
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_CS1R, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// Class Engine.PhysicsHandleComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_93W6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_VBZJ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_OJCJ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_KKA9, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// Class Engine.PhysicsSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_JNQK, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_K5I3, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_8513, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_TXH0, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_TLH3, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// Class Engine.PhysicsSpringComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_O00N, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_6O9W, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// Class Engine.PhysicsThruster
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// Class Engine.PhysicsThrusterComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// Class Engine.SceneCapture
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// Class Engine.PlanarReflection
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_C9G7, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// Class Engine.SceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_SSJX, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_R36J, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_NEKK, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B0);
		}

		// Class Engine.PlanarReflectionComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_DVT4, 0x02E6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// Class Engine.PlaneReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// Class Engine.PlaneReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_XNY9, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_N7WW, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// Class Engine.PlatformEventsComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// Class Engine.PlatformInterfaceWebResponse
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_N65U, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// Class Engine.PlayerCameraManager
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_SPAD, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_8QWS, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_5DON, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_XVIX, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_JUVZ, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_SQIH, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_JIMO, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_95PI, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_M8HG, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_N6DM, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1P7N, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// Class Engine.PlayerInput
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_KMOQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_ZBU3, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_ZCON, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// Class Engine.PlayerStart
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// Class Engine.PlayerStartPIE
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// Class Engine.PlayerState
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, playerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_KQH8, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_RPCF, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, startTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_96ID, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_45SN, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_LKFV, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_R5BS, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// Class Engine.PluginCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_5SU2, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// Class Engine.PointLight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// Class Engine.PointLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_CLTM, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_YNA5, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0360);
		}

		// Class Engine.Polys
		TEST_METHOD(Class__Engine__Polys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_OHFC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// Class Engine.PoseableMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_5FKA, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07F0);
		}

		// Class Engine.PoseAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_EK22, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// Class Engine.PoseWatch
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_5IE6, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// Class Engine.PostProcessComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_1PUN, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// Class Engine.PostProcessVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_W0HG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_VF73, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// Class Engine.PrecomputedVisibilityOverrideVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// Class Engine.PrecomputedVisibilityVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// Class Engine.PreviewCollectionInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// Class Engine.PreviewMeshCollection
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_9QJU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// Class Engine.PrimaryAssetLabel
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_5TWJ, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// Class Engine.ProjectileMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_GOZW, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_9L1E, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_T3NP, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// Class Engine.ProxyLODMeshSimplificationSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// Class Engine.RadialForceActor
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// Class Engine.RadialForceComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_HB10, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_V1AW, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// Class Engine.RectLight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// Class Engine.RectLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_N8Y4, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// Class Engine.RendererSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2F7R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3UOK, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_L31S, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_EAAA, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BUBD, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_70GY, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QDMX, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1EL6, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3XNN, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_J8QL, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FAXJ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_HU6P, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_61JK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XXSG, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ICMS, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FJ7M, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZPD1, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Y5YM, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_X4V5, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JG95, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZEA0, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TK47, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_113F, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_70UZ, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5EQF, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_S79Q, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_49O7, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_D6QT, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// Class Engine.RendererOverrideSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_7OJV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// Class Engine.ReplayNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_EW3Y, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// Class Engine.ReplaySubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_6OCD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// Class Engine.ReplicationDriver
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// Class Engine.ReplicationConnectionDriver
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// Class Engine.ReporterBase
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_U0XJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// Class Engine.ReporterGraph
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_DUKB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// Class Engine.Rig
		TEST_METHOD(Class__Engine__Rig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_SBSU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// Class Engine.RotatingMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_ELXO, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// Class Engine.RuntimeOptionsBase
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_ZJJG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// Class Engine.RuntimeVirtualTexture
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_SVJ1, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_HHIZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_T03I, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// Class Engine.RuntimeVirtualTextureComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_BSMU, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_SIY2, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_FIEV, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_P9XT, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// Class Engine.RuntimeVirtualTextureVolume
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// Class Engine.RVOAvoidanceInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// Class Engine.Scene
		TEST_METHOD(Class__Engine__Scene)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// Class Engine.SceneCapture2D
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// Class Engine.SceneCaptureComponent2D
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_MZSV, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_9ID8, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_C78O, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3054, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_HY94, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_J5FF, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_GO4H, 0x088D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_W92J, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// Class Engine.SceneCaptureComponentCube
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_AFL0, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_E1KD, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// Class Engine.SceneCaptureCube
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// Class Engine.SCS_Node
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_4B3B, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// Class Engine.Selection
		TEST_METHOD(Class__Engine__Selection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_63X7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// Class Engine.ServerStatReplicator
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_DSUM, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_S5H1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_E4L4, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// Class Engine.ShadowMapTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_3JUP, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// Class Engine.SimpleConstructionScript
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_I9VE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// Class Engine.SkeletalMesh
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_J68C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_O7OZ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_QVOX, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_4PCF, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// Class Engine.SkeletalMeshActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_KPUL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_G0CV, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_8K25, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// Class Engine.SkeletalMeshEditorData
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// Class Engine.SkeletalMeshLODSettings
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_JQA0, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// Class Engine.SkeletalMeshSimplificationSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// Class Engine.SkeletalMeshSocket
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_V5C4, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// Class Engine.SkyAtmosphereComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_2OK8, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_FWI2, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// Class Engine.SkyAtmosphere
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// Class Engine.SkyLightComponent
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_NF4D, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_IHWB, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_7ZD3, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_UJ02, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// Class Engine.SlateBrushAsset
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// Class Engine.SlateTextureAtlasInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// Class Engine.SmokeTestCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// Class Engine.SoundAttenuation
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// Class Engine.SoundClass
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// Class Engine.SoundConcurrency
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// Class Engine.SoundCue
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_8FDH, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_9LRQ, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_L5EC, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_Q8LF, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// Class Engine.SoundEffectSourcePresetChain
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_IEHQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// Class Engine.SoundGroups
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_XZQU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// Class Engine.SoundMix
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_2DK4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// Class Engine.SoundNode
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_MQK0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// Class Engine.SoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// Class Engine.SoundNodeAttenuation
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_K5M3, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// Class Engine.SoundNodeBranch
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// Class Engine.SoundNodeConcatenator
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// Class Engine.SoundNodeDelay
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// Class Engine.SoundNodeDialoguePlayer
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_8IVK, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// Class Engine.SoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// Class Engine.SoundNodeDoppler
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_ADP6, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_2T83, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// Class Engine.SoundNodeEnveloper
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_DYCR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// Class Engine.SoundNodeGroupControl
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// Class Engine.SoundNodeLooping
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_O12O, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// Class Engine.SoundNodeMature
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// Class Engine.SoundNodeMixer
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// Class Engine.SoundNodeModulator
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// Class Engine.SoundNodeModulatorContinuous
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// Class Engine.SoundNodeOscillator
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_O04S, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_VJRW, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// Class Engine.SoundNodeParamCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// Class Engine.SoundNodeQualityLevel
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_5LIP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// Class Engine.SoundNodeRandom
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_SW0Y, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// Class Engine.SoundNodeSoundClass
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_WLIF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// Class Engine.SoundNodeSwitch
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// Class Engine.SoundNodeWaveParam
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// Class Engine.SoundNodeWavePlayer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_EB5B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_KLFY, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0088);
		}

		// Class Engine.SoundSourceBus
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_8O3N, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_DCUL, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// Class Engine.SoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// Class Engine.SoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// Class Engine.SoundSubmix
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_TT9O, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_6GAK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_9VVB, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// Class Engine.SoundfieldSubmix
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// Class Engine.EndpointSubmix
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// Class Engine.SoundfieldEndpointSubmix
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// Class Engine.SpectatorPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// Class Engine.SpectatorPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_D4QQ, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// Class Engine.SphereReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// Class Engine.SphereReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// Class Engine.SplineMetadata
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// Class Engine.SplineComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_9XWS, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_UJOJ, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_7RTF, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0540);
		}

		// Class Engine.SplineMeshActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// Class Engine.SplineMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_JQB1, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_AEGM, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_V991, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// Class Engine.SpotLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// Class Engine.SpringArmComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_IRYJ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_LLKY, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_A22K, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// Class Engine.StaticMesh
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_33Y0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_2D1R, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_5JVI, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// Class Engine.StaticMeshSocket
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_4BQZ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// Class Engine.StereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// Class Engine.StereoLayerShapeQuad
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// Class Engine.StereoLayerShapeCylinder
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_YDSU, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// Class Engine.StereoLayerShapeCubemap
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// Class Engine.StereoLayerShapeEquirect
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// Class Engine.StereoLayerComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_Z6W6, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_RI6C, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_SEMI, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// Class Engine.StereoLayerFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// Class Engine.StringTable
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_0COZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// Class Engine.SubsurfaceProfile
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_8532, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// Class Engine.SubsystemBlueprintLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// Class Engine.SubUVAnimation
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_PUBF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_MSQS, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// Class Engine.SystemTimeTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_ZX79, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// Class Engine.TextPropertyTestObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// Class Engine.TextRenderActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// Class Engine.TextRenderComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, text, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_8IIP, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_LOI7, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0490);
		}

		// Class Engine.Texture2DArray
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_MK35, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressZ, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_7EK7, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0138);
		}

		// Class Engine.Texture2DDynamic
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_9KYL, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_K9EQ, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// Class Engine.TextureLightProfile
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// Class Engine.TextureMipDataProviderFactory
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// Class Engine.TextureRenderTarget2DArray
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_BZ4Z, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// Class Engine.TextureRenderTargetCube
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_7C01, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// Class Engine.TextureRenderTargetVolume
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_8AM9, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// Class Engine.ThumbnailInfo
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// Class Engine.TimelineComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_POMI, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// Class Engine.TimelineTemplate
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_4CC4, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// Class Engine.TireType
		TEST_METHOD(Class__Engine__TireType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_DYZA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// Class Engine.TouchInterface
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_FU0V, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_TUSG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// Class Engine.TriggerBase
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// Class Engine.TriggerBox
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// Class Engine.TriggerCapsule
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// Class Engine.TriggerSphere
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// Class Engine.TriggerVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// Class Engine.TwitterIntegrationBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// Class Engine.UserDefinedEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// Class Engine.UserDefinedStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_NOL4, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_DT0M, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// Class Engine.UserInterfaceSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_VLTO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_WNBX, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_3L88, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_Z9H2, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_OER8, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// Class Engine.VectorField
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// Class Engine.VectorFieldAnimated
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_UJJM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_K063, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// Class Engine.VectorFieldComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_I676, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// Class Engine.VectorFieldStatic
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_63U9, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// Class Engine.VectorFieldVolume
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// Class Engine.ViewportStatsSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_TZTT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// Class Engine.VirtualTexture
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// Class Engine.LightMapVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// Class Engine.RuntimeVirtualTextureStreamingProxy
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// Class Engine.VirtualTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_1I74, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// Class Engine.VirtualTextureBuilder
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// Class Engine.VirtualTexturePoolConfig
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_RH8P, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// Class Engine.VisualLoggerAutomationTests
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// Class Engine.VisualLoggerDebugSnapshotInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// Class Engine.VisualLoggerKismetLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// Class Engine.VoiceChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_8AZW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// Class Engine.VOIPTalker
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_LBOS, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// Class Engine.VOIPStatics
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// Class Engine.VolumeTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_Q1TI, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// Class Engine.VolumetricCloudComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_XN1T, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_2EG8, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// Class Engine.VolumetricCloud
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// Class Engine.VolumetricLightmapDensityVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// Class Engine.WindDirectionalSource
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// Class Engine.WindDirectionalSourceComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_RTEQ, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// Class Engine.WorldComposition
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_WJDW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_GE98, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// Class Engine.HierarchicalLODSetup
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// Class MovieSceneTracks.MovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_GPTK, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// Class MovieSceneTracks.FloatChannelEvaluatorSystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// Class MovieSceneTracks.MovieSceneTransformOrigin
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// Class MovieSceneTracks.MovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// Class MovieSceneTracks.MovieScene3DAttachSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_45IO, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_1LF1, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// Class MovieSceneTracks.MovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieScene3DAttachTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieScene3DPathSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_HN9C, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_OSI2, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// Class MovieSceneTracks.MovieScene3DPathTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_TPWT, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_M4CD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// Class MovieSceneTracks.MovieScene3DTransformPropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// Class MovieSceneTracks.MovieScene3DTransformSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_E6FM, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_F6LV, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_PDKS, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// Class MovieSceneTracks.MovieScene3DTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// Class MovieSceneTracks.MovieSceneActorReferenceSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// Class MovieSceneTracks.MovieSceneActorReferenceTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_HWGB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneAudioSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_KJNY, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_1SZX, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// Class MovieSceneTracks.MovieSceneAudioTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_FBM3, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// Class MovieSceneTracks.MovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_9WSV, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneByteSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneByteTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_V2GR, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneCameraAnimSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_5XSF, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// Class MovieSceneTracks.MovieSceneCameraAnimTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_2J0B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneCameraCutSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_70UJ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_X4EO, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_JQQ8, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_VYXO, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// Class MovieSceneTracks.MovieSceneCameraCutTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_RCLL, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneCameraCutTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_JNSF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_NYFM, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_TDUI, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_AFTT, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_3UQM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneCameraShakeTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_KB3A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneCinematicShotSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// Class MovieSceneTracks.MovieSceneCinematicShotTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneColorSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// Class MovieSceneTracks.MovieSceneColorTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_6Q97, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_0RAL, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// Class MovieSceneTracks.MovieSceneComponentAttachmentSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_LG6Z, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// Class MovieSceneTracks.MovieSceneComponentMobilitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_0PER, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// Class MovieSceneTracks.MovieScenePreAnimatedComponentTransformSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_VVYG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// Class MovieSceneTracks.MovieSceneComponentTransformSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// Class MovieSceneTracks.MovieSceneEnumSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneEnumTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_V72N, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneEulerTransformPropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// Class MovieSceneTracks.MovieSceneEulerTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// Class MovieSceneTracks.MovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// Class MovieSceneTracks.MovieSceneEventRepeaterSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_O3GI, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// Class MovieSceneTracks.MovieSceneEventSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// Class MovieSceneTracks.MovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_EVLE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// Class MovieSceneTracks.MovieScenePreSpawnEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// Class MovieSceneTracks.MovieScenePostSpawnEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// Class MovieSceneTracks.MovieScenePostEvalEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneEventTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_PWHQ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_PFM0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_6HRS, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// Class MovieSceneTracks.MovieSceneEventTriggerSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_RUSK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneFadeSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_FC0Q, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// Class MovieSceneTracks.MovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// Class MovieSceneTracks.MovieSceneFadeTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_JLC4, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneFloatPropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// Class MovieSceneTracks.MovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_CF04, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// Class MovieSceneTracks.MovieSceneHierarchicalBiasSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// Class MovieSceneTracks.MovieSceneIntegerSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// Class MovieSceneTracks.MovieSceneIntegerTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_NY7H, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_CJHI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// Class MovieSceneTracks.MovieSceneLevelVisibilitySection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_W6YU, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_5DSU, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// Class MovieSceneTracks.MovieSceneLevelVisibilitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_NFJK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// Class MovieSceneTracks.MovieSceneLevelVisibilityTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// Class MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_5A1X, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// Class MovieSceneTracks.MovieSceneComponentMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_06XH, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_O0QX, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// Class MovieSceneTracks.MovieSceneObjectPropertySection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// Class MovieSceneTracks.MovieSceneObjectPropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_OXG9, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneParameterSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// Class MovieSceneTracks.MovieSceneParticleParameterTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_5PB6, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieSceneParticleSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// Class MovieSceneTracks.MovieSceneParticleTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_39HQ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// Class MovieSceneTracks.MovieScenePiecewiseFloatBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_F2O6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// Class MovieSceneTracks.MovieScenePrimitiveMaterialSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// Class MovieSceneTracks.MovieScenePrimitiveMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_ROOP, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_B2L5, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieScenePropertyInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_KPSS, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// Class MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// Class MovieSceneTracks.MovieSceneSkeletalAnimationSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_2HL1, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_LU3U, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_ZHL7, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// Class MovieSceneTracks.MovieSceneSkeletalAnimationTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_2DAH, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_I7ST, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_CLNZ, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// Class MovieSceneTracks.MovieSceneSlomoSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// Class MovieSceneTracks.MovieSceneSlomoTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_MW94, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneStringSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// Class MovieSceneTracks.MovieSceneStringTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_NZWN, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneTransformOriginSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_HPV6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// Class MovieSceneTracks.MovieSceneTransformTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// Class MovieSceneTracks.MovieSceneVectorSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_9YJH, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// Class MovieSceneTracks.MovieSceneVectorTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_GJ3C, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_IJ77, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// Class MovieSceneTracks.MovieSceneVisibilityTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// Class MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_X82A, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// Class MovieSceneTracks.WeightAndEasingEvaluatorSystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_S1E8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// WidgetBlueprintGeneratedClass BP_Rings.BP_Rings_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Rings__BP_Rings_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Nav_RightHand, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Nav_LeftHand, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, BtnSelect_LOOP, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Rings_OUT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Rings_IN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, BackBar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, BG_White, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, BP_BackButton_C_18, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, BP_SelectButton_C_27, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Btn_LeftHand, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, Btn_RightHand, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, DirtBrush01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, DirtBrush02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, DirtBrush03, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, DirtBrush04, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, DirtFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, RingList, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, WhiteMenu_BACK, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Rings_C, ShopScreen, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rings_C, 0x04B8);
		}

		// WidgetBlueprintGeneratedClass BP_StatsPanel.BP_StatsPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StatsPanel__BP_StatsPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, ArrowLoop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Stats_OUT, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Stats_IN, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Arrow_DN, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Arrow_UP, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BackBar, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_BackButton_C_47, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ButtonCallout_C_5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ButtonCallout_C_7, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ButtonCallout_C_70, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ButtonCallout_C_71, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ButtonCallout_C_560, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_ControllerFocusScrollBox, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_340, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_369, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_370, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_400, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_401, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_432, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_433, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_466, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_467, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_502, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_503, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_540, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_541, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_580, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_581, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_622, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_623, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_666, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_667, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_712, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_713, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_760, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_761, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_810, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BP_StatSlot_C_811, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BTN_LB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BTN_LT, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BTN_RB, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, BTN_RT, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Btn_Scroll, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Image_5671, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Image_7131, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Image_7310, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Image_11285, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Safeframe, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, StatContainer, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, TemplateScrollBox, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, scrollAmount, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, UnknownData_OL5O, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, parentScreen, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, Stats, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, CurRow, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatsPanel_C, CurCol, 0x054C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatsPanel_C, 0x0550);
		}

		// WidgetBlueprintGeneratedClass BP_Leaderboard.BP_Leaderboard_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Leaderboard__BP_Leaderboard_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Cardswap_LOW, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Leaderboard_OUT, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Leaderboard_IN, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BackBar, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_BackButton_C_19, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_5, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_7, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_51, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_174, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_175, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_205, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_ButtonCallout_C_206, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_3, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_4, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_5, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_6, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_7, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_8, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_9, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_10, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_11, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_12, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_13, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BP_LeaderboardSlot_C_14, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BPOtherComparePanel, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BPSelfComparePanel, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BTN_LB, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Btn_NextCategory, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Btn_PrevCategory, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, BTN_RB, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, CompareButton, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Image_1, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Image_3, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Image_381, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Image_9528, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Image_9530, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Leaderboards, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, ListBox, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, LoadingCanvas, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Lobby_Throbber, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, ProfileButton, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, Safeframe, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TB_Leaderboard_Type, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TB_Leaderboard_Value_Label, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TB_Name_Label, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TB_SeasonEnd_Timer_Label, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TB_SeasonEnd_Timer_Value, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TBStartEndLabel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TextBlock_1, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TextBlock_4, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TextBlock_5, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, TextBlock_3806, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Leaderboard_C, ViewButton, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Leaderboard_C, 0x06C0);
		}

		// WidgetBlueprintGeneratedClass BP_BackPanel.BP_BackPanel_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_BackPanel__BP_BackPanel_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SupportMenuConsole_Outro, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SupportMenuConsole_Intro, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SupportMenu_Outro, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SupportMenu_Intro, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyTypeSelected_Intro_Right, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ControlsConsole_Outro02, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ControlsConsole_Intro02, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Controls_Outro_02, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Controls_Intro_02, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_to_Shop_Outro, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_to_Shop_Intro, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, QuickPlayMenu_Outro, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, QuickPlayMenu_Intro, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyType_Store_Outro, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyType_Store_Intro, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LobbySetup_Store_Outro, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LobbySetup_Store_Intro, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyTypeSelected_Intro_Left, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyType_Outro, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RankedLobbyType_Intro, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ControlsConsole_Outro, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ControlsConsole_Intro, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CreditsConsole_Outro, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CreditsConsole_Intro, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameOptions_AVConsole_Outro, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameOptions_AVConsole_Intro, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameReferenceMenuConsole_Outro, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameReferenceMenuConsole_Intro, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HelpOptionsMenuConsole_Outro, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HelpOptionsMenuConsole_Intro, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_to_Affiliation_Outro, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_to_Affiliation_Intro, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_Outro, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_Intro, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Store_Outro, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Store_Intro, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ShopMenu_Outro, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, ShopMenu_Intro, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, PlayMenu_Outro, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, PlayMenu_Intro, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LeaderBoard_Outro, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LeaderBoard_Intro, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LeaderBoardMenu_Outro, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LeaderBoardMenu_Intro, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Mayor_Outro, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Mayor_Intro, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_SlaughterHouse_Outro, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_SlaughterHouse_Intro, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Penthouse_Outro, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Penthouse_Intro, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Bar_Outro, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Bar_Intro, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Laundry_Outro, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Laundry_Intro, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Credits_Outro, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Credits_Intro, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_Main_Outro, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RapSheet_Outro_3, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RapSheet_Intro_3, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, FUEShopMenu_Intro, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Casino_Outro, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, StoryMode_SUB_Casino_Intro, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, FUEGender_Intro, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EarWristRingsStore_Outro, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EarWristRingsStore_Intro, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EarWristRingsMenu_Outro, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EarWristRingsMenu_Intro, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditGender_Outro, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditGender_Intro, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LobbySetup_Outro, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, LobbySetup_Intro, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CareerMenu_FUE, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AffiliationMenu_Outro, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AffiliationMenu_Intro, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AffiliationSelect_Outro, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AffiliationSelect_Intro, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, TattooStore_Outro, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, TattooStore_Intro, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, TattooMenu_Outro, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, TattooMenu_Intro, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AccessoriesStore_Outro, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AccessoriesStore_Intro, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AccessoriesMenu_Outro, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AccessoriesMenu_Intro, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarItemsShop_Outro, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarItemsShop_Intro, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarItemsMenu_Outro, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarItemsMenu_Intro, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CalenderMenu_Outro, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CalenderMenu_Intro, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, NewsMenu_Outro, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, NewsMenu_Intro, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CommunityMenu_Outro, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CommunityMenu_Intro, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameReferenceMenu_Outro, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameReferenceMenu_Intro, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HowToPlayMenu_Outro, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HowToPlayMenu_Intro, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Controls_Outro, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Controls_Intro, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditCharacter_Outro, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditCharacter_Intro, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RapSheet_Outro, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, RapSheet_Intro, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditCharacterMenu_Outro, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, EditCharacterMenu_Intro, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Leaderboards_AV_Intro, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Leaderboards_AV_Outro, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameOptions_AV_Outro, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, GameOptions_AV_Intro, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SettingsMenu_Outro, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, SettingsMenu_Intro, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HelpOptionsMenu_Outro, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, HelpOptionsMenu_Intro, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CareerMenu_Outro, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, CareerMenu_Intro, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_Idle, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MainMenu_Intro, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BackPanel_RotateLoop, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AffiliationLogo, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarSplash, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, AvatarSplash2, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Bar_01, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Bar_02, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Bar_03, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BG_White, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BigSplatter, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BlackBacker, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BlueSplatter, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_AvatarSplash, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_4, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_9, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_16, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_25, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_36, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_49, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_64, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_81, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_100, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_121, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_144, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_169, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_196, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_225, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_256, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_289, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_324, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_361, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_400, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_441, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_484, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_529, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_576, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_625, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_676, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_729, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_784, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_841, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_900, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_961, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1024, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1089, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1156, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1225, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1296, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1369, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1444, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1521, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1600, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1681, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1723, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1765, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, BP_BackPanel_Card_C_1808, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_Community, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_Exit, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_HelpOptions, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_LeaderBoard, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_MyCareer, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_Play, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Btn_Shop, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Clubs, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Controller_BackPanel, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Diamonds, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtBrush01, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtBrush02, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtBrush03, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtBrush04, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtFrame, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, DirtFrame2, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Hearts, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2452, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2453, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2454, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2455, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2456, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2457, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2458, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2459, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2460, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2461, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2462, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2463, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2465, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2466, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2467, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2468, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2469, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2470, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2471, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2472, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_2473, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_4347, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_4766, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_4963, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_6418, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_8194, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_8806, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Image_11037, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Logo, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, MenuList_TEMPLATE, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_14_IMAGE_Casino, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_16_IMAGE_Bikerbar, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_18_IMAGE_Penthouse, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_37_IMAGE_Laundry, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_38_IMAGE_Slaughterhouse, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_39_IMAGE_Mayor, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_Group, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Panel_Template, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, PanelMenuRotate, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Ranked_BG_Left, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Ranked_BG_Right, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Spades, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, Splatter_dots, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BackPanel_C, WhiteMenu_BACK, 0x0B00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BackPanel_C, 0x0B08);
		}

		// WidgetBlueprintGeneratedClass BP_Tattoos.BP_Tattoos_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Tattoos__BP_Tattoos_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Nav_Torso, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Nav_RightArm, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Nav_LeftArm, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, BtnSelect_LOOP, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Shop_OUT, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Shop_IN, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, BackBar, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, BG_White, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, BP_BackButton_C_18, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, BP_SelectButton_C_27, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Btn_LeftArm, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Btn_RightArm, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, Btn_Torso, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, DirtBrush01, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, DirtBrush02, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, DirtBrush03, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, DirtBrush04, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, DirtFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, TattoosList, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, WhiteMenu_BACK, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Tattoos_C, ShopScreen, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Tattoos_C, 0x04C8);
		}

		// Class ActorSequence.ActorSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// Class ActorSequence.ActorSequenceComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_A9GO, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// Class ActorSequence.ActorSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// WidgetBlueprintGeneratedClass BP_StoreFillerImage.BP_StoreFillerImage_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_StoreFillerImage__BP_StoreFillerImage_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StoreFillerImage_C, Image_1, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StoreFillerImage_C, 0x0268);
		}

		// Class SoundFields.AmbisonicsEncodingSettings
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_19EI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// BlueprintGeneratedClass BP_3D_ActionIcon.BP_3D_ActionIcon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_3D_ActionIcon__BP_3D_ActionIcon_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ActionIcon_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ActionIcon_C, Cancel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ActionIcon_C, Widget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_3D_ActionIcon_C, DynamicMaterial, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_3D_ActionIcon_C, 0x0240);
		}

		// BlueprintGeneratedClass BP_LocalPlayer.BP_LocalPlayer_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LocalPlayer__BP_LocalPlayer_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LocalPlayer_C, 0x03E0);
		}

		// Class NiagaraAnimNotifies.AnimNotify_PlayNiagaraEffect
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_RD8L, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_ESQJ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_0FNF, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// Class NiagaraAnimNotifies.AnimNotifyState_TimedNiagaraEffect
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_5Q5M, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// Class Foliage.FoliageInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_1TJC, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// Class Foliage.FoliageStatistics
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// Class Foliage.FoliageType
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_RGJT, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WKU2, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QUPS, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_M3EE, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Q47Y, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1SWR, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8214, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_R7NF, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_T3CT, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NIEO, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_5JPP, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LXCE, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_XA9Y, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_R0PY, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_F1IT, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_25VG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_IB1E, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1MEL, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8OYY, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// Class Foliage.FoliageType_Actor
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_MGR1, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// Class Foliage.FoliageType_InstancedStaticMesh
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// Class Foliage.InstancedFoliageActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_A7ET, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// Class Foliage.InteractiveFoliageActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_HVDK, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// Class Foliage.InteractiveFoliageComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_ZQYG, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// Class Foliage.ProceduralFoliageBlockingVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// Class Foliage.ProceduralFoliageComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_DQAH, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// Class Foliage.ProceduralFoliageSpawner
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_X2B8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_CDKA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// Class Foliage.ProceduralFoliageTile
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_E26D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_OX8V, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// Class Foliage.ProceduralFoliageVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// BlueprintGeneratedClass BP_LightControl.BP_LightControl_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LightControl__BP_LightControl_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightControl_C, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightControl_C, Refresh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightControl_C, UnknownData_CFAS, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LightControl_C, HairHighlightsObject, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LightControl_C, 0x0238);
		}

		// WidgetBlueprintGeneratedClass BP_Wristwear.BP_Wristwear_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Wristwear__BP_Wristwear_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Nav_RightWrist, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Nav_LeftWrist, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, BtnSelect_LOOP, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Wristwear_OUT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Wristwear_IN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, BackBar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, BG_White, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, BP_BackButton_C_18, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, BP_SelectButton_C_27, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Btn_LeftWrist, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, Btn_RightWrist, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, DirtBrush01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, DirtBrush02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, DirtBrush03, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, DirtBrush04, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, DirtFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, WhiteMenu_BACK, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, WristList, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Wristwear_C, ShopScreen, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Wristwear_C, 0x04B8);
		}

		// WidgetBlueprintGeneratedClass BP_LobbyPlayerSlot.BP_LobbyPlayerSlot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_LobbyPlayerSlot__BP_LobbyPlayerSlot_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Highlighted, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, ButtonBank, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, HorizontalBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, IM_FriendIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, IM_Ready, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, IM_VoiceIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Image_753, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, MuteButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Player_Loading, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, ProfileButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, TB_Name, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, TB_Number, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, playerNumber, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, UnknownData_E9CH, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, TalkingImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, MutedImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, SelfImage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, FriendImage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Player, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, PlayerReady, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, UnknownData_4QI9, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, Container, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, RequestMute, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, RequestProfileView, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, ListIndex, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, ShouldShow, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, isTalking, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LobbyPlayerSlot_C, isLocalPlayer, 0x0346);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LobbyPlayerSlot_C, 0x0347);
		}

		// WidgetBlueprintGeneratedClass BP_HelpAndOptions.BP_HelpAndOptions_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HelpAndOptions__BP_HelpAndOptions_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_Support, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_Credits, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_Video_Options, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_AudioOptions, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_GameOptions, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_Controls, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Nav_GameReference, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, BtnSelect_LOOP, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, HelpAndOptions_OUT, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, HelpAndOptions_IN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, BackBar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, BP_BackButton_C_18, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, BP_SelectButton_C_27, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_AudioOptions, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_Controls, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_Credits, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_GameOptions, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_GameReference, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_Support, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Btn_VideoOptions, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Image_1, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, OptionsList, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, Safeframe, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, SpacerBox, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, WhiteMenu_BACK, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HelpAndOptions_C, WhiteMenu_BACK_Console, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HelpAndOptions_C, 0x04F0);
		}

		// WidgetBlueprintGeneratedClass BP_ChallengeProgressSlotLong.BP_ChallengeProgressSlotLong_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ChallengeProgressSlotLong__BP_ChallengeProgressSlotLong_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, BP_RadialMeter_133, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, Glow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, Icon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, OutOf, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, ScaleBox_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, ScaleBox_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, TextBlock_2995, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, TextBlock_2996, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, Title, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, TimeToAnimate, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, UnknownData_5C38, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, Data, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, Progress, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, ProgressFloat, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, CurrentTier, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, CurrentReward, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, CurrentTarget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, RewardTextVis, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ChallengeProgressSlotLong_C, RewardIconVis, 0x0365);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ChallengeProgressSlotLong_C, 0x0366);
		}

		// WidgetBlueprintGeneratedClass BP_Laundromat_H2H_NP01.BP_Laundromat_H2H_NP01_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_Laundromat_H2H_NP01__BP_Laundromat_H2H_NP01_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, AnimateOut, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, AnimateIn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, Nickname, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, PlayerName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Laundromat_H2H_NP01_C, PlayerName_Shadow, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Laundromat_H2H_NP01_C, 0x0390);
		}

		// WidgetBlueprintGeneratedClass BP_CareerStats.BP_CareerStats_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CareerStats__BP_CareerStats_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, RapSheet_OUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, RapSheet_IN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, ArrowLEFT, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, ArrowRIGHT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, BackBar, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, BP_BackButton_C_47, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, BP_GenericLoading2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, Button_812, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, Button_814, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, Image_7310, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, LoadingBorder, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, RapSheetList, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, Safeframe, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, CurrentPage, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, UnknownData_6ABH, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, overviewPanel, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, StatsPanel, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, challengesPanel, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, ChallengeData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, PageSound, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, AvatarInfo, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CareerStats_C, RecentUnlocks, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CareerStats_C, 0x04D8);
		}

		// Class GooglePAD.GooglePADFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// WidgetBlueprintGeneratedClass BP_OptionSpinner.BP_OptionSpinner_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_OptionSpinner__BP_OptionSpinner_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TargetChange_Right_Complete, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TargetChange_Left_Complete, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TargetChange_Right, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TargetChange_Left, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, ButtonFocus, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Arrow_Btn_Next, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Arrow_Btn_Prev, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Border, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Button_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Spinner_Background, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TB_CurrentChoice, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TB_CurrentLabel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, DisabledColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, EnabledColor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, NextButtonStyle, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, SpinnerName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, PrevButtonStyle, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, NormalBrush, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, SelectedBrush, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TextColor, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, TextFont, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, PrevButtonTransform, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, NextButtonTransform, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, CurrentIndex, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, UnknownData_T56C, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, Options, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, CanRollOver, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, UnknownData_VO72, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, HoverSound, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, ChangeSound, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, HasControllerFocus, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, UnknownData_7BM6, 0x0A19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, ValueChanged, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, IsMouseHovered, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_OptionSpinner_C, IsCycleAnimating, 0x0A31);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OptionSpinner_C, 0x0A32);
		}

		// BlueprintGeneratedClass 3D_Background.3D_Background_C
		TEST_METHOD(BlueprintGeneratedClass__3D_Background__3D_Background_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::A3D_Background_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::A3D_Background_C, FrontFaceIndicator, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::A3D_Background_C, UI_Size_Indicator, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::A3D_Background_C, Background, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A3D_Background_C, 0x0240);
		}

		// Class Overlay.Overlays
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// Class Overlay.BasicOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// Class Overlay.LocalizedOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// ScriptStruct PhysXVehicles.WheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_1243, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// ScriptStruct PhysXVehicles.ReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// ScriptStruct PhysXVehicles.VehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// ScriptStruct PhysXVehicles.TireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_3FZT, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// ScriptStruct PhysXVehicles.VehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_64CU, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// ScriptStruct PhysXVehicles.VehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_7V8T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// ScriptStruct PhysXVehicles.VehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// ScriptStruct PhysXVehicles.VehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_R535, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_H3SW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// ScriptStruct PhysXVehicles.AnimNode_WheelHandler
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_O16L, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// ScriptStruct PhysXVehicles.VehicleAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_VCIL, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0770);
		}

		// ScriptStruct CinematicCamera.CameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_34PC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_HHAP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_FNNX, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// ScriptStruct CinematicCamera.CameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// ScriptStruct CinematicCamera.CameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// ScriptStruct CinematicCamera.CameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_X7T8, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// ScriptStruct CinematicCamera.CameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_TGR7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_BO3S, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_KKKP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_A3HJ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// ScriptStruct CinematicCamera.NamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_TDFW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// ScriptStruct CinematicCamera.NamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// UserDefinedStruct BP_PlayerStruct.BP_PlayerStruct
		TEST_METHOD(UserDefinedStruct__BP_PlayerStruct__BP_PlayerStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, Talking_1_1EB10F4B4F143F677A8F5E82EB0C0F31, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, IsFriend_3_719109524B4C11376236DEABD2F56564, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, IsMe_5_CA8A131F46DB16554B4B38B5724DC650, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, IsMuted_14_7204EFB34C76722B85B6C7BC21C234DF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, UnknownData_STDY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBP_PlayerStruct, DisplayName_11_BEB5EDAA4B25A617139760B72CA46311, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBP_PlayerStruct, 0x0018);
		}

		// ScriptStruct GameplayTasks.GameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_T85R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// ScriptStruct EngineSettings.AutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_WQQN, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// ScriptStruct EngineSettings.GameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// ScriptStruct NavigationSystem.SupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_T8DR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// ScriptStruct NavigationSystem.NavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// ScriptStruct NavigationSystem.NavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_WD6J, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_S6UH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_08FV, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// ScriptStruct NavigationSystem.NavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_RD16, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// ScriptStruct NavigationSystem.NavLinkCustomInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_OHBL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0070);
		}

		// ScriptStruct NavigationSystem.RecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_MYCS, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_1LMH, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// ScriptStruct StaticMeshDescription.UVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// ScriptStruct EditableMesh.AdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_YVEE, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// ScriptStruct EditableMesh.AdaptorTriangleID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// ScriptStruct EditableMesh.AdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_R79M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// ScriptStruct EditableMesh.PolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_6GDF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_PSZ5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// ScriptStruct EditableMesh.MeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// ScriptStruct EditableMesh.PolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_YBES, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// ScriptStruct EditableMesh.VertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// ScriptStruct EditableMesh.VertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// ScriptStruct EditableMesh.ChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_RRPZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// ScriptStruct EditableMesh.VertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// ScriptStruct EditableMesh.VertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_84SL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// ScriptStruct EditableMesh.AttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_WN1I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// ScriptStruct EditableMesh.AttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_H7PL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// ScriptStruct EditableMesh.AttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_HRY7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// ScriptStruct EditableMesh.PolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_5IDO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// ScriptStruct EditableMesh.VertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// ScriptStruct EditableMesh.PolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_445V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_R2RH, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// ScriptStruct EditableMesh.EdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_TAIP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// ScriptStruct EditableMesh.VertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_6IBR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_CAYT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// ScriptStruct EditableMesh.VertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_O7GH, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// ScriptStruct EditableMesh.SubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// ScriptStruct EditableMesh.SubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// ScriptStruct EditableMesh.SubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// ScriptStruct EditableMesh.SubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_8BKI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// ScriptStruct EditableMesh.SubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// ScriptStruct EditableMesh.RenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_JTS5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// ScriptStruct EditableMesh.RenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_9JNN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// ScriptStruct ChaosNiagara.ChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// ScriptStruct EngineMessages.EngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// ScriptStruct EngineMessages.EngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// ScriptStruct EngineMessages.EngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_LNL5, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_U4A3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// ScriptStruct EngineMessages.EngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_9BNJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// ScriptStruct BuildPatchServices.SHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// ScriptStruct BuildPatchServices.ChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// ScriptStruct BuildPatchServices.FileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_WOBM, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_A3QK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_C7J4, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// ScriptStruct BuildPatchServices.ChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_8D5A, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_3AW4, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// ScriptStruct BuildPatchServices.CustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// ScriptStruct GeometryCache.TrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_MSFT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// ScriptStruct GeometryCache.GeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_ENAO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// ScriptStruct GeometryCache.GeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_1TP3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// ScriptStruct GeometryCache.GeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_GS42, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// ScriptStruct Chaos.SolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_E0I5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// ScriptStruct Chaos.SolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_OEP6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// ScriptStruct Chaos.SolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_VO90, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// ScriptStruct Chaos.ChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_8VIX, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_X5Y6, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_ZCXS, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_CB2P, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// ScriptStruct Chaos.SolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// ScriptStruct Chaos.SolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// ScriptStruct Chaos.RecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_YWS4, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// ScriptStruct Chaos.RecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// ScriptStruct Chaos.SolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// ScriptStruct JsonUtilities.JsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_MNTK, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// ScriptStruct AudioCapture.AudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// ScriptStruct ImageWriteQueue.ImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_IXSJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_DNS2, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// ScriptStruct Synthesis.Synth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_B495, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// ScriptStruct Synthesis.EpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_Y24K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// ScriptStruct Synthesis.ModularSynthPreset
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0GVU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_JVJ5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_QBP3, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_OI5S, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_79GH, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_F307, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_2BTG, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_Q5VE, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_X1YO, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_ZVKV, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_DLWH, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KG6Z, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_YQTI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_8QVH, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// ScriptStruct Synthesis.ModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// ScriptStruct Synthesis.SourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_X6LJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, SampleRateModulation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_KYQ3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, BitModulation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0030);
		}

		// ScriptStruct Synthesis.SourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DepthModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FrequencyModulation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FeedbackModulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetModulation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryModulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, SpreadModulation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0078);
		}

		// ScriptStruct Synthesis.SourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_C0B0, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_PUE4, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// ScriptStruct Synthesis.SourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_XJFQ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// ScriptStruct Synthesis.SourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_K5BW, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// ScriptStruct Synthesis.SourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// ScriptStruct Synthesis.SourceEffectFilterAudioBusModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterAudioBusModulationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, AudioBus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerAttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeGainMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, FilterParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, UnknownData_EYGX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinFrequencyModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxFrequencyModulation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinResonanceModulation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxResonanceModulation, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterAudioBusModulationSettings, 0x0028);
		}

		// ScriptStruct Synthesis.SourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_PS1T, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_XUJ0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, AudioBusModulation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x0020);
		}

		// ScriptStruct Synthesis.SourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// ScriptStruct Synthesis.SourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, inputMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_HK9U, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x0008);
		}

		// ScriptStruct Synthesis.SourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// ScriptStruct Synthesis.SourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_99U1, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// ScriptStruct Synthesis.SourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_HCK5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_QOUK, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, AudioBusModulator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0020);
		}

		// ScriptStruct Synthesis.SourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_UQTN, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// ScriptStruct Synthesis.SourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_QEZ9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_0LPV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0024);
		}

		// ScriptStruct Synthesis.SourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// ScriptStruct Synthesis.SubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bBypass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixInputChannelFormatToImpulseResponseFormat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixReverbOutputToOutputChannelFormat, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_G3U3, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_NS0A, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_8HVZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_KA7I, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0028);
		}

		// ScriptStruct Synthesis.SubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// ScriptStruct Synthesis.SubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_0CAN, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// ScriptStruct Synthesis.SubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// ScriptStruct Synthesis.DynamicsBandSettings
		TEST_METHOD(ScriptStruct__Synthesis__DynamicsBandSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, CrossoverTopFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ThresholdDb, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, Ratio, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, KneeBandwidthDb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, InputGainDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, OutputGainDb, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicsBandSettings, 0x0020);
		}

		// ScriptStruct Synthesis.SubmixEffectMultibandCompressorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectMultibandCompressorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_WKXT, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bLinkChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bFourPole, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_T9OZ, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, Bands, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectMultibandCompressorSettings, 0x0020);
		}

		// ScriptStruct Synthesis.SubmixEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectStereoDelaySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_BBU4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_8LRG, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectStereoDelaySettings, 0x0024);
		}

		// ScriptStruct Synthesis.TapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_BFL3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// ScriptStruct Synthesis.SubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// ScriptStruct Synthesis.Synth2DSliderStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_F4IE, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// ScriptStruct Synthesis.SynthKnobStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_OFEV, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// ScriptStruct Synthesis.PatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// ScriptStruct Synthesis.SourceEffectBitCrusherBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherBaseSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, SampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, BitDepth, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherBaseSettings, 0x0008);
		}

		// ScriptStruct Synthesis.SourceEffectChorusBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusBaseSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusBaseSettings, 0x0018);
		}

		// ScriptStruct Synthesis.SynthSlateStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_BGR5, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// ScriptStruct MeshDescription.ElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// ScriptStruct MeshDescription.PolygonGroupID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// ScriptStruct MeshDescription.PolygonID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// ScriptStruct MeshDescription.VertexID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// ScriptStruct MeshDescription.VertexInstanceID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// ScriptStruct MeshDescription.EdgeID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// ScriptStruct MeshDescription.TriangleID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_77FS, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_HZFU, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_PA53, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// ScriptStruct GeometryCollectionEngine.GeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_HKXP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_578N, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_68KT, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_WHDJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_GNU1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_ZW57, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_DL3A, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// ScriptStruct GeometryCollectionEngine.GeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_ZWFW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// ScriptStruct GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_MR6L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// ScriptStruct GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_7ZIZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// ScriptStruct GeometryCollectionEngine.GeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_VUJA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// ScriptStruct GeometryCollectionEngine.GeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_WN6Y, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_GKV6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// ScriptStruct GeometryCollectionEngine.ChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// ScriptStruct MediaCompositing.MovieSceneMediaPlayerPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_24LM, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0048);
		}

		// ScriptStruct MediaCompositing.MovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_UPKO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// ScriptStruct MediaCompositing.MovieSceneMediaSectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_V6YG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_W035, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_LUIZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_N2G1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_UYSZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// ScriptStruct DatasmithContent.DatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_371M, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// ScriptStruct DatasmithContent.DatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// ScriptStruct DatasmithContent.DatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_F7IZ, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// ScriptStruct DatasmithContent.DatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// ScriptStruct DatasmithContent.DatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// ScriptStruct DatasmithContent.DatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_R3EH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// ScriptStruct DatasmithContent.DatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// ScriptStruct DatasmithContent.DatasmithRetessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithRetessellationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, RetessellationRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, UnknownData_XTKA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithRetessellationOptions, 0x0014);
		}

		// ScriptStruct TemplateSequence.TemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_SFT5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// ScriptStruct MovieScene.MovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_KM1R, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_JGSL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_MB1N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// ScriptStruct MovieScene.OptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// ScriptStruct MovieScene.MovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_RD6C, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_AYQX, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_L7QH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, startTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_89AK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_WDT8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_8GRP, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_RU04, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_2ANW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_91V9, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// ScriptStruct MovieScene.MovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_K0D6, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_PKRB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_K601, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_BP80, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// ScriptStruct MovieScene.MovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// ScriptStruct MovieScene.MovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_E24P, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_D28B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_WT9I, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// ScriptStruct MovieScene.MovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_A4I4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneBoolChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_RV4Q, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_PXLK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// ScriptStruct MovieScene.MovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_KKJU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_LXUR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_1ZYA, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_T5UF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_6147, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_4ZFV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_J9QN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_7V02, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_KN3B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_9M7W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_Q26K, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_7E72, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_JE2W, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_0E1F, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_25P2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_ZO2J, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_5HM4, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_S7NY, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_AD47, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// ScriptStruct MovieScene.MovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_2N9A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// ScriptStruct MovieScene.MovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_3FIT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_J875, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// ScriptStruct MovieScene.MovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_OI97, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_1BSU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_5KMB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_C237, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_LS0Y, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_GAFS, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_SIWS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_Y4Q1, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// ScriptStruct MovieScene.MovieSceneKeyHandleMap
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// ScriptStruct MovieScene.MovieSceneFloatChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_2SIN, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_3F97, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// ScriptStruct MovieScene.MovieSceneIntegerChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_XGW4, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_K965, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// ScriptStruct MovieScene.MovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// ScriptStruct MovieScene.MovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// ScriptStruct MovieScene.MovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// ScriptStruct MovieScene.TrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_TD7Z, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// ScriptStruct MovieScene.EasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// ScriptStruct MovieScene.MovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_YHYM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// ScriptStruct MovieScene.MovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// ScriptStruct MovieScene.MovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// ScriptStruct MovieScene.MovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// ScriptStruct MovieScene.MovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_Q949, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// ScriptStruct MovieScene.MovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_L8JG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// ScriptStruct MovieScene.MovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// ScriptStruct MovieScene.MovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_JRBJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// ScriptStruct MovieScene.MovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_4HX1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneKeyTimeStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_CTGS, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// ScriptStruct MovieScene.GeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_P7R2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// ScriptStruct MovieScene.MovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// ScriptStruct MovieScene.MovieSceneObjectPathChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_WIDM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// ScriptStruct MovieScene.MovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_HQPC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// ScriptStruct MovieScene.SectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_C34J, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// ScriptStruct MovieScene.MovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_D7YS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_T1LD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// ScriptStruct MovieScene.MovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_41IJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_PJWJ, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// ScriptStruct MovieScene.MovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// ScriptStruct MovieScene.TestMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// ScriptStruct MovieScene.MovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_HDH6, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// ScriptStruct MovieScene.MovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// ScriptStruct AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_DN00, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// ScriptStruct NiagaraShader.SimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_OHU3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// ScriptStruct NiagaraShader.NiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_N1EP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// ScriptStruct NiagaraShader.NiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// ScriptStruct NiagaraShader.NiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_93P5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// ScriptStruct InteractiveToolsFramework.BrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_GA9Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// ScriptStruct InteractiveToolsFramework.BehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_1K92, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// ScriptStruct InteractiveToolsFramework.ActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_T4IV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// ScriptStruct InteractiveToolsFramework.GizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// ScriptStruct InteractiveToolsFramework.GizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// ScriptStruct InteractiveToolsFramework.InputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_UEG6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// ScriptStruct AnimationCore.CCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_Q515, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// ScriptStruct AnimationCore.Axis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_4GP1, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// ScriptStruct AnimationCore.ConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_8EU1, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// ScriptStruct AnimationCore.ConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_AD0R, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// ScriptStruct AnimationCore.FilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// ScriptStruct AnimationCore.ConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_D7NY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_DP1X, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// ScriptStruct AnimationCore.AimConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_09HK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// ScriptStruct AnimationCore.TransformConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_W6FK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// ScriptStruct AnimationCore.ConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// ScriptStruct AnimationCore.TransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_OUB9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_ACO1, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// ScriptStruct AnimationCore.ConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_UOEY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_A1FB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// ScriptStruct AnimationCore.TransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// ScriptStruct AnimationCore.EulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// ScriptStruct AnimationCore.FABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_MR0Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// ScriptStruct AnimationCore.NodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// ScriptStruct AnimationCore.NodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// ScriptStruct AnimationCore.NodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// ScriptStruct AnimationCore.NodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_10QK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// ScriptStruct AnimationCore.TransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_A1RT, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// ScriptStruct MovieSceneCapture.CompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// ScriptStruct MovieSceneCapture.CaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// ScriptStruct MovieSceneCapture.MovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_F6A8, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_YCLJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_H64V, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_DRXM, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// ScriptStruct MovieSceneCapture.FrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// ScriptStruct MovieSceneCapture.CapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_DO8H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// ScriptStruct MovieSceneCapture.CapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// ScriptStruct NetCore.NetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_OY7C, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// ScriptStruct MRMesh.MRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_QPFG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_C8C4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_ACGF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// ScriptStruct ClothingSystemRuntimeNv.ClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// ScriptStruct Serialization.StructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_66A8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_IFFO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_K17W, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// ScriptStruct Serialization.StructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// ScriptStruct Serialization.StructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// ScriptStruct Serialization.StructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_OEN0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_U0Y6, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_HAJX, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// ScriptStruct Serialization.StructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_G76R, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// ScriptStruct Serialization.StructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// ScriptStruct Serialization.StructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// ScriptStruct Serialization.StructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_YD4C, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_0OOC, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// ScriptStruct Serialization.StructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_UG1F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_YIIA, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_KKER, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// ScriptStruct Niagara.NiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// ScriptStruct Niagara.NiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// ScriptStruct Niagara.NiagaraVariable
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_BTUY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// ScriptStruct Niagara.NiagaraVariableWithOffset
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_LHDS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_22BL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// ScriptStruct Niagara.NiagaraUserRedirectionParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// ScriptStruct Niagara.NiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_MX4Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// ScriptStruct Niagara.NCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_M7O6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// ScriptStruct Niagara.NCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_GUE1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// ScriptStruct Niagara.NiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_FK84, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_I5EV, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_A1LE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_H4SE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// ScriptStruct Niagara.NiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_GTMY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_DD0S, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_6C0R, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// ScriptStruct Niagara.NiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_B23I, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_VRRX, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// ScriptStruct Niagara.NiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// ScriptStruct Niagara.NDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_IQ3H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_EFSA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// ScriptStruct Niagara.NiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_Q1Y7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// ScriptStruct Niagara.NiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// ScriptStruct Niagara.NiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// ScriptStruct Niagara.NiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_S5XD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// ScriptStruct Niagara.NiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_RO7N, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// ScriptStruct Niagara.NiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_FLY0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_VQ00, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// ScriptStruct Niagara.NiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_3Y9H, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// ScriptStruct Niagara.NiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// ScriptStruct Niagara.NiagaraEmitterScalabilityOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_Q8B0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// ScriptStruct Niagara.NiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraEventScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_Z5D7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_TJ8S, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_8KZ1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// ScriptStruct Niagara.NiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_UVUN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_6WL4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_PTOE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_SPXI, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// ScriptStruct Niagara.NiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// ScriptStruct Niagara.NiagaraScriptExecutionParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_L8VZ, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// ScriptStruct Niagara.NiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_3YUG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_9NAD, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// ScriptStruct Niagara.NiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// ScriptStruct Niagara.NiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_A5LA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_W9JA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// ScriptStruct Niagara.VMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// ScriptStruct Niagara.VMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_RTZ4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// ScriptStruct Niagara.NiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_M4D9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// ScriptStruct Niagara.NiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_LERW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_DWIR, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_I17D, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_INSQ, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// ScriptStruct Niagara.NiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_74H9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// ScriptStruct Niagara.NiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// ScriptStruct Niagara.NiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// ScriptStruct Niagara.NiagaraSystemScalabilityOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_TSCD, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// ScriptStruct Niagara.NiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_KT1U, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_T91L, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// ScriptStruct Niagara.NiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// ScriptStruct Niagara.NiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// ScriptStruct Niagara.NiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraBoolParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraColorParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraFloatParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraIntegerParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraSystemTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_O8NL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_A6BP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_1LTS, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_JMTZ, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraSystemTrackTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// ScriptStruct Niagara.MovieSceneNiagaraVectorParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_7DB9, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// ScriptStruct Niagara.NiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// ScriptStruct Niagara.NiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// ScriptStruct Niagara.NiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// ScriptStruct Niagara.NiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_ID8K, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// ScriptStruct Niagara.NiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_0PVI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// ScriptStruct Niagara.NiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// ScriptStruct Niagara.BasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// ScriptStruct Niagara.MeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_V71U, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// ScriptStruct Niagara.NiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// ScriptStruct Niagara.NiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// ScriptStruct Niagara.NiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_0QRC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// ScriptStruct Niagara.NiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_KPHH, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraScriptInstanceParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_Y0HV, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// ScriptStruct Niagara.NiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_8GFT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_EIL1, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// ScriptStruct Niagara.EmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_4VE1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// ScriptStruct Niagara.NiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// ScriptStruct Niagara.NiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// ScriptStruct Niagara.NiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_5QT6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_GLLE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_QVPU, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_924Y, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_W2JH, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_SACU, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// ScriptStruct Niagara.NiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_U30N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_N3HH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// ScriptStruct Niagara.NiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// ScriptStruct Niagara.NiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// ScriptStruct Niagara.NiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// ScriptStruct Niagara.NiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// ScriptStruct Niagara.NiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_XKDG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// ScriptStruct Niagara.NiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_X6KP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// ScriptStruct Niagara.NiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// ScriptStruct Niagara.NiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// ScriptStruct Niagara.NiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// ScriptStruct Niagara.NiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// ScriptStruct Niagara.NiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// ScriptStruct Niagara.NiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// ScriptStruct Niagara.NiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// ScriptStruct Niagara.NiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_57OU, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_RRLU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// ScriptStruct Niagara.NiagaraWorldManagerTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_JSB2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// ScriptStruct Renderer.LightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_IOJU, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// ScriptStruct SlateCore.Geometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_IITA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// ScriptStruct SlateCore.Margin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// ScriptStruct SlateCore.SlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_KUFU, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// ScriptStruct SlateCore.SlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_6C6G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_98HL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_G8K0, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// ScriptStruct SlateCore.InputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_T8PA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// ScriptStruct SlateCore.PointerEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_HA1S, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// ScriptStruct SlateCore.CharacterEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_2RKC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// ScriptStruct SlateCore.KeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_VF09, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// ScriptStruct SlateCore.NavigationEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_9GCP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// ScriptStruct SlateCore.AnalogInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_123D, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// ScriptStruct SlateCore.FontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_2WUF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// ScriptStruct SlateCore.SlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_2VU2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_V8VF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// ScriptStruct SlateCore.SlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_UT3M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// ScriptStruct SlateCore.TableRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// ScriptStruct SlateCore.SlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_38C3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// ScriptStruct SlateCore.ButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// ScriptStruct SlateCore.ComboButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// ScriptStruct SlateCore.ComboBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// ScriptStruct SlateCore.EditableTextStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// ScriptStruct SlateCore.ScrollBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// ScriptStruct SlateCore.EditableTextBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// ScriptStruct SlateCore.TextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// ScriptStruct SlateCore.SpinBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// ScriptStruct SlateCore.FocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_6FV8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// ScriptStruct SlateCore.MotionEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_WWYN, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// ScriptStruct SlateCore.FontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_QBU3, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// ScriptStruct SlateCore.TypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// ScriptStruct SlateCore.Typeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// ScriptStruct SlateCore.CompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_7Y56, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// ScriptStruct SlateCore.CompositeSubFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// ScriptStruct SlateCore.CompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// ScriptStruct SlateCore.CaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_1KVZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// ScriptStruct SlateCore.WindowStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// ScriptStruct SlateCore.ScrollBorderStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// ScriptStruct SlateCore.ScrollBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// ScriptStruct SlateCore.DockTabStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_Y31E, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// ScriptStruct SlateCore.TableColumnHeaderStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// ScriptStruct SlateCore.SplitterStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// ScriptStruct SlateCore.HeaderRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// ScriptStruct SlateCore.InlineTextImageStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_ET65, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// ScriptStruct SlateCore.SliderStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_P0GX, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// ScriptStruct SlateCore.VolumeControlStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// ScriptStruct SlateCore.SearchBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_SO0K, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// ScriptStruct SlateCore.ExpandableAreaStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_9NH2, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// ScriptStruct SlateCore.ProgressBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// ScriptStruct SlateCore.InlineEditableTextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// ScriptStruct SlateCore.HyperlinkStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// ScriptStruct SlateCore.CheckBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_D5UF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// ScriptStruct AugmentedReality.ARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_D4GU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// ScriptStruct AugmentedReality.ARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_ANL3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_R6PG, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// ScriptStruct AugmentedReality.ARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_IXVL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// ScriptStruct AugmentedReality.ARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_UHPB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// ScriptStruct AugmentedReality.ARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_2FV3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// ScriptStruct AugmentedReality.ARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_3HD3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_81ER, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// ScriptStruct AugmentedReality.ARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// ScriptStruct AugmentedReality.AREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// ScriptStruct AugmentedReality.ARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// ScriptStruct AugmentedReality.ARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_CBH4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_8TLC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// ScriptStruct AugmentedReality.ARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_7VME, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_QDSG, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// ScriptStruct AugmentedReality.ARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// ScriptStruct AugmentedReality.ARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_G56F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// ScriptStruct AugmentedReality.ARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_04FV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// ScriptStruct AugmentedReality.TrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// ScriptStruct AugmentedReality.ARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// ScriptStruct AugmentedReality.ARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_RI5G, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_XL6L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// ScriptStruct AugmentedReality.ARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// ScriptStruct AugmentedReality.ARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// ScriptStruct AugmentedReality.ARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_VSBI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// ScriptStruct OnlineSubsystemUtils.PIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// ScriptStruct OnlineSubsystemUtils.PlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_PWQK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// ScriptStruct OnlineSubsystemUtils.PartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_P6RS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// ScriptStruct OnlineSubsystemUtils.SpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// ScriptStruct OnlineSubsystemUtils.BlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_NB2X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// ScriptStruct OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// ScriptStruct OnlineSubsystemUtils.OnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_Z68J, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_VP3A, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_QUBM, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// ScriptStruct OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// ScriptStruct OnlineSubsystemUtils.InAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// ScriptStruct OnlineSubsystemUtils.InAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_CMP5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// ScriptStruct OnlineSubsystemUtils.InAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_XTMO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_WWZA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_FFK6, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// ScriptStruct EyeTracker.EyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// ScriptStruct EyeTracker.EyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// ScriptStruct Slate.VirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// ScriptStruct Slate.InputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_P0CP, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// ScriptStruct Slate.Anchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// ScriptStruct Slate.CustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_TVG0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// ScriptStruct Slate.CustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_0FGL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// ScriptStruct Slate.CustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// ScriptStruct Slate.CustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_57QR, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.PointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.ClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.ClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_D46R, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_7TVI, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.ClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.ClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_H8CO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_UMQK, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// ScriptStruct ClothingSystemRuntimeCommon.ClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_JCRT, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_54VV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_7LYN, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_NGD7, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_6D89, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// ScriptStruct GameplayTags.GameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// ScriptStruct GameplayTags.GameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_GZ7S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// ScriptStruct GameplayTags.GameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_Z23W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// ScriptStruct GameplayTags.RestrictedGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_OORY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// ScriptStruct GameplayTags.GameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// ScriptStruct GameplayTags.RestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// ScriptStruct GameplayTags.GameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_30MA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// ScriptStruct GameplayTags.GameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_WXU1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// ScriptStruct GameplayTags.GameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_RXFF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// ScriptStruct MediaUtils.MediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// ScriptStruct MediaUtils.MediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_T3R1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_EVNI, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// ScriptStruct OnlineSubsystem.NamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// ScriptStruct OnlineSubsystem.NamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_0K7M, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_1S05, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// ScriptStruct ChaosSolverEngine.ChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_BHQD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// ScriptStruct ChaosSolverEngine.BreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_8195, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// ScriptStruct ChaosSolverEngine.ChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// ScriptStruct ChaosSolverEngine.ChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_2CUF, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// ScriptStruct ChaosSolverEngine.ChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// ScriptStruct ActorLayerUtilities.ActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}

		// ScriptStruct MotoSynth.MotoSynthRuntimeSettings
		TEST_METHOD(ScriptStruct__MotoSynth__MotoSynthRuntimeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bSynthToneEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_X2KS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthOctaveShift, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bGranularEngineEnabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_LCVF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEngineVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEnginePitchScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumSamplesToCrossfadeBetweenGrains, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumGrainTableEntriesPerGrain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainTableRandomOffsetForConstantRPMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainCrossfadeSamplesForConstantRPMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_DGXS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, AccelerationSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, DecelerationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_98EO, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoDelayMsec, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoFeedback, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerWetlevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDryLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDelayRatio, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerFilterEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_C20M, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterFrequency, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_EF5O, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotoSynthRuntimeSettings, 0x0068);
		}

		// ScriptStruct MotoSynth.GrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// ScriptStruct UMG.WidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// ScriptStruct UMG.NamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// ScriptStruct UMG.AnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_ATOQ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_RAXR, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// ScriptStruct UMG.DynamicPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// ScriptStruct UMG.AnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// ScriptStruct UMG.SlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_IR2J, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// ScriptStruct UMG.RadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_BSUA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// ScriptStruct UMG.UserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_5JT5, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// ScriptStruct UMG.ShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// ScriptStruct UMG.MovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// ScriptStruct UMG.SlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// ScriptStruct UMG.WidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_I4HS, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// ScriptStruct UMG.BlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_5J2C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// ScriptStruct UMG.DelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_QSMP, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// ScriptStruct UMG.WidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_S99C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// ScriptStruct UMG.EventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_QQQT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// ScriptStruct UMG.PaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_PYS8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// ScriptStruct UMG.MovieSceneMarginSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_DOXW, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// ScriptStruct UMG.MovieSceneWidgetMaterialSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// ScriptStruct UMG.RichTextStyleRow
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// ScriptStruct UMG.RichImageRow
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// ScriptStruct UMG.WidgetComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_RDKG, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// ScriptStruct TimeManagement.TimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// ScriptStruct TimeManagement.TimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_QD30, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// ScriptStruct AIModule.AIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_6WJQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// ScriptStruct AIModule.AINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_9BKA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_HKB1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// ScriptStruct AIModule.AIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_MFK7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_5DZG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// ScriptStruct AIModule.AITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_A8JR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// ScriptStruct AIModule.AISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_9B3A, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// ScriptStruct AIModule.AIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_VVIW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// ScriptStruct AIModule.BTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_2431, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// ScriptStruct AIModule.BehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_FH7G, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// ScriptStruct AIModule.BlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_XRA6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// ScriptStruct AIModule.BTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// ScriptStruct AIModule.BlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_XB75, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_3259, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// ScriptStruct AIModule.AIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_8T91, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// ScriptStruct AIModule.AIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_QQDW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// ScriptStruct AIModule.AIDataProviderFloatValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_0ZEJ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// ScriptStruct AIModule.AIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_V4A2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// ScriptStruct AIModule.EQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_78PE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_53BA, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// ScriptStruct AIModule.IntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_226N, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// ScriptStruct AIModule.EnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_RE9Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// ScriptStruct AIModule.CrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// ScriptStruct AIModule.CrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// ScriptStruct AIModule.AIDataProviderBoolValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_H7FY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// ScriptStruct AIModule.EnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_HPZ2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_6KJ8, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// ScriptStruct AIModule.AIDataProviderIntValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_ZEXA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// ScriptStruct AIModule.EnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_WN57, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// ScriptStruct AIModule.EnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_LQJP, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// ScriptStruct AIModule.EnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_CBGZ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_ENG6, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// ScriptStruct AIModule.PawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// ScriptStruct AIModule.PawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_6K12, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// ScriptStruct AIModule.AIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_Y8LN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_4IDN, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// ScriptStruct AIModule.ActorPerceptionUpdateInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionUpdateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, TargetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Target, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Stimulus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionUpdateInfo, 0x0048);
		}

		// ScriptStruct AIModule.AIDataProviderStructValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_1IH2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// ScriptStruct AIModule.ActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_I72K, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// ScriptStruct AIModule.AISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_65R4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// ScriptStruct AIModule.EnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_Z7J5, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// ScriptStruct AIModule.EnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_9L5H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_7WLX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_FO3K, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// ScriptStruct AIModule.GenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// ScriptStruct CoreUObject.JoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// ScriptStruct CoreUObject.UniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_RT5I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// ScriptStruct CoreUObject.Guid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// ScriptStruct CoreUObject.Rotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// ScriptStruct CoreUObject.Vector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Vector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// ScriptStruct CoreUObject.Vector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// ScriptStruct CoreUObject.TwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// ScriptStruct CoreUObject.Plane
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// ScriptStruct CoreUObject.Quat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// ScriptStruct CoreUObject.PackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// ScriptStruct CoreUObject.PackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// ScriptStruct CoreUObject.PackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// ScriptStruct CoreUObject.IntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// ScriptStruct CoreUObject.IntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Color
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// ScriptStruct CoreUObject.LinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// ScriptStruct CoreUObject.Box
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_5YTS, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// ScriptStruct CoreUObject.Box2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_QYH9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// ScriptStruct CoreUObject.BoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// ScriptStruct CoreUObject.OrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// ScriptStruct CoreUObject.Matrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// ScriptStruct CoreUObject.InterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_2PIK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// ScriptStruct CoreUObject.InterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_XZRG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_4YBF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// ScriptStruct CoreUObject.InterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_Q1K3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_KCJB, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// ScriptStruct CoreUObject.InterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_KLMJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_NALY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_6SU2, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// ScriptStruct CoreUObject.InterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_L0BI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_OQW5, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// ScriptStruct CoreUObject.InterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_9CLS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// ScriptStruct CoreUObject.InterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_3E08, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// ScriptStruct CoreUObject.InterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_DQRX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// ScriptStruct CoreUObject.Transform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_2D88, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_J24W, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// ScriptStruct CoreUObject.RandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// ScriptStruct CoreUObject.DateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_VF6V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// ScriptStruct CoreUObject.FrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// ScriptStruct CoreUObject.FrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// ScriptStruct CoreUObject.FrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// ScriptStruct CoreUObject.QualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// ScriptStruct CoreUObject.Timecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_0DE6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// ScriptStruct CoreUObject.Timespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_0UPI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// ScriptStruct CoreUObject.SoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// ScriptStruct CoreUObject.SoftClassPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// ScriptStruct CoreUObject.PrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// ScriptStruct CoreUObject.PrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// ScriptStruct CoreUObject.FallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_ON9A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// ScriptStruct CoreUObject.FloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_6GV7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.FloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// ScriptStruct CoreUObject.Int32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_NN8X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.Int32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// ScriptStruct CoreUObject.FrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_RYDS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.FrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// ScriptStruct CoreUObject.FloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// ScriptStruct CoreUObject.Int32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// ScriptStruct CoreUObject.PolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_LZZL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_BSUW, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// ScriptStruct CoreUObject.AutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_9ARA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// ScriptStruct CoreUObject.AutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_X8JN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// ScriptStruct CoreUObject.ARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_Q0J6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_QP80, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// ScriptStruct CoreUObject.AssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// ScriptStruct CoreUObject.AssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// ScriptStruct CoreUObject.AssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_BCOS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// ScriptStruct Landscape.LandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_ASNM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_J49C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// ScriptStruct Landscape.WeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_H6TW, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// ScriptStruct Landscape.GrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_DNCN, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_7U1D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_HY48, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// ScriptStruct Landscape.LandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// ScriptStruct Landscape.LandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_T1OG, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// ScriptStruct Landscape.LandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_KIKX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// ScriptStruct Landscape.GrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_0UPX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// ScriptStruct Landscape.LayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_GDE9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_Q4CW, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_0CDG, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// ScriptStruct Landscape.PhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_WEIU, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// ScriptStruct Landscape.LandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_QIKM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_YBI2, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_UKAP, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// ScriptStruct Landscape.HeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// ScriptStruct Landscape.WeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// ScriptStruct Landscape.LandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// ScriptStruct Landscape.LandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// ScriptStruct Landscape.GizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_00CO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// ScriptStruct Landscape.LandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// ScriptStruct Landscape.LandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_YAYP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// ScriptStruct Landscape.LandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_UDPF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// ScriptStruct Landscape.ForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_MQHY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// ScriptStruct Landscape.ForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_BZZP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// ScriptStruct Landscape.ForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_8L9I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// ScriptStruct Landscape.LandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_EJNF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_GUH7, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_8I1C, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// ScriptStruct MediaAssets.MediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// ScriptStruct MediaAssets.MediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// ScriptStruct LocationServicesBPLibrary.LocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_F6Z2, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_TDNL, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_2J3W, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_DGZJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_AimOffsetLookAt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_5LJW, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_JG6K, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_PZLK, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_35X9, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_RJTK, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.RotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_5FNX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_X9TA, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_0R3W, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_1EFO, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_ENAQ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_0K0C, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_L0LC, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_BMO8, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_269V, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_U8P9, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_JF2X, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_QX38, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_F9BL, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// ScriptStruct AnimGraphRuntime.AngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ApplyLimits
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// ScriptStruct AnimGraphRuntime.BlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_U02N, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendBoneByChannel
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_DB1S, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_R4DT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_XGZ7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_ZQ7X, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_KAUH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_UAU8, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_TQ5C, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_1XCX, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_QK1R, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_81JW, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// ScriptStruct AnimGraphRuntime.SocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_GDJA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_JBWR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.BoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_2AZU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_9P9O, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CCDIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_CF6B, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_IXFB, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// ScriptStruct AnimGraphRuntime.Constraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_IO8G, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Constraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_2OHB, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_WZ2M, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyBoneDelta
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_RISP, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_20BM, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_CurveSource
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_7H36, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_BP7O, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_EBZM, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_MAGE, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_6I3A, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_6WU4, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_O9DO, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// ScriptStruct AnimGraphRuntime.AnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LegIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_K53Z, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// ScriptStruct AnimGraphRuntime.AnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_XW63, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.IKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_URVV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// ScriptStruct AnimGraphRuntime.IKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_B81Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_LookAt
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_TV7M, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_HHL8, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_V54D, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MakeDynamicAdditive
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_16LE, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_68S3, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ModifyCurve
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_9TNV, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_E866, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MultiWayBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_H99M, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_EXSG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_DVS1, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_8R2E, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseBlendNode
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_V932, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseByName
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_1WBV, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// ScriptStruct AnimGraphRuntime.PoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.PoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_9L3O, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_VKCV, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_WM5G, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// ScriptStruct AnimGraphRuntime.RBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_XVFK, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_2C9R, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseDriver
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_XVLB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_19U7, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_DYUT, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_PoseSnapshot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_1CA0, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_JX7P, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_AR6I, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_8ELB, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RefPose
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_DH7I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ResetRoot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_XPT8, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// ScriptStruct AnimGraphRuntime.SimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RigidBody
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_XHT7, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_501S, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_JDP6, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_BGV6, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_5C0S, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_DFST, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_6ZE2, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_VW6F, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_ScaleChainLength
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_KMY4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_4M7C, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_9IUG, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_0FDK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Slot
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_VI94, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SplineIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_QIPS, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_IW7N, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_MX60, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// ScriptStruct AnimGraphRuntime.SplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_4V49, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_DYYO, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_StateResult
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// ScriptStruct AnimGraphRuntime.RotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_Trail
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_VST3, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_T8CM, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_P4LR, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// ScriptStruct AnimGraphRuntime.ReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwistCorrectiveNode
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_YBUS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_PQM4, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_ZU53, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_VKO3, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// ScriptStruct AnimGraphRuntime.AnimNode_TwoWayBlend
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_3KU6, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_DHPV, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// ScriptStruct AnimGraphRuntime.AnimSequencerInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_17T8, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// ScriptStruct AnimGraphRuntime.PositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_FBGW, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// ScriptStruct AnimGraphRuntime.RBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// ScriptStruct AnimGraphRuntime.RBFTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_1AJ8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_KDQY, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_AVYO, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// ScriptStruct ProceduralMeshComponent.ProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_XDEH, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// ScriptStruct SessionMessages.SessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_MOXB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_DO7B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_TOQS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// ScriptStruct SessionMessages.SessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_HELV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_N78T, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// ScriptStruct SessionMessages.SessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// ScriptStruct LevelSequence.LevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_WYN4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// ScriptStruct LevelSequence.LevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// ScriptStruct LevelSequence.LevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_1DIM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// ScriptStruct LevelSequence.LevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// ScriptStruct LevelSequence.LevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_JSEG, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// ScriptStruct LevelSequence.LevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_3PV6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// ScriptStruct LevelSequence.LevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_CEUS, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_6ZH2, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// ScriptStruct LevelSequence.BoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_MBUH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// ScriptStruct LevelSequence.LevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_8AHS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// ScriptStruct PhysicsCore.BodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_7I6X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_6P2I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// ScriptStruct PropertyAccess.PropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_T5O6, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// ScriptStruct PropertyAccess.PropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_0YVX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// ScriptStruct PropertyAccess.PropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_J2ML, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// ScriptStruct PropertyAccess.PropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// ScriptStruct PropertyAccess.PropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_SWVU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// ScriptStruct PropertyAccess.PropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_GPT9, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// ScriptStruct PropertyAccess.PropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_M4A2, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// ScriptStruct PropertyPath.PropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_3SYN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_Q05R, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// ScriptStruct PropertyPath.CachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_3EP2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_NCFG, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// ScriptStruct NiagaraCore.NiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// ScriptStruct VariantManagerContent.CapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_HGUM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// ScriptStruct VariantManagerContent.VariantDependency
		TEST_METHOD(ScriptStruct__VariantManagerContent__VariantDependency)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, VariantSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, Variant, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, bEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, UnknownData_UTIT, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariantDependency, 0x0058);
		}

		// ScriptStruct VariantManagerContent.FunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// ScriptStruct AudioMixer.SubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_DORZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// ScriptStruct AudioMixer.SubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_OM1R, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_9TKU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_9B47, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// ScriptStruct AudioMixer.SubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_847F, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// ScriptStruct AudioMixer.SubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// ScriptStruct AudioMixer.SubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_S749, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_ZFX4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_JXZ0, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// ScriptStruct HeadMountedDisplay.XRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_EQ2Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_QG76, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_AVSE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_XT5H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_2MO9, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// ScriptStruct HeadMountedDisplay.XRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_040R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_429R, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_6XOC, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// ScriptStruct HeadMountedDisplay.XRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// ScriptStruct HeadMountedDisplay.XRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// ScriptStruct AppleImageUtils.AppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// ScriptStruct AnimationSharing.AnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_BSRY, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// ScriptStruct AnimationSharing.AnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_ZIUZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_INMT, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_LPYJ, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_VT5B, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// ScriptStruct AnimationSharing.PerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// ScriptStruct AnimationSharing.AnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_XSM2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// ScriptStruct AnimationSharing.TickAnimationSharingFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_2YHP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// ScriptStruct InputCore.Key
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_VHBG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// ScriptStruct MaterialShaderQualitySettings.MaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// ScriptStruct FMODStudio.FMODAttenuationDetails
		TEST_METHOD(ScriptStruct__FMODStudio__FMODAttenuationDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAttenuationDetails, UnknownData_Z6YX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAttenuationDetails, MinimumDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAttenuationDetails, MaximumDistance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODAttenuationDetails, 0x000C);
		}

		// ScriptStruct FMODStudio.FMODOcclusionDetails
		TEST_METHOD(ScriptStruct__FMODStudio__FMODOcclusionDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODOcclusionDetails, bEnableOcclusion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODOcclusionDetails, OcclusionTraceChannel, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODOcclusionDetails, bUseComplexCollisionForOcclusion, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODOcclusionDetails, 0x0003);
		}

		// ScriptStruct FMODStudio.FMODEventControlChannel
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventControlChannel)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventControlChannel, 0x0098);
		}

		// ScriptStruct FMODStudio.FMODProjectLocale
		TEST_METHOD(ScriptStruct__FMODStudio__FMODProjectLocale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODProjectLocale, LocaleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODProjectLocale, LocaleCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODProjectLocale, bDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODProjectLocale, UnknownData_3CUU, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODProjectLocale, 0x0028);
		}

		// ScriptStruct FMODStudio.CustomPoolSizes
		TEST_METHOD(ScriptStruct__FMODStudio__CustomPoolSizes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, Desktop, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, Mobile, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, PS4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, Switch, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, XboxOne, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPoolSizes, 0x0014);
		}

		// ScriptStruct FMODStudio.FMODAssetLookupRow
		TEST_METHOD(ScriptStruct__FMODStudio__FMODAssetLookupRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAssetLookupRow, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAssetLookupRow, AssetName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODAssetLookupRow, 0x0028);
		}

		// ScriptStruct FMODStudio.FMODLocalizedBankTable
		TEST_METHOD(ScriptStruct__FMODStudio__FMODLocalizedBankTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODLocalizedBankTable, Banks, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODLocalizedBankTable, 0x0010);
		}

		// ScriptStruct FMODStudio.FMODLocalizedBankRow
		TEST_METHOD(ScriptStruct__FMODStudio__FMODLocalizedBankRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODLocalizedBankRow, Path, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODLocalizedBankRow, 0x0018);
		}

		// ScriptStruct FMODStudio.FMODEventInstance
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODEventInstance, UnknownData_WONY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventInstance, 0x0008);
		}

		// ScriptStruct FMODStudio.FMODEventControlSectionTemplate
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventControlSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODEventControlSectionTemplate, ControlKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventControlSectionTemplate, 0x00B8);
		}

		// ScriptStruct FMODStudio.FMODEventParameterSectionTemplate
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventParameterSectionTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventParameterSectionTemplate, 0x0080);
		}

		// ScriptStruct AssetRegistry.TagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// ScriptStruct AssetRegistry.AssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// ScriptStruct Bounty.FavoredPocket
		TEST_METHOD(ScriptStruct__Bounty__FavoredPocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoredPocket, Pocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoredPocket, Affinity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoredPocket, UnknownData_QKOY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFavoredPocket, 0x0018);
		}

		// ScriptStruct Bounty.AIBehaviorSettings
		TEST_METHOD(ScriptStruct__Bounty__AIBehaviorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, PositionFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, EvalLooseness, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, Aggressiveness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, BetLooseness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, ShortStackLooseness, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, StyleFlexibility, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, TrackingSkill, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, PairAffinity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, SuitedAffinity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, ConnectorAffinity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, FaceAffinity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, MixTendency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, CheckRaiseTendency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, TieIsWin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, ShowPreaction, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, UnknownData_ZDV2, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, MinActionTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, MaxActionTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, FavoredPockets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, Difficulty, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIBehaviorSettings, UnknownData_90PC, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIBehaviorSettings, 0x0068);
		}

		// ScriptStruct Bounty.ScriptedAction
		TEST_METHOD(ScriptStruct__Bounty__ScriptedAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedAction, action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedAction, UnknownData_6SQK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedAction, chips, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedAction, Delay, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScriptedAction, 0x000C);
		}

		// ScriptStruct Bounty.ScriptedBehavior
		TEST_METHOD(ScriptStruct__Bounty__ScriptedBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedBehavior, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedBehavior, Actions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScriptedBehavior, 0x0020);
		}

		// ScriptStruct Bounty.ScriptedFueAction
		TEST_METHOD(ScriptStruct__Bounty__ScriptedFueAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedFueAction, ScriptedAction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedFueAction, CorrespondingFueState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedFueAction, UnknownData_OVYT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScriptedFueAction, 0x0010);
		}

		// ScriptStruct Bounty.RefAndObj
		TEST_METHOD(ScriptStruct__Bounty__RefAndObj)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRefAndObj, Ref, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRefAndObj, Obj, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRefAndObj, 0x0020);
		}

		// ScriptStruct Bounty.TexsToLoad
		TEST_METHOD(ScriptStruct__Bounty__TexsToLoad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexsToLoad, Channels, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexsToLoad, 0x0080);
		}

		// ScriptStruct Bounty.AnimVariants
		TEST_METHOD(ScriptStruct__Bounty__AnimVariants)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimVariants, List, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimVariants, 0x0010);
		}

		// ScriptStruct Bounty.AnimCollection
		TEST_METHOD(ScriptStruct__Bounty__AnimCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCollection, Actions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCollection, PreactionHover, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCollection, LockedIns, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCollection, VOs, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCollection, 0x06F0);
		}

		// ScriptStruct Bounty.MeshAndTextures
		TEST_METHOD(ScriptStruct__Bounty__MeshAndTextures)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshAndTextures, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshAndTextures, Textures, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshAndTextures, Thumbnails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshAndTextures, 0x0038);
		}

		// ScriptStruct Bounty.DiffuseAndNormal
		TEST_METHOD(ScriptStruct__Bounty__DiffuseAndNormal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiffuseAndNormal, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiffuseAndNormal, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiffuseAndNormal, Thumbnail, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDiffuseAndNormal, 0x0048);
		}

		// ScriptStruct Bounty.TexAndThumb
		TEST_METHOD(ScriptStruct__Bounty__TexAndThumb)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexAndThumb, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexAndThumb, Thumbnail, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexAndThumb, 0x0030);
		}

		// ScriptStruct Bounty.SkinTextures
		TEST_METHOD(ScriptStruct__Bounty__SkinTextures)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, Skins, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, SkinNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, SkinRoughs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, Eyebrows, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, LeftTattoos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, RightTattoos, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, BodyTattoos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinTextures, Makeup, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinTextures, 0x0080);
		}

		// ScriptStruct Bounty.MorphTargetPiercingOffset
		TEST_METHOD(ScriptStruct__Bounty__MorphTargetPiercingOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphTargetPiercingOffset, MorphName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphTargetPiercingOffset, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphTargetPiercingOffset, Rotation, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMorphTargetPiercingOffset, 0x0020);
		}

		// ScriptStruct Bounty.IntAndThumb
		TEST_METHOD(ScriptStruct__Bounty__IntAndThumb)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntAndThumb, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntAndThumb, UnknownData_KO84, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntAndThumb, Thumbnail, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntAndThumb, 0x0020);
		}

		// ScriptStruct Bounty.MakeupTattooScalar
		TEST_METHOD(ScriptStruct__Bounty__MakeupTattooScalar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMakeupTattooScalar, SkinTex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMakeupTattooScalar, Scalar, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMakeupTattooScalar, UnknownData_GKXS, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMakeupTattooScalar, 0x0020);
		}

		// ScriptStruct Bounty.AvatarAssets
		TEST_METHOD(ScriptStruct__Bounty__AvatarAssets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, BaseList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, CollarList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, HairList, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, FacialHairList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, OutfitsList, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, NecklacesList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, GlassesList, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, HeadwearList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, PiercingsLList, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, PiercingsRList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, HandsLList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, HandsRList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, WristsLList, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, WristsRList, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, UnknownData_5S0G, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, SkinTextures, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, MorphTargetPiercingOffsets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, AgeThumbnails, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, WeightThumbnails, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, ShavedHeadThumbnails, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, MakeupTattooScalars, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, BaldThumbnail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarAssets, GenderThumbnail, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarAssets, 0x0250);
		}

		// ScriptStruct Bounty.HairColors
		TEST_METHOD(ScriptStruct__Bounty__HairColors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, Root, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, Body, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, Tip, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, UnknownData_LEOA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, Thumbnail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColors, DisplayName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairColors, 0x0038);
		}

		// ScriptStruct Bounty.EyeColor
		TEST_METHOD(ScriptStruct__Bounty__EyeColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeColor, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeColor, UnknownData_T0HZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeColor, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeColor, Thumbnail, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeColor, 0x0030);
		}

		// ScriptStruct Bounty.GenderAssetBinding
		TEST_METHOD(ScriptStruct__Bounty__GenderAssetBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderAssetBinding, Male, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderAssetBinding, Female, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenderAssetBinding, 0x0030);
		}

		// ScriptStruct Bounty.AvatarSpawnProbability
		TEST_METHOD(ScriptStruct__Bounty__AvatarSpawnProbability)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarSpawnProbability, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarSpawnProbability, Probability, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarSpawnProbability, UnknownData_2J23, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarSpawnProbability, 0x0018);
		}

		// ScriptStruct Bounty.AttachItem
		TEST_METHOD(ScriptStruct__Bounty__AttachItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachItem, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachItem, SocketName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachItem, 0x0020);
		}

		// ScriptStruct Bounty.ChallengeData
		TEST_METHOD(ScriptStruct__Bounty__ChallengeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, Progress, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, TargetIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, ExpirationDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, UnknownData_RPBS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, Title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, TargetValues, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, Rewards, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, type, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, RewardType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeData, UnknownData_3ELG, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChallengeData, 0x00A0);
		}

		// ScriptStruct Bounty.StatData
		TEST_METHOD(ScriptStruct__Bounty__StatData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, UnknownData_OV1K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, Amount, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatData, 0x0048);
		}

		// ScriptStruct Bounty.LootcaseData
		TEST_METHOD(ScriptStruct__Bounty__LootcaseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, LootCaseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, LootCaseTexture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, LootCaseRarity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, WasUpgraded, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, UnknownData_PWHX, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, UpgradedFromLootCaseName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, UpgradedFromLootCaseTexture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, UpgradedFromLootCaseRarity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootcaseData, UnknownData_VYLR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootcaseData, 0x0050);
		}

		// ScriptStruct Bounty.NotificationSetup
		TEST_METHOD(ScriptStruct__Bounty__NotificationSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, Body, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, UseFormatting, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, UnknownData_G64I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, Style, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, UnknownData_E52K, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationSetup, LootcaseData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNotificationSetup, 0x0090);
		}

		// ScriptStruct Bounty.OptionsSaveData
		TEST_METHOD(ScriptStruct__Bounty__OptionsSaveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, AudioTypeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, UnknownData_8IU9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, AudioType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, DefaultBuyIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, DefaultBuyinIndex, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, ChatVolumeLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, MusicVolumeLevel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, EffectsVolumeLevel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, VOVolumeLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, UIVolumeLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, MasterVolumeLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, VolumeLevelsMuted, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, RumbleOn, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, TutorialsOn, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, FullScreen, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, CardFace, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionsSaveData, UnknownData_QNC9, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionsSaveData, 0x0040);
		}

		// ScriptStruct Bounty.SeatTargets
		TEST_METHOD(ScriptStruct__Bounty__SeatTargets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, AvatarTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ActionIcon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, Nameplate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, RadialMenu, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, BetSpawn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, CardsSpawn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, CenterSpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ChipstackSpawn, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ComCardSpawns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, DeckSpawn, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, BurnPileSpawn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ItemSpawn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, DealerButtonSpawn, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ChairSpawn, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ChairOutSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, BetTarget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, CardsTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, CenterTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, CheckTarget, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ChipstackTarget, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, DeckTarget, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, BurnPileTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatTargets, ItemTarget, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeatTargets, 0x00C0);
		}

		// ScriptStruct Bounty.TableTargets
		TEST_METHOD(ScriptStruct__Bounty__TableTargets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, TargetsBySeat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, DealerTargets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, PotTargets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, TableRefillCalloutTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, IsDealerPresent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableTargets, UnknownData_DWWR, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableTargets, 0x00F0);
		}

		// ScriptStruct Bounty.ToastSetup
		TEST_METHOD(ScriptStruct__Bounty__ToastSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, ToastType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, UnknownData_Y7FW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, ChallengeGoal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, ChallengeProgress, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, UnknownData_0RWW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, ChallengeTitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, ChallengeType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, UnknownData_QVJQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, Reward, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, RewardType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastSetup, UnknownData_LSC2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToastSetup, 0x0038);
		}

		// ScriptStruct Bounty.NpcSeat
		TEST_METHOD(ScriptStruct__Bounty__NpcSeat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcSeat, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcSeat, seat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcSeat, UnknownData_1TT6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNpcSeat, 0x0018);
		}

		// ScriptStruct Bounty.CareerGameRankSettings
		TEST_METHOD(ScriptStruct__Bounty__CareerGameRankSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameRankSettings, NpcSeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameRankSettings, BuyIn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameRankSettings, BossChips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCareerGameRankSettings, 0x0018);
		}

		// ScriptStruct Bounty.CareerGameSettings
		TEST_METHOD(ScriptStruct__Bounty__CareerGameSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, venue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, affiliation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, UnknownData_GRMJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, PlayerSeat, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, WinProgressResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, UnknownData_A50P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, RankSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, TurnLimit, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, H2H, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerGameSettings, UnknownData_WG1G, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCareerGameSettings, 0x0050);
		}

		// ScriptStruct Bounty.EmoteAnimation
		TEST_METHOD(ScriptStruct__Bounty__EmoteAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, UnknownData_AHBE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, Icon, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, Title, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, UnlockLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteAnimation, UnknownData_2QHS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmoteAnimation, 0x0040);
		}

		// ScriptStruct Bounty.FeaturedItemData
		TEST_METHOD(ScriptStruct__Bounty__FeaturedItemData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, BannerTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, BannerText, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, FeaturedItemStartDate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, FeaturedItemEndDate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, Thumbnail, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, Guid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, StoreCategory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedItemData, UnknownData_M2UY, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFeaturedItemData, 0x0088);
		}

		// ScriptStruct Bounty.FormattedTextIcon
		TEST_METHOD(ScriptStruct__Bounty__FormattedTextIcon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormattedTextIcon, IconString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormattedTextIcon, IconTexture, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormattedTextIcon, 0x0018);
		}

		// ScriptStruct Bounty.FueHoleCards
		TEST_METHOD(ScriptStruct__Bounty__FueHoleCards)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueHoleCards, seat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueHoleCards, Card0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueHoleCards, Card1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueHoleCards, UnknownData_BNNA, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFueHoleCards, 0x0008);
		}

		// ScriptStruct Bounty.FueDeal
		TEST_METHOD(ScriptStruct__Bounty__FueDeal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, ComCard0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, ComCard1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, ComCard2, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, ComCard3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, ComCard4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, UnknownData_4HOO, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueDeal, HoleCards, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFueDeal, 0x0018);
		}

		// ScriptStruct Bounty.FueNotification
		TEST_METHOD(ScriptStruct__Bounty__FueNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueNotification, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueNotification, ReuseActiveNotification, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueNotification, UnknownData_CRGN, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueNotification, Setup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFueNotification, ControllerSetup, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFueNotification, 0x0128);
		}

		// ScriptStruct Bounty.StateTimer
		TEST_METHOD(ScriptStruct__Bounty__StateTimer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateTimer, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateTimer, UnknownData_CEFO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateTimer, TimeBeforeNextState, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateTimer, 0x0008);
		}

		// ScriptStruct Bounty.UiGlow
		TEST_METHOD(ScriptStruct__Bounty__UiGlow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUiGlow, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUiGlow, Glow, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUiGlow, 0x0002);
		}

		// ScriptStruct Bounty.ForcedHudState
		TEST_METHOD(ScriptStruct__Bounty__ForcedHudState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForcedHudState, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForcedHudState, HudStateToForce, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForcedHudState, 0x0002);
		}

		// ScriptStruct Bounty.VOLine
		TEST_METHOD(ScriptStruct__Bounty__VOLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, UnknownData_6GAM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, FMODEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, DelayBeforeMaleVo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, DelayBeforeFemaleVo, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, LineDurationMale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOLine, LineDurationFemale, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOLine, 0x0020);
		}

		// ScriptStruct Bounty.Closeup
		TEST_METHOD(ScriptStruct__Bounty__Closeup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseup, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseup, CloseupType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloseup, LocalPlayer, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloseup, 0x0003);
		}

		// ScriptStruct Bounty.ScriptedEmote
		TEST_METHOD(ScriptStruct__Bounty__ScriptedEmote)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedEmote, CorrespondingFueState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedEmote, LocalPlayer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedEmote, ForceEmote, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedEmote, UnknownData_6VH4, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScriptedEmote, EmoteFileName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScriptedEmote, 0x0018);
		}

		// ScriptStruct Bounty.VOFirstReveal
		TEST_METHOD(ScriptStruct__Bounty__VOFirstReveal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedBoth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedBothDurationMale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedBothDurationFemale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedLeftOnly, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedLeftOnlyDurationMale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedLeftOnlyDurationFemale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedRightOnly, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedRightOnlyDurationMale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedRightOnlyDurationFemale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedNiether, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedNietherDurationMale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOFirstReveal, RevealedNietherDurationFemale, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOFirstReveal, 0x0040);
		}

		// ScriptStruct Bounty.VOBranchingGroups
		TEST_METHOD(ScriptStruct__Bounty__VOBranchingGroups)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOBranchingGroups, FirstRevealVoLines, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOBranchingGroups, 0x0040);
		}

		// ScriptStruct Bounty.Thumbnail
		TEST_METHOD(ScriptStruct__Bounty__Thumbnail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FThumbnail, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThumbnail, TexturePath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThumbnail, 0x0020);
		}

		// ScriptStruct Bounty.RewardItem
		TEST_METHOD(ScriptStruct__Bounty__RewardItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, IsText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, UnknownData_FPVT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, SubType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, Rarity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, UnknownData_CFBJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, Thumbnail, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, Cost, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, UnlockLevel, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, Gender, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItem, UnknownData_RWKM, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRewardItem, 0x0070);
		}

		// ScriptStruct Bounty.LeaderboardUserData
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardUserData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardUserData, UnknownData_7W8H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardUserData, PlatformID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardUserData, RankText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardUserData, UserName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardUserData, Value, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardUserData, 0x0070);
		}

		// ScriptStruct Bounty.LeaderboardComparisonData
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardComparisonData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, LeaderboardData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, affiliation, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, UnknownData_G8HB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, AffiliationRank, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, OverallLevel, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, LeaderboardTitle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, ChipsPerDay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, ChipsLifetime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, ChipsDailyCut, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, GamesPlayed, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, Knockouts, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, LargestPot, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, BubblePercentage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedHeadToHeadWins, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedHeadToHeadPlayed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedHeadToHeadLastSeasonRating, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedTournamentWins, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedTournamentPlayed, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardComparisonData, RankedTournamentLastSeasonRating, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardComparisonData, 0x01F8);
		}

		// ScriptStruct Bounty.BuyInData
		TEST_METHOD(ScriptStruct__Bounty__BuyInData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, UnlockType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, UnknownData_ZY0S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, RequiredLevelOrRank, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, GameType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, UnknownData_A45G, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, CurrentPlayerCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, Popularity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyInData, UnknownData_BAXP, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuyInData, 0x0040);
		}

		// ScriptStruct Bounty.LootCaseRewardData
		TEST_METHOD(ScriptStruct__Bounty__LootCaseRewardData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, UnknownData_3GPU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, ItemName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, ItemTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, Rarity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, IsDuplicate, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, IsChips, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, UnknownData_53GT, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCaseRewardData, ChipsRecieved, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootCaseRewardData, 0x0070);
		}

		// ScriptStruct Bounty.PopupSetup
		TEST_METHOD(ScriptStruct__Bounty__PopupSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, text, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, Priority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, UnknownData_UG4G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, Buttons, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, ProjectData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopupSetup, UnknownData_7FJO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPopupSetup, 0x0060);
		}

		// ScriptStruct Bounty.NpcVoFrequencies
		TEST_METHOD(ScriptStruct__Bounty__NpcVoFrequencies)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, RndIdle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Taunt, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Thinking, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Bet, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Raise, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Check, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Call, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, AllIn, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Fold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, BetReact, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, RaiseReact, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, CheckReact, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, AllInReact, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, FoldReact, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Win, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcVoFrequencies, Lose, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNpcVoFrequencies, 0x0010);
		}

		// ScriptStruct Bounty.PredefinedNpc
		TEST_METHOD(ScriptStruct__Bounty__PredefinedNpc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, Nickname, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, Category, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, AI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, VOGroup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, affiliation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, UnknownData_K42K, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, Rank, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, VoFrequencies, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, AvatarDefinition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, ItemFixed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, ItemMovable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, ItemClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredefinedNpc, UnknownData_ZZ4V, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredefinedNpc, 0x00B8);
		}

		// ScriptStruct Bounty.RndNpcMeshAndTextures
		TEST_METHOD(ScriptStruct__Bounty__RndNpcMeshAndTextures)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcMeshAndTextures, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcMeshAndTextures, Probability, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcMeshAndTextures, UnknownData_4LKX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcMeshAndTextures, Textures, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRndNpcMeshAndTextures, 0x0030);
		}

		// ScriptStruct Bounty.RndNpcAssetsList
		TEST_METHOD(ScriptStruct__Bounty__RndNpcAssetsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAssetsList, IncludeAllOtherAssets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAssetsList, ExcludeAssetsInList, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAssetsList, UnknownData_3MHE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAssetsList, Assets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRndNpcAssetsList, 0x0018);
		}

		// ScriptStruct Bounty.RndNpcGenderAssets
		TEST_METHOD(ScriptStruct__Bounty__RndNpcGenderAssets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, UnknownData_PSPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, HairList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, FacialHairList, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, OutfitsList, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, NecklacesList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, GlassesList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, HeadwearList, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, PiercingsLList, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, PiercingsRList, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, HandsLList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, HandsRList, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, WristsLList, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, WristsRList, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, Skin, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, TattooLeftArm, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, TattooRightArm, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, TattooBody, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcGenderAssets, Eyebrows, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRndNpcGenderAssets, 0x01A0);
		}

		// ScriptStruct Bounty.RndNpcAgeProbability
		TEST_METHOD(ScriptStruct__Bounty__RndNpcAgeProbability)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAgeProbability, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAgeProbability, Probability, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpcAgeProbability, UnknownData_1Z9S, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRndNpcAgeProbability, 0x0008);
		}

		// ScriptStruct Bounty.RndNpc
		TEST_METHOD(ScriptStruct__Bounty__RndNpc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, affiliation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, UnknownData_4QNW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, MaleAssets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, FemaleAssets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, AgeDistribution, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, Makeup, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, HairColorIds, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, UseFixedWeight, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, UnknownData_KDCN, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRndNpc, FixedWeight, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRndNpc, 0x03A8);
		}

		// ScriptStruct Bounty.NpcDistribution
		TEST_METHOD(ScriptStruct__Bounty__NpcDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcDistribution, PredefinedNotRandom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcDistribution, affiliation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcDistribution, UnknownData_TKRS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNpcDistribution, Percent, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNpcDistribution, 0x0008);
		}

		// ScriptStruct Bounty.VenueNpcDistribution
		TEST_METHOD(ScriptStruct__Bounty__VenueNpcDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVenueNpcDistribution, venue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVenueNpcDistribution, UnknownData_RNR0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVenueNpcDistribution, Distributions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVenueNpcDistribution, 0x0018);
		}

		// ScriptStruct Bounty.RandomNames
		TEST_METHOD(ScriptStruct__Bounty__RandomNames)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomNames, MaleNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomNames, FemaleNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomNames, LastNames, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomNames, 0x0030);
		}

		// ScriptStruct Bounty.AffiliationReward
		TEST_METHOD(ScriptStruct__Bounty__AffiliationReward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Level, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, RewardType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, UnknownData_SSD1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, RewardCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Amount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Rarity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Thumbnail, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, Gender, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffiliationReward, UnknownData_22XL, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffiliationReward, 0x0068);
		}

		// ScriptStruct Bounty.LeaderboardReward
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardReward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, UnknownData_2OD6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, AwardType, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, UnknownData_ZL3W, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, ItemTitle, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, Thumbnail, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, ItemName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, Rarity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardReward, UnknownData_51PU, 0x01FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardReward, 0x0200);
		}

		// ScriptStruct Bounty.RewardNotification
		TEST_METHOD(ScriptStruct__Bounty__RewardNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardNotification, UnknownData_XKW2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardNotification, Reward, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRewardNotification, 0x0210);
		}

		// ScriptStruct Bounty.LineInfo
		TEST_METHOD(ScriptStruct__Bounty__LineInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineInfo, Line, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineInfo, Format, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineInfo, Images, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineInfo, Style, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLineInfo, UnknownData_83V5, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLineInfo, 0x0040);
		}

		// ScriptStruct Bounty.MeshAndTextureRef
		TEST_METHOD(ScriptStruct__Bounty__MeshAndTextureRef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshAndTextureRef, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshAndTextureRef, Texture, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshAndTextureRef, 0x0030);
		}

		// ScriptStruct Bounty.Settings_Avatar
		TEST_METHOD(ScriptStruct__Bounty__Settings_Avatar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, MorphDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ChatterPhonemeDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ShellAvatarRotationCatchUpMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ShellAvatarMouseRotationMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ShellAvatarFidgetChance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, UnknownData_ESB9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, PreviewTattoosMaleOutfit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, PreviewTattoosFemaleOutfit, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, UsePreviewTattoosOutfit, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, UnknownData_69ZR, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ActionIconOffsetWhileStanding, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, ChatIndicatorOffsetWhileStanding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Avatar, BgCharScaleTime, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_Avatar, 0x0098);
		}

		// ScriptStruct Bounty.Settings_AvatarAnim
		TEST_METHOD(ScriptStruct__Bounty__Settings_AvatarAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_AvatarAnim, DefaultBlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_AvatarAnim, DealBlendSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_AvatarAnim, ItemIdleChance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_AvatarAnim, IdleFidgitChance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_AvatarAnim, SpeedUp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_AvatarAnim, 0x0014);
		}

		// ScriptStruct Bounty.Settings_PickupMgr
		TEST_METHOD(ScriptStruct__Bounty__Settings_PickupMgr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, PreactionLerpSpeedFactor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, FoldDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, BetDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, BetToPotDuration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, PotToPlayerDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, CardsToDeckDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, HoverZOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, RevealSpacing, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, DealerButtonMoveDuration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, DeckMoveDuration, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, HorizontalVariance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, RotationalVariance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PickupMgr, CardStreamingDistMul, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_PickupMgr, 0x0034);
		}

		// ScriptStruct Bounty.Settings_DealMgr
		TEST_METHOD(ScriptStruct__Bounty__Settings_DealMgr)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, MinDealStraightAngle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, MaxDealStraightAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, DealCardDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, DealCardHorzVariance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, DealCardRotVariance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardHorzVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardRotVariance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardHorzVarianceForFixedDealer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardRotVarianceForFixedDealer, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, ComCardReactDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, CardStackingOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, HighCardDelay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_DealMgr, PostBlindsDelay, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_DealMgr, 0x0038);
		}

		// ScriptStruct Bounty.Settings_GenderSelectScreen
		TEST_METHOD(ScriptStruct__Bounty__Settings_GenderSelectScreen)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, HorizontalSpacing, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, ForwardSpacing, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, RotationSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, RotationDegrees, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, MaleScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, FemaleScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_GenderSelectScreen, AllowRotateAgainProximity, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_GenderSelectScreen, 0x002C);
		}

		// ScriptStruct Bounty.Settings_CardAtlas
		TEST_METHOD(ScriptStruct__Bounty__Settings_CardAtlas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_CardAtlas, UDistToNextCard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_CardAtlas, VDistToNextCard, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_CardAtlas, UndefinedCardRow, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_CardAtlas, UndefinedCardCol, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_CardAtlas, SuitOrder, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_CardAtlas, 0x0014);
		}

		// ScriptStruct Bounty.Settings_PotResults
		TEST_METHOD(ScriptStruct__Bounty__Settings_PotResults)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, PlayerRevealWait, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, ExtraPotMessageDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, MainPotWinnerCloseupDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, WinnerCloseUpDelay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, WinCloseupSound, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, NoCloseUpLoseAnimsDelay, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_PotResults, UnknownData_5CV3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_PotResults, 0x0020);
		}

		// ScriptStruct Bounty.Settings_BgAvatarPriorityLevel
		TEST_METHOD(ScriptStruct__Bounty__Settings_BgAvatarPriorityLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_BgAvatarPriorityLevel, Casino, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_BgAvatarPriorityLevel, Bar, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_BgAvatarPriorityLevel, Laundromat, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_BgAvatarPriorityLevel, Slaughterhouse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_BgAvatarPriorityLevel, Penthouse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_BgAvatarPriorityLevel, 0x0014);
		}

		// ScriptStruct Bounty.Settings_VideoQuality
		TEST_METHOD(ScriptStruct__Bounty__Settings_VideoQuality)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoQuality, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoQuality, Commands, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoQuality, ShouldCastShadow, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoQuality, BgAvatarPriorityLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoQuality, UnknownData_WDOT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_VideoQuality, 0x0050);
		}

		// ScriptStruct Bounty.Settings_VideoOptions
		TEST_METHOD(ScriptStruct__Bounty__Settings_VideoOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, AdaptPeroid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, LowFps, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, HighFps, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, UnknownData_V55P, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, QualitySettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, XBoxOneQuality, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, PS4Quality, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, AutoBgAvatarPriorityLevels, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VideoOptions, UnknownData_38Z6, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_VideoOptions, 0x00D8);
		}

		// ScriptStruct Bounty.Settings_ChatOptions
		TEST_METHOD(ScriptStruct__Bounty__Settings_ChatOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_ChatOptions, MouthSpeedScaler, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_ChatOptions, MouthVolumeScaler, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_ChatOptions, 0x0008);
		}

		// ScriptStruct Bounty.Settings_VenueOptions
		TEST_METHOD(ScriptStruct__Bounty__Settings_VenueOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VenueOptions, venue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VenueOptions, UnknownData_48SF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VenueOptions, Dealers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_VenueOptions, Players, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_VenueOptions, 0x0028);
		}

		// ScriptStruct Bounty.Settings_Venues
		TEST_METHOD(ScriptStruct__Bounty__Settings_Venues)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Venues, VenueOptions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_Venues, 0x0010);
		}

		// ScriptStruct Bounty.Settings_Cameras
		TEST_METHOD(ScriptStruct__Bounty__Settings_Cameras)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Cameras, OrbitSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Cameras, MouseOrbitSpeed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_Cameras, 0x0008);
		}

		// ScriptStruct Bounty.Settings_Loading
		TEST_METHOD(ScriptStruct__Bounty__Settings_Loading)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Loading, LevelPercent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Loading, XBoxOneLevelLoadTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Loading, PS4LevelLoadTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Loading, PCLevelLoadTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Loading, BgCharWaitBetweenLoads, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_Loading, 0x0014);
		}

		// ScriptStruct Bounty.Settings_FreezeFrame
		TEST_METHOD(ScriptStruct__Bounty__Settings_FreezeFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, CloseUpStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, CloseUpEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, IntroDelay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, UncontestedDelay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, WinnerDelay, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, AllInDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, BustedDelay, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, ResetDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_FreezeFrame, TimeDilation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_FreezeFrame, 0x0024);
		}

		// ScriptStruct Bounty.Settings_Misc
		TEST_METHOD(ScriptStruct__Bounty__Settings_Misc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, FreezeFrameBgOffsetSitting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, FreezeFrameBgOffsetStanding, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, SteamAchievementProgressDisplayFrequency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, UnknownData_UO3T, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, SteamAchievementProgressDisplayPercentages, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, NumAnimNotifyVoices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, PreActionDelayTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, EndOfRoundDelayBeforeClearingIcons, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, ItemSpinSpeed, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, ItemRotStickMul, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettings_Misc, ItemRotMouseMul, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettings_Misc, 0x0090);
		}

		// ScriptStruct Bounty.ShellAnimVariants
		TEST_METHOD(ScriptStruct__Bounty__ShellAnimVariants)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShellAnimVariants, List, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShellAnimVariants, 0x0010);
		}

		// ScriptStruct Bounty.ShellAnimCollection
		TEST_METHOD(ScriptStruct__Bounty__ShellAnimCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShellAnimCollection, Actions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShellAnimCollection, 0x0080);
		}

		// ScriptStruct Bounty.StoreItemData
		TEST_METHOD(ScriptStruct__Bounty__StoreItemData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_8Q1H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_241G, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Thumbnail, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Mesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Texture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_UTI5, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Featured, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Owned, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Equipped, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_1NX6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, PriceText, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, PercentOffText, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, OrigPriceText, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_E6BC, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, Rarity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, ItemAcquirementType, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, affiliation, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_FYYR, 0x01A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, AffiliationRank, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, AffiliationLevel, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemData, UnknownData_Q8PK, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreItemData, 0x01B8);
		}

		// ScriptStruct Bounty.SubtitleAnimation
		TEST_METHOD(ScriptStruct__Bounty__SubtitleAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleAnimation, AnimationName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleAnimation, SubtitleText, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleAnimation, 0x0028);
		}

		// ScriptStruct Bounty.ChipPercent
		TEST_METHOD(ScriptStruct__Bounty__ChipPercent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChipPercent, MeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChipPercent, Percent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChipPercent, UnknownData_K4RF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChipPercent, Mesh, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChipPercent, 0x0028);
		}

		// ScriptStruct Bounty.BetPercent
		TEST_METHOD(ScriptStruct__Bounty__BetPercent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBetPercent, MeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBetPercent, Percent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBetPercent, BetAnimation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBetPercent, UnknownData_37IQ, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBetPercent, Mesh, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBetPercent, 0x0028);
		}

		// ScriptStruct Bounty.CompletedLoad
		TEST_METHOD(ScriptStruct__Bounty__CompletedLoad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompletedLoad, UnknownData_Q4CH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompletedLoad, 0x0018);
		}

		// ScriptStruct Bounty.LoadRequest
		TEST_METHOD(ScriptStruct__Bounty__LoadRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadRequest, UnknownData_0J00, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadRequest, 0x0028);
		}

		// ScriptStruct Bounty.OrbitCamPresets
		TEST_METHOD(ScriptStruct__Bounty__OrbitCamPresets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitCamPresets, AzimuthAngle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitCamPresets, AltitudeAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitCamPresets, 0x0010);
		}

		// ScriptStruct Bounty.ShowdownArgs
		TEST_METHOD(ScriptStruct__Bounty__ShowdownArgs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, WinningHandType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedHoleCard0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedHoleCard1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedFlop0, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedFlop1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedFlop2, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedTurn, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShowdownArgs, UsedRiver, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShowdownArgs, 0x0008);
		}

		// ScriptStruct Bounty.PotResolveNotification
		TEST_METHOD(ScriptStruct__Bounty__PotResolveNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPotResolveNotification, WinningSeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPotResolveNotification, PotsWon, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPotResolveNotification, TotalAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPotResolveNotification, WinningHand, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPotResolveNotification, UnknownData_VUCB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPotResolveNotification, 0x0040);
		}

		// ScriptStruct Bounty.RankedTier
		TEST_METHOD(ScriptStruct__Bounty__RankedTier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankedTier, Tier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankedTier, UnknownData_MJ1Z, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankedTier, 0x0010);
		}

		// ScriptStruct Bounty.NicknameData
		TEST_METHOD(ScriptStruct__Bounty__NicknameData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNicknameData, UnknownData_BG0W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNicknameData, 0x0048);
		}

		// ScriptStruct Bounty.PrestigeItemData
		TEST_METHOD(ScriptStruct__Bounty__PrestigeItemData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeItemData, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeItemData, InternalName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeItemData, Cost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeItemData, UnknownData_65UQ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrestigeItemData, 0x0028);
		}

		// ScriptStruct Bounty.FeaturedEventData
		TEST_METHOD(ScriptStruct__Bounty__FeaturedEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedEventData, EventTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedEventData, EventStartDate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedEventData, EventEndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedEventData, EventProgress, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFeaturedEventData, UnknownData_3EMJ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFeaturedEventData, 0x0038);
		}

		// ScriptStruct Bounty.SeatCard
		TEST_METHOD(ScriptStruct__Bounty__SeatCard)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatCard, UnknownData_J3DU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeatCard, 0x0008);
		}

		// ScriptStruct Bounty.RepReward
		TEST_METHOD(ScriptStruct__Bounty__RepReward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, RewardValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, RewardDescription, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, OldLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, newLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, ResultingLevelProgress, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepReward, UnknownData_TQAX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepReward, 0x0040);
		}

		// ScriptStruct Bounty.RevealSequenceUiEvent
		TEST_METHOD(ScriptStruct__Bounty__RevealSequenceUiEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, EventType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, UnknownData_PT0L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, seat, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, Card0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, Card1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRevealSequenceUiEvent, UnknownData_EB3R, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRevealSequenceUiEvent, 0x000C);
		}

		// ScriptStruct Bounty.LeaderboardData
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, UnknownData_EFWI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardData, 0x0020);
		}

		// ScriptStruct Bounty.PopularityData
		TEST_METHOD(ScriptStruct__Bounty__PopularityData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPopularityData, UnknownData_ZYMV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPopularityData, 0x000C);
		}

		// ScriptStruct Bounty.NewsData
		TEST_METHOD(ScriptStruct__Bounty__NewsData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewsData, text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewsData, startTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewsData, EndTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewsData, 0x0028);
		}

		// ScriptStruct Bounty.LeaderboardRewardBatchValue
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardRewardBatchValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRewardBatchValue, UnknownData_YW1W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardRewardBatchValue, 0x0028);
		}

		// ScriptStruct Bounty.LeaderboardRewardBatchKey
		TEST_METHOD(ScriptStruct__Bounty__LeaderboardRewardBatchKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRewardBatchKey, UnknownData_C7SK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardRewardBatchKey, 0x0008);
		}

		// ScriptStruct Bounty.RankedTable
		TEST_METHOD(ScriptStruct__Bounty__RankedTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankedTable, UnknownData_HPF1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankedTable, 0x0030);
		}

		// ScriptStruct Bounty.RankedPlayer
		TEST_METHOD(ScriptStruct__Bounty__RankedPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankedPlayer, UnknownData_XVGW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankedPlayer, 0x0050);
		}

		// ScriptStruct Bounty.Sound
		TEST_METHOD(ScriptStruct__Bounty__Sound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSound, UnknownData_A64G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSound, 0x0010);
		}

		// ScriptStruct Bounty.FadingSound
		TEST_METHOD(ScriptStruct__Bounty__FadingSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFadingSound, UnknownData_0OS6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFadingSound, 0x0030);
		}

		// ScriptStruct Bounty.TableItem
		TEST_METHOD(ScriptStruct__Bounty__TableItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableItem, UnknownData_AU8F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableItem, 0x0038);
		}

		// ScriptStruct Bounty.CareerModeVenueProgress
		TEST_METHOD(ScriptStruct__Bounty__CareerModeVenueProgress)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCareerModeVenueProgress, UnknownData_YBF7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCareerModeVenueProgress, 0x0002);
		}

		// ScriptStruct Bounty.SeatCardsRevealed
		TEST_METHOD(ScriptStruct__Bounty__SeatCardsRevealed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatCardsRevealed, seat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatCardsRevealed, Card0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatCardsRevealed, Card1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatCardsRevealed, UnknownData_J8I0, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeatCardsRevealed, 0x0008);
		}

		// ScriptStruct Engine.TickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_CQ4K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_97OM, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_GREY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// ScriptStruct Engine.ActorTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_1X7B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// ScriptStruct Engine.RepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// ScriptStruct Engine.Vector_NetQuantize100
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// ScriptStruct Engine.RepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_27E2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// ScriptStruct Engine.ActorComponentTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_21P1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// ScriptStruct Engine.SimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// ScriptStruct Engine.UniqueNetIdRepl
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_HWPS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// ScriptStruct Engine.ChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_ZIEZ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// ScriptStruct Engine.LightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// ScriptStruct Engine.CustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// ScriptStruct Engine.CollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// ScriptStruct Engine.ResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_BSAE, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// ScriptStruct Engine.CollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// ScriptStruct Engine.WalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_VKHM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_H05V, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// ScriptStruct Engine.BodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_BA9B, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Y56X, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_R6EB, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_5S8R, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FZ3C, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_PHNB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_NRX2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_REK0, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// ScriptStruct Engine.VertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, Usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// ScriptStruct Engine.SkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_KR16, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// ScriptStruct Engine.SingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_6H4Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_CAEQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// ScriptStruct Engine.AnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_UNV6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// ScriptStruct Engine.AnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// ScriptStruct Engine.AnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_YEE7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// ScriptStruct Engine.AnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_M4P5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_RA4C, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// ScriptStruct Engine.AnimNotifyEvent
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_EM8E, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_ETP2, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_C7ZY, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_OUZS, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_F14H, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// ScriptStruct Engine.AudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_MUGC, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_1VCL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// ScriptStruct Engine.KeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_S120, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// ScriptStruct Engine.IndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_XU9E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// ScriptStruct Engine.RealCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_8UJS, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// ScriptStruct Engine.RichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_KZIT, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// ScriptStruct Engine.RichCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// ScriptStruct Engine.RuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// ScriptStruct Engine.BaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_B64M, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_70EX, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_JVW4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// ScriptStruct Engine.AttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_XQPY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// ScriptStruct Engine.SoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// ScriptStruct Engine.SoundAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_MVJE, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_DDWN, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_108H, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// ScriptStruct Engine.SoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_ZITG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// ScriptStruct Engine.SoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// ScriptStruct Engine.SoundModulationDefaultRoutingSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_TXSH, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// ScriptStruct Engine.MovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// ScriptStruct Engine.NavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_SC4F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_3D13, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// ScriptStruct Engine.WeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_QC43, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// ScriptStruct Engine.WeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// ScriptStruct Engine.PostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Q5G9, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_H0EA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PVL8, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WS1V, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_722Q, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_BFH2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_CYEM, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_QQLF, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_6N5Y, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_RP0Y, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PORQ, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_AQ0Q, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y6GN, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_O8B8, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_M64F, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_0CNY, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// ScriptStruct Engine.ReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_1TZC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// ScriptStruct Engine.InteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_M6D6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// ScriptStruct Engine.BroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_WM2U, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// ScriptStruct Engine.NetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// ScriptStruct Engine.DebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_J3OS, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_PAUV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_1WTX, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// ScriptStruct Engine.ActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_YMAX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// ScriptStruct Engine.PerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// ScriptStruct Engine.StaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_4RAA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// ScriptStruct Engine.StreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// ScriptStruct Engine.LightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_NWBN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// ScriptStruct Engine.InstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// ScriptStruct Engine.InstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_Y7AE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// ScriptStruct Engine.GeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// ScriptStruct Engine.LightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_9XW7, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// ScriptStruct Engine.MaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// ScriptStruct Engine.MaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_7RY5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// ScriptStruct Engine.ScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// ScriptStruct Engine.VectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// ScriptStruct Engine.TextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// ScriptStruct Engine.RuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// ScriptStruct Engine.FontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_D1LQ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// ScriptStruct Engine.StaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_YKJ9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// ScriptStruct Engine.StaticSwitchParameter
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_06SL, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// ScriptStruct Engine.StaticComponentMaskParameter
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// ScriptStruct Engine.StaticTerrainLayerWeightParameter
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_FZ24, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// ScriptStruct Engine.MaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// ScriptStruct Engine.StaticMaterialLayersParameter
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_YBE6, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// ScriptStruct Engine.StaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// ScriptStruct Engine.MaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// ScriptStruct Engine.MaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// ScriptStruct Engine.BPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_LUHM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// ScriptStruct Engine.BlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_A3K4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_FOVN, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// ScriptStruct Engine.SoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_73E2, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_HTQ1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_9P29, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_TB0Q, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// ScriptStruct Engine.SoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_3O51, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_56OH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// ScriptStruct Engine.SoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_HOHV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_DD3E, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// ScriptStruct Engine.SoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// ScriptStruct Engine.SoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_N7AL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// ScriptStruct Engine.SoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// ScriptStruct Engine.SubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_NHUE, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// ScriptStruct Engine.InterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_U8I8, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// ScriptStruct Engine.BoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_LP21, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// ScriptStruct Engine.PerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// ScriptStruct Engine.BlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// ScriptStruct Engine.EditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// ScriptStruct Engine.BlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_962I, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// ScriptStruct Engine.CustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// ScriptStruct Engine.AnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// ScriptStruct Engine.BakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_J38W, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// ScriptStruct Engine.BakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_MQSB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_FHC4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// ScriptStruct Engine.AnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// ScriptStruct Engine.AnimationTransitionBetweenStates
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_71OI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_XMK1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// ScriptStruct Engine.BakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_FO5H, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// ScriptStruct Engine.CachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// ScriptStruct Engine.ExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_V8G8, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// ScriptStruct Engine.ExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_XZ2T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// ScriptStruct Engine.GraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// ScriptStruct Engine.AnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// ScriptStruct Engine.AnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_FXSE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_6HV6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_BUMT, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// ScriptStruct Engine.AnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// ScriptStruct Engine.SmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_D6P3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// ScriptStruct Engine.AnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// ScriptStruct Engine.FloatCurve
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// ScriptStruct Engine.RawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// ScriptStruct Engine.AnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_QM15, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// ScriptStruct Engine.AnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// ScriptStruct Engine.AlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_1QI5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_SDV3, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// ScriptStruct Engine.AnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// ScriptStruct Engine.MarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_C84G, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// ScriptStruct Engine.CompositeSection
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, startTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_8W0V, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// ScriptStruct Engine.SlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// ScriptStruct Engine.BranchingPoint
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// ScriptStruct Engine.BranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_QEBO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// ScriptStruct Engine.TimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// ScriptStruct Engine.TimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_NTOF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// ScriptStruct Engine.TrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// ScriptStruct Engine.StringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_YNPW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// ScriptStruct Engine.StringCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// ScriptStruct Engine.BakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// ScriptStruct Engine.IntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// ScriptStruct Engine.IntegralCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_ZQB5, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// ScriptStruct Engine.BakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// ScriptStruct Engine.SimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// ScriptStruct Engine.SimpleCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_ZR7N, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// ScriptStruct Engine.BakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// ScriptStruct Engine.BakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_QSTJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// ScriptStruct Engine.AnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// ScriptStruct Engine.DirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// ScriptStruct Engine.PrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_GVFF, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// ScriptStruct Engine.PrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_SPUQ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_EZRS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_PAC2, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// ScriptStruct Engine.PrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// ScriptStruct Engine.PrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_S2LK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// ScriptStruct Engine.AssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// ScriptStruct Engine.AssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// ScriptStruct Engine.AtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// ScriptStruct Engine.AudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_AUB4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// ScriptStruct Engine.AudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_BQ0W, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// ScriptStruct Engine.AudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_2PMG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// ScriptStruct Engine.EditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_OBGU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// ScriptStruct Engine.FilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// ScriptStruct Engine.ImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// ScriptStruct Engine.EditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// ScriptStruct Engine.BuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// ScriptStruct Engine.BuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// ScriptStruct Engine.BuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// ScriptStruct Engine.BuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// ScriptStruct Engine.MaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// ScriptStruct Engine.ParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// ScriptStruct Engine.BlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// ScriptStruct Engine.ExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// ScriptStruct Engine.EditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_WL06, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// ScriptStruct Engine.LaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// ScriptStruct Engine.BandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// ScriptStruct Engine.BandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_CFLL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// ScriptStruct Engine.BoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_J2WE, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// ScriptStruct Engine.VirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// ScriptStruct Engine.SmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_FYEE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// ScriptStruct Engine.AnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// ScriptStruct Engine.BlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// ScriptStruct Engine.KShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_K4VO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_9HLH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_YPAT, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// ScriptStruct Engine.KSphereElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// ScriptStruct Engine.KBoxElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_9VFH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// ScriptStruct Engine.KSphylElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// ScriptStruct Engine.KConvexElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_91SA, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_ZUD1, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// ScriptStruct Engine.KTaperedCapsuleElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_0Y9R, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// ScriptStruct Engine.KAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_BT6F, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// ScriptStruct Engine.BranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// ScriptStruct Engine.InputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// ScriptStruct Engine.BuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// ScriptStruct Engine.ActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// ScriptStruct Engine.PooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// ScriptStruct Engine.FOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_FFW8, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// ScriptStruct Engine.ROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// ScriptStruct Engine.VOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// ScriptStruct Engine.BasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_PKJ9, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// ScriptStruct Engine.RootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// ScriptStruct Engine.Vector_NetQuantize10
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// ScriptStruct Engine.RootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_2DKV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_PRHF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// ScriptStruct Engine.RootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_YVW4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_1U60, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// ScriptStruct Engine.RepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_LS1D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_YBK2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_NSW1, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// ScriptStruct Engine.SimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_GQ9C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// ScriptStruct Engine.Vector_NetQuantize
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// ScriptStruct Engine.Vector_NetQuantizeNormal
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// ScriptStruct Engine.HitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_K1JV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_7HMM, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// ScriptStruct Engine.FindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_PU1Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// ScriptStruct Engine.NavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// ScriptStruct Engine.CharacterMovementComponentPostPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_XV6R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// ScriptStruct Engine.DelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// ScriptStruct Engine.CollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_D4ZN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_B5IJ, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_PUK4, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// ScriptStruct Engine.CustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// ScriptStruct Engine.CustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// ScriptStruct Engine.Redirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// ScriptStruct Engine.BlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.StatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// ScriptStruct Engine.StatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_DIO3, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// ScriptStruct Engine.GameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// ScriptStruct Engine.ClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_IIIT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// ScriptStruct Engine.PluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// ScriptStruct Engine.StructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// ScriptStruct Engine.DropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// ScriptStruct Engine.NetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// ScriptStruct Engine.DebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_I87L, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// ScriptStruct Engine.CullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_2YW5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_D7NB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// ScriptStruct Engine.RollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_R6GH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_XG49, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_O1SB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// ScriptStruct Engine.MulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_OOM7, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// ScriptStruct Engine.TextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_0WU1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_GW5M, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_XTSF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_U91T, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_QEGQ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_09KY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// ScriptStruct Engine.DialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// ScriptStruct Engine.DialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// ScriptStruct Engine.LightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_U2JH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// ScriptStruct Engine.LightmassDirectionalLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// ScriptStruct Engine.EdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_6UY4, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// ScriptStruct Engine.EdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_ZB9Q, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// ScriptStruct Engine.ExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// ScriptStruct Engine.FontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_AKYK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// ScriptStruct Engine.FontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_UYRX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_OEWC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_HBS5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_AOJJ, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_2W2R, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_DZQV, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_5EG1, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// ScriptStruct Engine.ForceFeedbackAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// ScriptStruct Engine.ForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_FQ11, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// ScriptStruct Engine.HapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// ScriptStruct Engine.HLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_30NE, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// ScriptStruct Engine.ComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// ScriptStruct Engine.ComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// ScriptStruct Engine.BlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_IO3Y, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// ScriptStruct Engine.BlueprintInputActionDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_ZQK0, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.BlueprintInputAxisDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_4IUG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// ScriptStruct Engine.CachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_JYKG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// ScriptStruct Engine.BlueprintInputKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_P0GO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_W9L3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_VHH7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// ScriptStruct Engine.InputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_2YNM, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// ScriptStruct Engine.InputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// ScriptStruct Engine.InputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_UH0S, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.InputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_3BRL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.InputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// ScriptStruct Engine.BlueprintInputTouchDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_9HAG, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// ScriptStruct Engine.CurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_X9LY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// ScriptStruct Engine.CurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// ScriptStruct Engine.InterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_1PT7, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// ScriptStruct Engine.AnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_EFUE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_43W2, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// ScriptStruct Engine.BoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_9SP5, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// ScriptStruct Engine.DirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// ScriptStruct Engine.EventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// ScriptStruct Engine.PrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_UKTF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// ScriptStruct Engine.InterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// ScriptStruct Engine.InterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// ScriptStruct Engine.ParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// ScriptStruct Engine.SoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_QBVF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// ScriptStruct Engine.ToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_VTXA, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// ScriptStruct Engine.VisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_2US2, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// ScriptStruct Engine.LayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_M0JB, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_1MB2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// ScriptStruct Engine.StreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_3C4L, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// ScriptStruct Engine.LevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_DXIM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// ScriptStruct Engine.PSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_OOKB, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// ScriptStruct Engine.PSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_G9IE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// ScriptStruct Engine.WorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_I0HR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// ScriptStruct Engine.LightmassPointLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// ScriptStruct Engine.ComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_R668, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// ScriptStruct Engine.LODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, Mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// ScriptStruct Engine.MaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// ScriptStruct Engine.ScalarMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// ScriptStruct Engine.VectorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// ScriptStruct Engine.ColorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// ScriptStruct Engine.MaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// ScriptStruct Engine.ExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// ScriptStruct Engine.MaterialAttributesInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// ScriptStruct Engine.ShadingModelMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// ScriptStruct Engine.MaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_HTDT, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// ScriptStruct Engine.MaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_98E6, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_ER16, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// ScriptStruct Engine.CustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_HBTO, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// ScriptStruct Engine.CustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_5BIH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// ScriptStruct Engine.CustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// ScriptStruct Engine.CollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// ScriptStruct Engine.CollectionScalarParameter
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// ScriptStruct Engine.CollectionVectorParameter
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// ScriptStruct Engine.InterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// ScriptStruct Engine.CameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// ScriptStruct Engine.PurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// ScriptStruct Engine.NavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_YANB, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// ScriptStruct Engine.NavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_6YTT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_XYXZ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_FRDF, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_3IP3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// ScriptStruct Engine.NavigationLink
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// ScriptStruct Engine.NavigationSegmentLink
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// ScriptStruct Engine.NetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// ScriptStruct Engine.NodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_T9IJ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// ScriptStruct Engine.DistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_WFOL, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// ScriptStruct Engine.RawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// ScriptStruct Engine.RawDistributionVector
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// ScriptStruct Engine.RawDistributionFloat
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// ScriptStruct Engine.BeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_AGFY, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// ScriptStruct Engine.ParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_51B1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// ScriptStruct Engine.ParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_NFRZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_NJWH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// ScriptStruct Engine.LocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// ScriptStruct Engine.OrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_NT0I, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// ScriptStruct Engine.EmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_MQ5V, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_E0BW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_3Z0G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// ScriptStruct Engine.ParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_CUBL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_R4XC, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// ScriptStruct Engine.FloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// ScriptStruct Engine.GPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_U91G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_KULF, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_L1I8, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_B586, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_Y5ND, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_MQ4X, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// ScriptStruct Engine.GPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_SFVG, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_PDZ3, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_ZS5Q, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// ScriptStruct Engine.ParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_9JGA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// ScriptStruct Engine.LODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// ScriptStruct Engine.NamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// ScriptStruct Engine.ParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_EAR1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_L8MY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// ScriptStruct Engine.SolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// ScriptStruct Engine.PhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_S1L1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// ScriptStruct Engine.PhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// ScriptStruct Engine.ConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// ScriptStruct Engine.ConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_HACF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// ScriptStruct Engine.ConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_PH99, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// ScriptStruct Engine.LinearConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_DCD2, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// ScriptStruct Engine.ConeConstraint
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_E9IG, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// ScriptStruct Engine.TwistConstraint
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_I8LV, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// ScriptStruct Engine.ConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_H9FN, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// ScriptStruct Engine.LinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_RC4A, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// ScriptStruct Engine.AngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_F7C7, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// ScriptStruct Engine.ConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_CPWS, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// ScriptStruct Engine.ConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_PWUY, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_ZHFQ, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// ScriptStruct Engine.PhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// ScriptStruct Engine.RigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// ScriptStruct Engine.PhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_N7H5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// ScriptStruct Engine.ChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// ScriptStruct Engine.EngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_CQV1, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// ScriptStruct Engine.MinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_VCZI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_8Z61, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_4JPT, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_G8MZ, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// ScriptStruct Engine.CameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_GDF2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// ScriptStruct Engine.TViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_AYUW, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_4KBF, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// ScriptStruct Engine.KeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_UTDH, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// ScriptStruct Engine.PoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// ScriptStruct Engine.PoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// ScriptStruct Engine.PreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// ScriptStruct Engine.CollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// ScriptStruct Engine.PerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// ScriptStruct Engine.RigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_8CUM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// ScriptStruct Engine.TransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// ScriptStruct Engine.TransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// ScriptStruct Engine.Node
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_A6WX, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// ScriptStruct Engine.BPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// ScriptStruct Engine.MeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_VNXL, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// ScriptStruct Engine.SkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_OQN1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// ScriptStruct Engine.BoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_9SCT, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// ScriptStruct Engine.SkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_CXSJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// ScriptStruct Engine.SkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_KPCX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_5PNB, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_RSD6, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_87OI, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// ScriptStruct Engine.SkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_X3CC, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_JJVL, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// ScriptStruct Engine.PerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_PQDI, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_PY2Y, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_OXIH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_ED62, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// ScriptStruct Engine.SkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_M9V5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// ScriptStruct Engine.BoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_LV81, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// ScriptStruct Engine.SkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_ILQX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_M9NF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_7XRW, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// ScriptStruct Engine.TentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// ScriptStruct Engine.SoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_7WNL, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_644W, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_3BRK, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// ScriptStruct Engine.PassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// ScriptStruct Engine.SourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_MVOM, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// ScriptStruct Engine.SoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_A36J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_HLLK, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// ScriptStruct Engine.AudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_KT8T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// ScriptStruct Engine.AudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_DDYH, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// ScriptStruct Engine.SoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_UPLQ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_7RD5, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// ScriptStruct Engine.DialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// ScriptStruct Engine.DistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// ScriptStruct Engine.ModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_57JY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// ScriptStruct Engine.SplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_YJL7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// ScriptStruct Engine.SplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// ScriptStruct Engine.StaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_CTGW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// ScriptStruct Engine.EquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// ScriptStruct Engine.SubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_M847, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// ScriptStruct Engine.TimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// ScriptStruct Engine.TimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_GUNL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// ScriptStruct Engine.TimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_TLU1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// ScriptStruct Engine.TimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_AFIJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// ScriptStruct Engine.Timeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_HSQE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_PI9J, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// ScriptStruct Engine.TTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_A6D2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_60B7, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// ScriptStruct Engine.TTEventTrack
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// ScriptStruct Engine.TTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// ScriptStruct Engine.TTFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// ScriptStruct Engine.TTVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// ScriptStruct Engine.TTLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// ScriptStruct Engine.TouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// ScriptStruct Engine.HardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// ScriptStruct Engine.VirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_92IL, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// ScriptStruct Engine.VirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_H7CB, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_KKE3, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// ScriptStruct Engine.VoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// ScriptStruct Engine.MaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_X843, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// ScriptStruct Engine.MeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// ScriptStruct Engine.MeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_636F, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// ScriptStruct Engine.HierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_ASCD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// ScriptStruct Engine.VectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// ScriptStruct Engine.Vector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// ScriptStruct Engine.FloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// ScriptStruct Engine.VectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// ScriptStruct Engine.FormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_R35V, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_ANMU, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// ScriptStruct Engine.ExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// ScriptStruct Engine.Vector2MaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// ScriptStruct Engine.BranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_1B6H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// ScriptStruct Engine.PlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_2X2D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_V6V1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// ScriptStruct Engine.PlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_DPK1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// ScriptStruct Engine.DebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_04M2, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// ScriptStruct Engine.LatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// ScriptStruct Engine.TimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// ScriptStruct Engine.CollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// ScriptStruct Engine.GenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// ScriptStruct Engine.UserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_F6CY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// ScriptStruct Engine.TableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_33BU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// ScriptStruct Engine.KeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_MKNB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// ScriptStruct Engine.AnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_WMZ2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// ScriptStruct Engine.InputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// ScriptStruct Engine.InputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_3KWO, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_8RJZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// ScriptStruct Engine.InputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_EGBW, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// ScriptStruct Engine.InputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// ScriptStruct Engine.PoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_4IUY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// ScriptStruct Engine.ComponentSpacePoseLink
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// ScriptStruct Engine.AnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_IQJ1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// ScriptStruct Engine.AnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_IIO1, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_U6GU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// ScriptStruct Engine.PoseLink
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// ScriptStruct Engine.PerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// ScriptStruct Engine.PoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_W4RD, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// ScriptStruct Engine.AnimNode_Root
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// ScriptStruct Engine.AnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_ETYT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// ScriptStruct Engine.ActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_DZTJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// ScriptStruct Engine.ActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_X1RP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_M51Q, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// ScriptStruct Engine.SceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// ScriptStruct Engine.AnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_0LXJ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// ScriptStruct Engine.AnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_Z1WG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// ScriptStruct Engine.AnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_LZS1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// ScriptStruct Engine.MarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// ScriptStruct Engine.BlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_2QG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// ScriptStruct Engine.BlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_OLHV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_VPYJ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// ScriptStruct Engine.AnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_MS8L, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_U2SL, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_Z8LM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// ScriptStruct Engine.ComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// ScriptStruct Engine.LocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// ScriptStruct Engine.NamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_Q84V, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// ScriptStruct Engine.NamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// ScriptStruct Engine.NamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// ScriptStruct Engine.NamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// ScriptStruct Engine.AnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// ScriptStruct Engine.AnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_S3ZL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.AnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_ZZXY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// ScriptStruct Engine.StateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_LGJM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// ScriptStruct Engine.StateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_H6EN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// ScriptStruct Engine.RootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// ScriptStruct Engine.AnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_R81L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// ScriptStruct Engine.VectorCurve
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// ScriptStruct Engine.TransformCurve
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// ScriptStruct Engine.SlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_41KM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_71L2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// ScriptStruct Engine.A2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// ScriptStruct Engine.A2CSPose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_DNP6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// ScriptStruct Engine.QueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_3RE7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_D02S, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// ScriptStruct Engine.AnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_OAUM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// ScriptStruct Engine.AnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_ACIW, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_B8S6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_FBUJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_841W, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_3W8P, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_DEPO, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_SCH0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_ZSQ8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_N6P3, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// ScriptStruct Engine.AnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_LLID, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// ScriptStruct Engine.AnimNode_Inertialization
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_MIP6, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// ScriptStruct Engine.InertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_6IMK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// ScriptStruct Engine.InertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_AKG1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// ScriptStruct Engine.InertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_V2WU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// ScriptStruct Engine.InertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_YR2Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// ScriptStruct Engine.AnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_B0T5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_T2NA, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// ScriptStruct Engine.AnimNode_LinkedAnimLayer
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// ScriptStruct Engine.AnimNode_LinkedInputPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_AAMT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// ScriptStruct Engine.AnimNode_SaveCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_QQYX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// ScriptStruct Engine.AnimNode_SequencePlayer
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_0TJE, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// ScriptStruct Engine.AnimNode_StateMachine
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_VVTL, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// ScriptStruct Engine.AnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_A5M4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// ScriptStruct Engine.AnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_AE78, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_EH5F, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_DBD0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_VQCP, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_GCM8, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// ScriptStruct Engine.AnimNode_TransitionResult
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_ACMV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_UseCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// ScriptStruct Engine.CompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// ScriptStruct Engine.CurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// ScriptStruct Engine.ScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// ScriptStruct Engine.RotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// ScriptStruct Engine.TranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// ScriptStruct Engine.RawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// ScriptStruct Engine.AnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// ScriptStruct Engine.AnimSingleNodeInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_P9UL, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// ScriptStruct Engine.AnimNode_SingleNode
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_FS7X, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// ScriptStruct Engine.AnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_UVQB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// ScriptStruct Engine.AnimationState
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// ScriptStruct Engine.AnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_U4IK, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// ScriptStruct Engine.PerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// ScriptStruct Engine.AssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_PW8K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// ScriptStruct Engine.AtmospherePrecomputeInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_BVVG, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// ScriptStruct Engine.AudioReverbEffect
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_NV6F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// ScriptStruct Engine.NavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_FUZ6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// ScriptStruct Engine.GridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// ScriptStruct Engine.BPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// ScriptStruct Engine.EditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_JW17, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// ScriptStruct Engine.BPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// ScriptStruct Engine.BPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_HNHI, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// ScriptStruct Engine.BlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_RWFE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// ScriptStruct Engine.CompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_DCGS, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// ScriptStruct Engine.EventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_5C24, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// ScriptStruct Engine.BlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_0G9K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.PointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_4WEC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// ScriptStruct Engine.DebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_NKTS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// ScriptStruct Engine.NodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_I5CH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// ScriptStruct Engine.AnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_TMMV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// ScriptStruct Engine.BookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_FY3B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.BookmarkJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.Bookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_54JZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// ScriptStruct Engine.CachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_UG62, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// ScriptStruct Engine.CachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_W2B3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// ScriptStruct Engine.CachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_QMZT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// ScriptStruct Engine.CachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_KVJ7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// ScriptStruct Engine.CachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_NB5U, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// ScriptStruct Engine.CameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_ZGFN, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// ScriptStruct Engine.CameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// ScriptStruct Engine.CameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_3FAF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// ScriptStruct Engine.CameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_SNNZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// ScriptStruct Engine.DummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_6G8B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// ScriptStruct Engine.CanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// ScriptStruct Engine.WrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// ScriptStruct Engine.TextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// ScriptStruct Engine.CharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_GW4F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// ScriptStruct Engine.CharacterMoveResponsePackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// ScriptStruct Engine.CharacterServerMovePackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// ScriptStruct Engine.ChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// ScriptStruct Engine.ChildActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_6P1F, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// ScriptStruct Engine.AutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_UCM1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_5DGS, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// ScriptStruct Engine.RuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// ScriptStruct Engine.NamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// ScriptStruct Engine.CurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.CustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_RXJB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_VBIE, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// ScriptStruct Engine.CustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_TZVG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// ScriptStruct Engine.DataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// ScriptStruct Engine.DataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.GraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// ScriptStruct Engine.EdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// ScriptStruct Engine.EdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_0D5J, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// ScriptStruct Engine.EdGraphSchemaAction_NewNode
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// ScriptStruct Engine.ScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_JQGZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// ScriptStruct Engine.URL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// ScriptStruct Engine.FullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_NS5G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// ScriptStruct Engine.LevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_OTNS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// ScriptStruct Engine.NamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_9U5N, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// ScriptStruct Engine.WorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_YOQW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_ASAX, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_G6S5, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_463N, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// ScriptStruct Engine.ExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_8S7I, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// ScriptStruct Engine.TickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_25QP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// ScriptStruct Engine.CanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// ScriptStruct Engine.DepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_CA14, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// ScriptStruct Engine.FontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_SO6H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// ScriptStruct Engine.ComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_RO0A, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// ScriptStruct Engine.DamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_JM50, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// ScriptStruct Engine.RadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// ScriptStruct Engine.RadialDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// ScriptStruct Engine.PointDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_BHTR, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// ScriptStruct Engine.MeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_R6WP, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_D5VA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// ScriptStruct Engine.POV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// ScriptStruct Engine.AnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_3JEQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_UVZK, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_V4ME, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// ScriptStruct Engine.AnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// ScriptStruct Engine.AnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// ScriptStruct Engine.MTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// ScriptStruct Engine.OverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_4WB6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_GGLB, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// ScriptStruct Engine.SwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_R1PN, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// ScriptStruct Engine.LightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_15UE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_EFV0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// ScriptStruct Engine.BasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// ScriptStruct Engine.FractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// ScriptStruct Engine.RigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_M72B, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// ScriptStruct Engine.CollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_D46H, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// ScriptStruct Engine.RigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_2C4A, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_GMZJ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// ScriptStruct Engine.ForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_EWTJ, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// ScriptStruct Engine.PredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// ScriptStruct Engine.PredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// ScriptStruct Engine.PredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_2SNE, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_SGVG, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_3NE5, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_TMY9, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// ScriptStruct Engine.ActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_NSA3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// ScriptStruct Engine.ClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// ScriptStruct Engine.ClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// ScriptStruct Engine.HLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// ScriptStruct Engine.ImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_9B1J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_3GEX, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_WCD8, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_COJX, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// ScriptStruct Engine.InterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// ScriptStruct Engine.CameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// ScriptStruct Engine.SubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_N5YI, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// ScriptStruct Engine.SupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_638J, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// ScriptStruct Engine.VectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_5SRR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// ScriptStruct Engine.FloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_2BNJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// ScriptStruct Engine.DrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_NYRQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// ScriptStruct Engine.LatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_66PH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// ScriptStruct Engine.LevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_6K4Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_ZOK9, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_WL17, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// ScriptStruct Engine.StreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_6357, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// ScriptStruct Engine.DynamicTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_VV2M, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// ScriptStruct Engine.PrecomputedLightInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_3A25, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_CATU, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// ScriptStruct Engine.BatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_0KU2, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// ScriptStruct Engine.BatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_TWOF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// ScriptStruct Engine.ClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_LC5T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// ScriptStruct Engine.ParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_FXKF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// ScriptStruct Engine.StaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// ScriptStruct Engine.ParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// ScriptStruct Engine.FunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// ScriptStruct Engine.FunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_5AUN, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// ScriptStruct Engine.ScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_FXNB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// ScriptStruct Engine.MemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_IDTW, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// ScriptStruct Engine.MeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_OW8C, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// ScriptStruct Engine.MeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_M21O, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// ScriptStruct Engine.NameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// ScriptStruct Engine.NameCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// ScriptStruct Engine.NavDataConfig
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// ScriptStruct Engine.PacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// ScriptStruct Engine.FastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_SM6P, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_M4E5, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_U91I, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// ScriptStruct Engine.FastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// ScriptStruct Engine.ParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// ScriptStruct Engine.BeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// ScriptStruct Engine.ParticleSystemWorldManagerTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_Y00I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// ScriptStruct Engine.ParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_CBWQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.ParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_M706, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.FreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_4FDI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// ScriptStruct Engine.ViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_VOPR, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_91N8, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// ScriptStruct Engine.UpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_G1D9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// ScriptStruct Engine.PlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_IUSP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_DVWY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// ScriptStruct Engine.PreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// ScriptStruct Engine.PreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// ScriptStruct Engine.PrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_IL04, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_GFB1, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// ScriptStruct Engine.SpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// ScriptStruct Engine.QuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_6DD0, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// ScriptStruct Engine.QuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_EK9O, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// ScriptStruct Engine.QuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_Q2HJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// ScriptStruct Engine.QuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_WS9B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_PHP1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// ScriptStruct Engine.QuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_R8IR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// ScriptStruct Engine.LevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_C6XY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// ScriptStruct Engine.CompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_E0BQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// ScriptStruct Engine.RootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// ScriptStruct Engine.RootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_KBSR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// ScriptStruct Engine.RootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_NQWT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_8HGZ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, startTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_K6VN, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_UWJA, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x00A0);
		}

		// ScriptStruct Engine.RootMotionSource_JumpForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_DIIR, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_RJBY, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_233R, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// ScriptStruct Engine.RootMotionSource_MoveToForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_2ZKK, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// ScriptStruct Engine.RootMotionSource_RadialForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_58GV, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_O4KM, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_BUWX, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// ScriptStruct Engine.RootMotionSource_ConstantForce
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_UEUT, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// ScriptStruct Engine.CameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_WB95, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_DUO9, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// ScriptStruct Engine.GaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// ScriptStruct Engine.ConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_HBUA, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// ScriptStruct Engine.LensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_TX6S, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_ZWX2, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// ScriptStruct Engine.LensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_JWV5, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// ScriptStruct Engine.LensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_D7LO, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// ScriptStruct Engine.FilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// ScriptStruct Engine.ColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// ScriptStruct Engine.ColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_Q11T, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// ScriptStruct Engine.SceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_WH6P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// ScriptStruct Engine.ClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// ScriptStruct Engine.ClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_UJOC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_OYUX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// ScriptStruct Engine.SkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_WXRJ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_21YP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// ScriptStruct Engine.BoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_I9KU, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// ScriptStruct Engine.SkeletalMeshComponentClothTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_G9WP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// ScriptStruct Engine.SkeletalMeshComponentEndPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_NQUE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// ScriptStruct Engine.NameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// ScriptStruct Engine.RigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// ScriptStruct Engine.BoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// ScriptStruct Engine.ReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// ScriptStruct Engine.SkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// ScriptStruct Engine.SkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// ScriptStruct Engine.SkinWeightProfileManagerTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_LRSO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// ScriptStruct Engine.PrecomputedSkyLightInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_22AA, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// ScriptStruct Engine.SmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_569T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// ScriptStruct Engine.CurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_GOTZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// ScriptStruct Engine.SoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_C3U5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// ScriptStruct Engine.SoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_9W02, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// ScriptStruct Engine.SoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// ScriptStruct Engine.SoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// ScriptStruct Engine.SoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_LCJG, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// ScriptStruct Engine.StreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_C3X8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// ScriptStruct Engine.SplineInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_XCPL, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// ScriptStruct Engine.SplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_5J10, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// ScriptStruct Engine.SplineMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// ScriptStruct Engine.MaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_WSEU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// ScriptStruct Engine.AssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_NB9L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// ScriptStruct Engine.MeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// ScriptStruct Engine.MeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// ScriptStruct Engine.StaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_M4S8, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// ScriptStruct Engine.StaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_H9KC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_SMDX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_TZBL, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// ScriptStruct Engine.PaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// ScriptStruct Engine.StaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_5STF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// ScriptStruct Engine.StaticMeshComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_XXJ3, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// ScriptStruct Engine.TextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// ScriptStruct Engine.TexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_U1O4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// ScriptStruct Engine.TextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_OQQK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// ScriptStruct Engine.TextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_FPAH, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// ScriptStruct Engine.TTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// ScriptStruct Engine.TimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_5ODL, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_BIBH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// ScriptStruct Engine.EndPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_W31L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// ScriptStruct Engine.StartPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_9HNX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// ScriptStruct Engine.LevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_1RA0, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// ScriptStruct Engine.LightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_1A1S, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_GPA3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_4ZMB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_WF31, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_DM39, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_TNKP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_E4I7, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_211G, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_KL71, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_QVP2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.EventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_UFFT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_C0J6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.BoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// ScriptStruct MovieSceneTracks.ScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// ScriptStruct MovieSceneTracks.Vector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// ScriptStruct MovieSceneTracks.VectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// ScriptStruct MovieSceneTracks.ColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// ScriptStruct MovieSceneTracks.TransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_1N7W, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_NP71, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_C0VM, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_MBHE, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_KEXS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneStringChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_OYVZ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DPathSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_L564, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_5DQI, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DTransformKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_1Q83, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DScaleKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_R9Q3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DRotationKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_8IO5, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DLocationKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_T82D, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_RXY0, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_9Y40, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneAudioSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_2E9U, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_PKAM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneColorKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_RDLC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneColorSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_XX7S, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_KBHL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEventSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_3GLD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneFadeSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_WHES, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneObjectPropertyTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_31KO, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneParticleSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// ScriptStruct MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_7Q4J, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_1NID, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneStringPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_7BDR, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneBytePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneSlomoSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// ScriptStruct MovieSceneTracks.LevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_QWUQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVector4KeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_MVIM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_MEMT, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVector2DKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// ScriptStruct MovieSceneTracks.MovieSceneVisibilitySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_CSZJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_CC36, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// ScriptStruct ActorSequence.ActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// ScriptStruct Foliage.FoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_BKJB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_0LWT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// ScriptStruct Foliage.FoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_MIL1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// ScriptStruct Foliage.ProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_XXD2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// ScriptStruct Overlay.OverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}
	};
}
